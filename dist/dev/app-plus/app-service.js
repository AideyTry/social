if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then((value) => promise.resolve(callback()).then(() => value), (reason) => promise.resolve(callback()).then(() => {
      throw reason;
    }));
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global2 = uni.requireGlobal();
  ArrayBuffer = global2.ArrayBuffer;
  Int8Array = global2.Int8Array;
  Uint8Array = global2.Uint8Array;
  Uint8ClampedArray = global2.Uint8ClampedArray;
  Int16Array = global2.Int16Array;
  Uint16Array = global2.Uint16Array;
  Int32Array = global2.Int32Array;
  Uint32Array = global2.Uint32Array;
  Float32Array = global2.Float32Array;
  Float64Array = global2.Float64Array;
  BigInt64Array = global2.BigInt64Array;
  BigUint64Array = global2.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(shared, vue) {
  "use strict";
  function isDebugMode() {
    return typeof __channelId__ === "string" && __channelId__;
  }
  function jsonStringifyReplacer(k, p) {
    switch (shared.toRawType(p)) {
      case "Function":
        return "function() { [native code] }";
      default:
        return p;
    }
  }
  function normalizeLog(type, filename, args) {
    if (isDebugMode()) {
      args.push(filename.replace("at ", "uni-app:///"));
      return console[type].apply(console, args);
    }
    const msgs = args.map(function(v) {
      const type2 = shared.toTypeString(v).toLowerCase();
      if (["[object object]", "[object array]", "[object module]"].indexOf(type2) !== -1) {
        try {
          v = "---BEGIN:JSON---" + JSON.stringify(v, jsonStringifyReplacer) + "---END:JSON---";
        } catch (e2) {
          v = type2;
        }
      } else {
        if (v === null) {
          v = "---NULL---";
        } else if (v === void 0) {
          v = "---UNDEFINED---";
        } else {
          const vType = shared.toRawType(v).toUpperCase();
          if (vType === "NUMBER" || vType === "BOOLEAN") {
            v = "---BEGIN:" + vType + "---" + v + "---END:" + vType + "---";
          } else {
            v = String(v);
          }
        }
      }
      return v;
    });
    return msgs.join("---COMMA---") + " " + filename;
  }
  function formatAppLog(type, filename, ...args) {
    const res2 = normalizeLog(type, filename, args);
    res2 && console[type](res2);
  }
  function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
  }
  function getTarget() {
    return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
  }
  const isProxyAvailable = typeof Proxy === "function";
  const HOOK_SETUP = "devtools-plugin:setup";
  const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";
  class ApiProxy {
    constructor(plugin, hook) {
      this.target = null;
      this.targetQueue = [];
      this.onQueue = [];
      this.plugin = plugin;
      this.hook = hook;
      const defaultSettings = {};
      if (plugin.settings) {
        for (const id in plugin.settings) {
          const item = plugin.settings[id];
          defaultSettings[id] = item.defaultValue;
        }
      }
      const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
      let currentSettings = { ...defaultSettings };
      try {
        const raw = localStorage.getItem(localSettingsSaveId);
        const data = JSON.parse(raw);
        Object.assign(currentSettings, data);
      } catch (e2) {
      }
      this.fallbacks = {
        getSettings() {
          return currentSettings;
        },
        setSettings(value) {
          try {
            localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
          } catch (e2) {
          }
          currentSettings = value;
        }
      };
      hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
      this.proxiedOn = new Proxy({}, {
        get: (_target, prop) => {
          if (this.target) {
            return this.target.on[prop];
          } else {
            return (...args) => {
              this.onQueue.push({
                method: prop,
                args
              });
            };
          }
        }
      });
      this.proxiedTarget = new Proxy({}, {
        get: (_target, prop) => {
          if (this.target) {
            return this.target[prop];
          } else if (prop === "on") {
            return this.proxiedOn;
          } else if (Object.keys(this.fallbacks).includes(prop)) {
            return (...args) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: () => {
                }
              });
              return this.fallbacks[prop](...args);
            };
          } else {
            return (...args) => {
              return new Promise((resolve) => {
                this.targetQueue.push({
                  method: prop,
                  args,
                  resolve
                });
              });
            };
          }
        }
      });
    }
    async setRealTarget(target) {
      this.target = target;
      for (const item of this.onQueue) {
        this.target.on[item.method](...item.args);
      }
      for (const item of this.targetQueue) {
        item.resolve(await this.target[item.method](...item.args));
      }
    }
  }
  function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const target = getTarget();
    const hook = getDevtoolsGlobalHook();
    const enableProxy = isProxyAvailable && pluginDescriptor.enableEarlyProxy;
    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
      hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
    } else {
      const proxy = enableProxy ? new ApiProxy(pluginDescriptor, hook) : null;
      const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
      list.push({
        pluginDescriptor,
        setupFn,
        proxy
      });
      if (proxy)
        setupFn(proxy.proxiedTarget);
    }
  }
  /*!
   * vuex v4.0.2
   * (c) 2021 Evan You
   * @license MIT
   */
  var storeKey = "store";
  function useStore(key) {
    if (key === void 0)
      key = null;
    return vue.inject(key !== null ? key : storeKey);
  }
  function forEachValue(obj, fn) {
    Object.keys(obj).forEach(function(key) {
      return fn(obj[key], key);
    });
  }
  function isObject$2(obj) {
    return obj !== null && typeof obj === "object";
  }
  function isPromise(val) {
    return val && typeof val.then === "function";
  }
  function assert(condition, msg) {
    if (!condition) {
      throw new Error("[vuex] " + msg);
    }
  }
  function partial(fn, arg) {
    return function() {
      return fn(arg);
    };
  }
  function genericSubscribe(fn, subs, options) {
    if (subs.indexOf(fn) < 0) {
      options && options.prepend ? subs.unshift(fn) : subs.push(fn);
    }
    return function() {
      var i2 = subs.indexOf(fn);
      if (i2 > -1) {
        subs.splice(i2, 1);
      }
    };
  }
  function resetStore(store2, hot) {
    store2._actions = /* @__PURE__ */ Object.create(null);
    store2._mutations = /* @__PURE__ */ Object.create(null);
    store2._wrappedGetters = /* @__PURE__ */ Object.create(null);
    store2._modulesNamespaceMap = /* @__PURE__ */ Object.create(null);
    var state = store2.state;
    installModule(store2, state, [], store2._modules.root, true);
    resetStoreState(store2, state, hot);
  }
  function resetStoreState(store2, state, hot) {
    var oldState = store2._state;
    store2.getters = {};
    store2._makeLocalGettersCache = /* @__PURE__ */ Object.create(null);
    var wrappedGetters = store2._wrappedGetters;
    var computedObj = {};
    forEachValue(wrappedGetters, function(fn, key) {
      computedObj[key] = partial(fn, store2);
      Object.defineProperty(store2.getters, key, {
        get: function() {
          return computedObj[key]();
        },
        enumerable: true
      });
    });
    store2._state = vue.reactive({
      data: state
    });
    if (store2.strict) {
      enableStrictMode(store2);
    }
    if (oldState) {
      if (hot) {
        store2._withCommit(function() {
          oldState.data = null;
        });
      }
    }
  }
  function installModule(store2, rootState, path, module2, hot) {
    var isRoot = !path.length;
    var namespace = store2._modules.getNamespace(path);
    if (module2.namespaced) {
      if (store2._modulesNamespaceMap[namespace] && true) {
        console.error("[vuex] duplicate namespace " + namespace + " for the namespaced module " + path.join("/"));
      }
      store2._modulesNamespaceMap[namespace] = module2;
    }
    if (!isRoot && !hot) {
      var parentState = getNestedState(rootState, path.slice(0, -1));
      var moduleName = path[path.length - 1];
      store2._withCommit(function() {
        {
          if (moduleName in parentState) {
            console.warn('[vuex] state field "' + moduleName + '" was overridden by a module with the same name at "' + path.join(".") + '"');
          }
        }
        parentState[moduleName] = module2.state;
      });
    }
    var local = module2.context = makeLocalContext(store2, namespace, path);
    module2.forEachMutation(function(mutation, key) {
      var namespacedType = namespace + key;
      registerMutation(store2, namespacedType, mutation, local);
    });
    module2.forEachAction(function(action, key) {
      var type = action.root ? key : namespace + key;
      var handler = action.handler || action;
      registerAction(store2, type, handler, local);
    });
    module2.forEachGetter(function(getter, key) {
      var namespacedType = namespace + key;
      registerGetter(store2, namespacedType, getter, local);
    });
    module2.forEachChild(function(child, key) {
      installModule(store2, rootState, path.concat(key), child, hot);
    });
  }
  function makeLocalContext(store2, namespace, path) {
    var noNamespace = namespace === "";
    var local = {
      dispatch: noNamespace ? store2.dispatch : function(_type, _payload, _options) {
        var args = unifyObjectStyle(_type, _payload, _options);
        var payload = args.payload;
        var options = args.options;
        var type = args.type;
        if (!options || !options.root) {
          type = namespace + type;
          if (!store2._actions[type]) {
            console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
            return;
          }
        }
        return store2.dispatch(type, payload);
      },
      commit: noNamespace ? store2.commit : function(_type, _payload, _options) {
        var args = unifyObjectStyle(_type, _payload, _options);
        var payload = args.payload;
        var options = args.options;
        var type = args.type;
        if (!options || !options.root) {
          type = namespace + type;
          if (!store2._mutations[type]) {
            console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
            return;
          }
        }
        store2.commit(type, payload, options);
      }
    };
    Object.defineProperties(local, {
      getters: {
        get: noNamespace ? function() {
          return store2.getters;
        } : function() {
          return makeLocalGetters(store2, namespace);
        }
      },
      state: {
        get: function() {
          return getNestedState(store2.state, path);
        }
      }
    });
    return local;
  }
  function makeLocalGetters(store2, namespace) {
    if (!store2._makeLocalGettersCache[namespace]) {
      var gettersProxy = {};
      var splitPos = namespace.length;
      Object.keys(store2.getters).forEach(function(type) {
        if (type.slice(0, splitPos) !== namespace) {
          return;
        }
        var localType = type.slice(splitPos);
        Object.defineProperty(gettersProxy, localType, {
          get: function() {
            return store2.getters[type];
          },
          enumerable: true
        });
      });
      store2._makeLocalGettersCache[namespace] = gettersProxy;
    }
    return store2._makeLocalGettersCache[namespace];
  }
  function registerMutation(store2, type, handler, local) {
    var entry = store2._mutations[type] || (store2._mutations[type] = []);
    entry.push(function wrappedMutationHandler(payload) {
      handler.call(store2, local.state, payload);
    });
  }
  function registerAction(store2, type, handler, local) {
    var entry = store2._actions[type] || (store2._actions[type] = []);
    entry.push(function wrappedActionHandler(payload) {
      var res2 = handler.call(store2, {
        dispatch: local.dispatch,
        commit: local.commit,
        getters: local.getters,
        state: local.state,
        rootGetters: store2.getters,
        rootState: store2.state
      }, payload);
      if (!isPromise(res2)) {
        res2 = Promise.resolve(res2);
      }
      if (store2._devtoolHook) {
        return res2.catch(function(err) {
          store2._devtoolHook.emit("vuex:error", err);
          throw err;
        });
      } else {
        return res2;
      }
    });
  }
  function registerGetter(store2, type, rawGetter, local) {
    if (store2._wrappedGetters[type]) {
      {
        console.error("[vuex] duplicate getter key: " + type);
      }
      return;
    }
    store2._wrappedGetters[type] = function wrappedGetter(store3) {
      return rawGetter(local.state, local.getters, store3.state, store3.getters);
    };
  }
  function enableStrictMode(store2) {
    vue.watch(function() {
      return store2._state.data;
    }, function() {
      {
        assert(store2._committing, "do not mutate vuex store state outside mutation handlers.");
      }
    }, { deep: true, flush: "sync" });
  }
  function getNestedState(state, path) {
    return path.reduce(function(state2, key) {
      return state2[key];
    }, state);
  }
  function unifyObjectStyle(type, payload, options) {
    if (isObject$2(type) && type.type) {
      options = payload;
      payload = type;
      type = type.type;
    }
    {
      assert(typeof type === "string", "expects string as the type, but found " + typeof type + ".");
    }
    return { type, payload, options };
  }
  var LABEL_VUEX_BINDINGS = "vuex bindings";
  var MUTATIONS_LAYER_ID = "vuex:mutations";
  var ACTIONS_LAYER_ID = "vuex:actions";
  var INSPECTOR_ID = "vuex";
  var actionId = 0;
  function addDevtools(app, store2) {
    setupDevtoolsPlugin({
      id: "org.vuejs.vuex",
      app,
      label: "Vuex",
      homepage: "https://next.vuex.vuejs.org/",
      logo: "https://vuejs.org/images/icons/favicon-96x96.png",
      packageName: "vuex",
      componentStateTypes: [LABEL_VUEX_BINDINGS]
    }, function(api) {
      api.addTimelineLayer({
        id: MUTATIONS_LAYER_ID,
        label: "Vuex Mutations",
        color: COLOR_LIME_500
      });
      api.addTimelineLayer({
        id: ACTIONS_LAYER_ID,
        label: "Vuex Actions",
        color: COLOR_LIME_500
      });
      api.addInspector({
        id: INSPECTOR_ID,
        label: "Vuex",
        icon: "storage",
        treeFilterPlaceholder: "Filter stores..."
      });
      api.on.getInspectorTree(function(payload) {
        if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
          if (payload.filter) {
            var nodes = [];
            flattenStoreForInspectorTree(nodes, store2._modules.root, payload.filter, "");
            payload.rootNodes = nodes;
          } else {
            payload.rootNodes = [
              formatStoreForInspectorTree(store2._modules.root, "")
            ];
          }
        }
      });
      api.on.getInspectorState(function(payload) {
        if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
          var modulePath = payload.nodeId;
          makeLocalGetters(store2, modulePath);
          payload.state = formatStoreForInspectorState(getStoreModule(store2._modules, modulePath), modulePath === "root" ? store2.getters : store2._makeLocalGettersCache, modulePath);
        }
      });
      api.on.editInspectorState(function(payload) {
        if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
          var modulePath = payload.nodeId;
          var path = payload.path;
          if (modulePath !== "root") {
            path = modulePath.split("/").filter(Boolean).concat(path);
          }
          store2._withCommit(function() {
            payload.set(store2._state.data, path, payload.state.value);
          });
        }
      });
      store2.subscribe(function(mutation, state) {
        var data = {};
        if (mutation.payload) {
          data.payload = mutation.payload;
        }
        data.state = state;
        api.notifyComponentUpdate();
        api.sendInspectorTree(INSPECTOR_ID);
        api.sendInspectorState(INSPECTOR_ID);
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: Date.now(),
            title: mutation.type,
            data
          }
        });
      });
      store2.subscribeAction({
        before: function(action, state) {
          var data = {};
          if (action.payload) {
            data.payload = action.payload;
          }
          action._id = actionId++;
          action._time = Date.now();
          data.state = state;
          api.addTimelineEvent({
            layerId: ACTIONS_LAYER_ID,
            event: {
              time: action._time,
              title: action.type,
              groupId: action._id,
              subtitle: "start",
              data
            }
          });
        },
        after: function(action, state) {
          var data = {};
          var duration = Date.now() - action._time;
          data.duration = {
            _custom: {
              type: "duration",
              display: duration + "ms",
              tooltip: "Action duration",
              value: duration
            }
          };
          if (action.payload) {
            data.payload = action.payload;
          }
          data.state = state;
          api.addTimelineEvent({
            layerId: ACTIONS_LAYER_ID,
            event: {
              time: Date.now(),
              title: action.type,
              groupId: action._id,
              subtitle: "end",
              data
            }
          });
        }
      });
    });
  }
  var COLOR_LIME_500 = 8702998;
  var COLOR_DARK = 6710886;
  var COLOR_WHITE = 16777215;
  var TAG_NAMESPACED = {
    label: "namespaced",
    textColor: COLOR_WHITE,
    backgroundColor: COLOR_DARK
  };
  function extractNameFromPath(path) {
    return path && path !== "root" ? path.split("/").slice(-2, -1)[0] : "Root";
  }
  function formatStoreForInspectorTree(module2, path) {
    return {
      id: path || "root",
      label: extractNameFromPath(path),
      tags: module2.namespaced ? [TAG_NAMESPACED] : [],
      children: Object.keys(module2._children).map(function(moduleName) {
        return formatStoreForInspectorTree(module2._children[moduleName], path + moduleName + "/");
      })
    };
  }
  function flattenStoreForInspectorTree(result, module2, filter, path) {
    if (path.includes(filter)) {
      result.push({
        id: path || "root",
        label: path.endsWith("/") ? path.slice(0, path.length - 1) : path || "Root",
        tags: module2.namespaced ? [TAG_NAMESPACED] : []
      });
    }
    Object.keys(module2._children).forEach(function(moduleName) {
      flattenStoreForInspectorTree(result, module2._children[moduleName], filter, path + moduleName + "/");
    });
  }
  function formatStoreForInspectorState(module2, getters, path) {
    getters = path === "root" ? getters : getters[path];
    var gettersKeys = Object.keys(getters);
    var storeState = {
      state: Object.keys(module2.state).map(function(key) {
        return {
          key,
          editable: true,
          value: module2.state[key]
        };
      })
    };
    if (gettersKeys.length) {
      var tree = transformPathsToObjectTree(getters);
      storeState.getters = Object.keys(tree).map(function(key) {
        return {
          key: key.endsWith("/") ? extractNameFromPath(key) : key,
          editable: false,
          value: canThrow(function() {
            return tree[key];
          })
        };
      });
    }
    return storeState;
  }
  function transformPathsToObjectTree(getters) {
    var result = {};
    Object.keys(getters).forEach(function(key) {
      var path = key.split("/");
      if (path.length > 1) {
        var target = result;
        var leafKey = path.pop();
        path.forEach(function(p) {
          if (!target[p]) {
            target[p] = {
              _custom: {
                value: {},
                display: p,
                tooltip: "Module",
                abstract: true
              }
            };
          }
          target = target[p]._custom.value;
        });
        target[leafKey] = canThrow(function() {
          return getters[key];
        });
      } else {
        result[key] = canThrow(function() {
          return getters[key];
        });
      }
    });
    return result;
  }
  function getStoreModule(moduleMap, path) {
    var names = path.split("/").filter(function(n2) {
      return n2;
    });
    return names.reduce(function(module2, moduleName, i2) {
      var child = module2[moduleName];
      if (!child) {
        throw new Error('Missing module "' + moduleName + '" for path "' + path + '".');
      }
      return i2 === names.length - 1 ? child : child._children;
    }, path === "root" ? moduleMap : moduleMap.root._children);
  }
  function canThrow(cb) {
    try {
      return cb();
    } catch (e2) {
      return e2;
    }
  }
  var Module = function Module2(rawModule, runtime) {
    this.runtime = runtime;
    this._children = /* @__PURE__ */ Object.create(null);
    this._rawModule = rawModule;
    var rawState = rawModule.state;
    this.state = (typeof rawState === "function" ? rawState() : rawState) || {};
  };
  var prototypeAccessors$1 = { namespaced: { configurable: true } };
  prototypeAccessors$1.namespaced.get = function() {
    return !!this._rawModule.namespaced;
  };
  Module.prototype.addChild = function addChild(key, module2) {
    this._children[key] = module2;
  };
  Module.prototype.removeChild = function removeChild(key) {
    delete this._children[key];
  };
  Module.prototype.getChild = function getChild(key) {
    return this._children[key];
  };
  Module.prototype.hasChild = function hasChild(key) {
    return key in this._children;
  };
  Module.prototype.update = function update2(rawModule) {
    this._rawModule.namespaced = rawModule.namespaced;
    if (rawModule.actions) {
      this._rawModule.actions = rawModule.actions;
    }
    if (rawModule.mutations) {
      this._rawModule.mutations = rawModule.mutations;
    }
    if (rawModule.getters) {
      this._rawModule.getters = rawModule.getters;
    }
  };
  Module.prototype.forEachChild = function forEachChild(fn) {
    forEachValue(this._children, fn);
  };
  Module.prototype.forEachGetter = function forEachGetter(fn) {
    if (this._rawModule.getters) {
      forEachValue(this._rawModule.getters, fn);
    }
  };
  Module.prototype.forEachAction = function forEachAction(fn) {
    if (this._rawModule.actions) {
      forEachValue(this._rawModule.actions, fn);
    }
  };
  Module.prototype.forEachMutation = function forEachMutation(fn) {
    if (this._rawModule.mutations) {
      forEachValue(this._rawModule.mutations, fn);
    }
  };
  Object.defineProperties(Module.prototype, prototypeAccessors$1);
  var ModuleCollection = function ModuleCollection2(rawRootModule) {
    this.register([], rawRootModule, false);
  };
  ModuleCollection.prototype.get = function get2(path) {
    return path.reduce(function(module2, key) {
      return module2.getChild(key);
    }, this.root);
  };
  ModuleCollection.prototype.getNamespace = function getNamespace(path) {
    var module2 = this.root;
    return path.reduce(function(namespace, key) {
      module2 = module2.getChild(key);
      return namespace + (module2.namespaced ? key + "/" : "");
    }, "");
  };
  ModuleCollection.prototype.update = function update$1(rawRootModule) {
    update([], this.root, rawRootModule);
  };
  ModuleCollection.prototype.register = function register2(path, rawModule, runtime) {
    var this$1$1 = this;
    if (runtime === void 0)
      runtime = true;
    {
      assertRawModule(path, rawModule);
    }
    var newModule = new Module(rawModule, runtime);
    if (path.length === 0) {
      this.root = newModule;
    } else {
      var parent = this.get(path.slice(0, -1));
      parent.addChild(path[path.length - 1], newModule);
    }
    if (rawModule.modules) {
      forEachValue(rawModule.modules, function(rawChildModule, key) {
        this$1$1.register(path.concat(key), rawChildModule, runtime);
      });
    }
  };
  ModuleCollection.prototype.unregister = function unregister(path) {
    var parent = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    var child = parent.getChild(key);
    if (!child) {
      {
        console.warn("[vuex] trying to unregister module '" + key + "', which is not registered");
      }
      return;
    }
    if (!child.runtime) {
      return;
    }
    parent.removeChild(key);
  };
  ModuleCollection.prototype.isRegistered = function isRegistered(path) {
    var parent = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    if (parent) {
      return parent.hasChild(key);
    }
    return false;
  };
  function update(path, targetModule, newModule) {
    {
      assertRawModule(path, newModule);
    }
    targetModule.update(newModule);
    if (newModule.modules) {
      for (var key in newModule.modules) {
        if (!targetModule.getChild(key)) {
          {
            console.warn("[vuex] trying to add a new module '" + key + "' on hot reloading, manual reload is needed");
          }
          return;
        }
        update(path.concat(key), targetModule.getChild(key), newModule.modules[key]);
      }
    }
  }
  var functionAssert = {
    assert: function(value) {
      return typeof value === "function";
    },
    expected: "function"
  };
  var objectAssert = {
    assert: function(value) {
      return typeof value === "function" || typeof value === "object" && typeof value.handler === "function";
    },
    expected: 'function or object with "handler" function'
  };
  var assertTypes = {
    getters: functionAssert,
    mutations: functionAssert,
    actions: objectAssert
  };
  function assertRawModule(path, rawModule) {
    Object.keys(assertTypes).forEach(function(key) {
      if (!rawModule[key]) {
        return;
      }
      var assertOptions = assertTypes[key];
      forEachValue(rawModule[key], function(value, type) {
        assert(assertOptions.assert(value), makeAssertionMessage(path, key, type, value, assertOptions.expected));
      });
    });
  }
  function makeAssertionMessage(path, key, type, value, expected) {
    var buf = key + " should be " + expected + ' but "' + key + "." + type + '"';
    if (path.length > 0) {
      buf += ' in module "' + path.join(".") + '"';
    }
    buf += " is " + JSON.stringify(value) + ".";
    return buf;
  }
  function createStore(options) {
    return new Store(options);
  }
  var Store = function Store2(options) {
    var this$1$1 = this;
    if (options === void 0)
      options = {};
    {
      assert(typeof Promise !== "undefined", "vuex requires a Promise polyfill in this browser.");
      assert(this instanceof Store2, "store must be called with the new operator.");
    }
    var plugins = options.plugins;
    if (plugins === void 0)
      plugins = [];
    var strict = options.strict;
    if (strict === void 0)
      strict = false;
    var devtools = options.devtools;
    this._committing = false;
    this._actions = /* @__PURE__ */ Object.create(null);
    this._actionSubscribers = [];
    this._mutations = /* @__PURE__ */ Object.create(null);
    this._wrappedGetters = /* @__PURE__ */ Object.create(null);
    this._modules = new ModuleCollection(options);
    this._modulesNamespaceMap = /* @__PURE__ */ Object.create(null);
    this._subscribers = [];
    this._makeLocalGettersCache = /* @__PURE__ */ Object.create(null);
    this._devtools = devtools;
    var store2 = this;
    var ref = this;
    var dispatch = ref.dispatch;
    var commit = ref.commit;
    this.dispatch = function boundDispatch(type, payload) {
      return dispatch.call(store2, type, payload);
    };
    this.commit = function boundCommit(type, payload, options2) {
      return commit.call(store2, type, payload, options2);
    };
    this.strict = strict;
    var state = this._modules.root.state;
    installModule(this, state, [], this._modules.root);
    resetStoreState(this, state);
    plugins.forEach(function(plugin) {
      return plugin(this$1$1);
    });
  };
  var prototypeAccessors = { state: { configurable: true } };
  Store.prototype.install = function install(app, injectKey) {
    app.provide(injectKey || storeKey, this);
    app.config.globalProperties.$store = this;
    var useDevtools = this._devtools !== void 0 ? this._devtools : true;
    if (useDevtools) {
      addDevtools(app, this);
    }
  };
  prototypeAccessors.state.get = function() {
    return this._state.data;
  };
  prototypeAccessors.state.set = function(v) {
    {
      assert(false, "use store.replaceState() to explicit replace store state.");
    }
  };
  Store.prototype.commit = function commit(_type, _payload, _options) {
    var this$1$1 = this;
    var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;
    var mutation = { type, payload };
    var entry = this._mutations[type];
    if (!entry) {
      {
        console.error("[vuex] unknown mutation type: " + type);
      }
      return;
    }
    this._withCommit(function() {
      entry.forEach(function commitIterator(handler) {
        handler(payload);
      });
    });
    this._subscribers.slice().forEach(function(sub) {
      return sub(mutation, this$1$1.state);
    });
    if (options && options.silent) {
      console.warn("[vuex] mutation type: " + type + ". Silent option has been removed. Use the filter functionality in the vue-devtools");
    }
  };
  Store.prototype.dispatch = function dispatch(_type, _payload) {
    var this$1$1 = this;
    var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;
    var action = { type, payload };
    var entry = this._actions[type];
    if (!entry) {
      {
        console.error("[vuex] unknown action type: " + type);
      }
      return;
    }
    try {
      this._actionSubscribers.slice().filter(function(sub) {
        return sub.before;
      }).forEach(function(sub) {
        return sub.before(action, this$1$1.state);
      });
    } catch (e2) {
      {
        console.warn("[vuex] error in before action subscribers: ");
        console.error(e2);
      }
    }
    var result = entry.length > 1 ? Promise.all(entry.map(function(handler) {
      return handler(payload);
    })) : entry[0](payload);
    return new Promise(function(resolve, reject) {
      result.then(function(res2) {
        try {
          this$1$1._actionSubscribers.filter(function(sub) {
            return sub.after;
          }).forEach(function(sub) {
            return sub.after(action, this$1$1.state);
          });
        } catch (e2) {
          {
            console.warn("[vuex] error in after action subscribers: ");
            console.error(e2);
          }
        }
        resolve(res2);
      }, function(error) {
        try {
          this$1$1._actionSubscribers.filter(function(sub) {
            return sub.error;
          }).forEach(function(sub) {
            return sub.error(action, this$1$1.state, error);
          });
        } catch (e2) {
          {
            console.warn("[vuex] error in error action subscribers: ");
            console.error(e2);
          }
        }
        reject(error);
      });
    });
  };
  Store.prototype.subscribe = function subscribe(fn, options) {
    return genericSubscribe(fn, this._subscribers, options);
  };
  Store.prototype.subscribeAction = function subscribeAction(fn, options) {
    var subs = typeof fn === "function" ? { before: fn } : fn;
    return genericSubscribe(subs, this._actionSubscribers, options);
  };
  Store.prototype.watch = function watch$1(getter, cb, options) {
    var this$1$1 = this;
    {
      assert(typeof getter === "function", "store.watch only accepts a function.");
    }
    return vue.watch(function() {
      return getter(this$1$1.state, this$1$1.getters);
    }, cb, Object.assign({}, options));
  };
  Store.prototype.replaceState = function replaceState(state) {
    var this$1$1 = this;
    this._withCommit(function() {
      this$1$1._state.data = state;
    });
  };
  Store.prototype.registerModule = function registerModule(path, rawModule, options) {
    if (options === void 0)
      options = {};
    if (typeof path === "string") {
      path = [path];
    }
    {
      assert(Array.isArray(path), "module path must be a string or an Array.");
      assert(path.length > 0, "cannot register the root module by using registerModule.");
    }
    this._modules.register(path, rawModule);
    installModule(this, this.state, path, this._modules.get(path), options.preserveState);
    resetStoreState(this, this.state);
  };
  Store.prototype.unregisterModule = function unregisterModule(path) {
    var this$1$1 = this;
    if (typeof path === "string") {
      path = [path];
    }
    {
      assert(Array.isArray(path), "module path must be a string or an Array.");
    }
    this._modules.unregister(path);
    this._withCommit(function() {
      var parentState = getNestedState(this$1$1.state, path.slice(0, -1));
      delete parentState[path[path.length - 1]];
    });
    resetStore(this);
  };
  Store.prototype.hasModule = function hasModule(path) {
    if (typeof path === "string") {
      path = [path];
    }
    {
      assert(Array.isArray(path), "module path must be a string or an Array.");
    }
    return this._modules.isRegistered(path);
  };
  Store.prototype.hotUpdate = function hotUpdate(newOptions) {
    this._modules.update(newOptions);
    resetStore(this, true);
  };
  Store.prototype._withCommit = function _withCommit(fn) {
    var committing = this._committing;
    this._committing = true;
    fn();
    this._committing = committing;
  };
  Object.defineProperties(Store.prototype, prototypeAccessors);
  const tokenKey = "TOKEN";
  const tokenKeyIM = "TOKENIM";
  function getToken() {
    return uni.getStorageSync(tokenKey);
  }
  function setToken(token2) {
    return uni.setStorageSync(tokenKey, token2);
  }
  function removeToken() {
    return uni.removeStorageSync(tokenKey);
  }
  function getIMToken() {
    return uni.getStorageSync(tokenKeyIM);
  }
  function setIMToken(token2) {
    return uni.setStorageSync(tokenKeyIM, token2);
  }
  function showLoading(title) {
    uni.showLoading({
      title: title || "\u52A0\u8F7D\u4E2D..."
    });
  }
  function hideLoading() {
    uni.hideLoading();
  }
  function showToast(title) {
    uni.showToast({
      title,
      icon: "none",
      duration: 2e3
    });
  }
  const request = (url, method, data = {}, contentType = "application/json") => {
    formatAppLog("log", "at utils/request.js:32", "url===", url);
    formatAppLog("log", "at utils/request.js:33", '{"BASE_URL":"https://mancao.social/prod"}.BASE_URL=', { "BASE_URL": "https://mancao.social/prod" }.BASE_URL);
    formatAppLog("log", "at utils/request.js:34", "contentType===", contentType);
    return new Promise((resolve, reject) => {
      showLoading();
      uni.request({
        url: { "BASE_URL": "https://mancao.social/prod" }.BASE_URL + url,
        method,
        data,
        header: {
          "Content-Type": contentType,
          "token": getToken()
        },
        success: (res2) => {
          resolve(res2);
        },
        fail: (err) => {
          showToast("\u7F51\u7EDC\u8BF7\u6C42\u5931\u8D25");
          reject(err);
        },
        complete: () => {
          hideLoading();
        }
      });
    });
  };
  const imLogin = (params) => {
    return request(`/communications/imLogin`, "POST", params);
  };
  const imRegister = (params) => {
    return request(`/communications/imRegister`, "POST", params);
  };
  var icons = {
    "id": "2852637",
    "name": "uniui\u56FE\u6807\u5E93",
    "font_family": "uniicons",
    "css_prefix_text": "uniui-",
    "description": "",
    "glyphs": [
      {
        "icon_id": "25027049",
        "name": "yanse",
        "font_class": "color",
        "unicode": "e6cf",
        "unicode_decimal": 59087
      },
      {
        "icon_id": "25027048",
        "name": "wallet",
        "font_class": "wallet",
        "unicode": "e6b1",
        "unicode_decimal": 59057
      },
      {
        "icon_id": "25015720",
        "name": "settings-filled",
        "font_class": "settings-filled",
        "unicode": "e6ce",
        "unicode_decimal": 59086
      },
      {
        "icon_id": "25015434",
        "name": "shimingrenzheng-filled",
        "font_class": "auth-filled",
        "unicode": "e6cc",
        "unicode_decimal": 59084
      },
      {
        "icon_id": "24934246",
        "name": "shop-filled",
        "font_class": "shop-filled",
        "unicode": "e6cd",
        "unicode_decimal": 59085
      },
      {
        "icon_id": "24934159",
        "name": "staff-filled-01",
        "font_class": "staff-filled",
        "unicode": "e6cb",
        "unicode_decimal": 59083
      },
      {
        "icon_id": "24932461",
        "name": "VIP-filled",
        "font_class": "vip-filled",
        "unicode": "e6c6",
        "unicode_decimal": 59078
      },
      {
        "icon_id": "24932462",
        "name": "plus_circle_fill",
        "font_class": "plus-filled",
        "unicode": "e6c7",
        "unicode_decimal": 59079
      },
      {
        "icon_id": "24932463",
        "name": "folder_add-filled",
        "font_class": "folder-add-filled",
        "unicode": "e6c8",
        "unicode_decimal": 59080
      },
      {
        "icon_id": "24932464",
        "name": "yanse-filled",
        "font_class": "color-filled",
        "unicode": "e6c9",
        "unicode_decimal": 59081
      },
      {
        "icon_id": "24932465",
        "name": "tune-filled",
        "font_class": "tune-filled",
        "unicode": "e6ca",
        "unicode_decimal": 59082
      },
      {
        "icon_id": "24932455",
        "name": "a-rilidaka-filled",
        "font_class": "calendar-filled",
        "unicode": "e6c0",
        "unicode_decimal": 59072
      },
      {
        "icon_id": "24932456",
        "name": "notification-filled",
        "font_class": "notification-filled",
        "unicode": "e6c1",
        "unicode_decimal": 59073
      },
      {
        "icon_id": "24932457",
        "name": "wallet-filled",
        "font_class": "wallet-filled",
        "unicode": "e6c2",
        "unicode_decimal": 59074
      },
      {
        "icon_id": "24932458",
        "name": "paihangbang-filled",
        "font_class": "medal-filled",
        "unicode": "e6c3",
        "unicode_decimal": 59075
      },
      {
        "icon_id": "24932459",
        "name": "gift-filled",
        "font_class": "gift-filled",
        "unicode": "e6c4",
        "unicode_decimal": 59076
      },
      {
        "icon_id": "24932460",
        "name": "fire-filled",
        "font_class": "fire-filled",
        "unicode": "e6c5",
        "unicode_decimal": 59077
      },
      {
        "icon_id": "24928001",
        "name": "refreshempty",
        "font_class": "refreshempty",
        "unicode": "e6bf",
        "unicode_decimal": 59071
      },
      {
        "icon_id": "24926853",
        "name": "location-ellipse",
        "font_class": "location-filled",
        "unicode": "e6af",
        "unicode_decimal": 59055
      },
      {
        "icon_id": "24926735",
        "name": "person-filled",
        "font_class": "person-filled",
        "unicode": "e69d",
        "unicode_decimal": 59037
      },
      {
        "icon_id": "24926703",
        "name": "personadd-filled",
        "font_class": "personadd-filled",
        "unicode": "e698",
        "unicode_decimal": 59032
      },
      {
        "icon_id": "24923351",
        "name": "back",
        "font_class": "back",
        "unicode": "e6b9",
        "unicode_decimal": 59065
      },
      {
        "icon_id": "24923352",
        "name": "forward",
        "font_class": "forward",
        "unicode": "e6ba",
        "unicode_decimal": 59066
      },
      {
        "icon_id": "24923353",
        "name": "arrowthinright",
        "font_class": "arrow-right",
        "unicode": "e6bb",
        "unicode_decimal": 59067
      },
      {
        "icon_id": "24923353",
        "name": "arrowthinright",
        "font_class": "arrowthinright",
        "unicode": "e6bb",
        "unicode_decimal": 59067
      },
      {
        "icon_id": "24923354",
        "name": "arrowthinleft",
        "font_class": "arrow-left",
        "unicode": "e6bc",
        "unicode_decimal": 59068
      },
      {
        "icon_id": "24923354",
        "name": "arrowthinleft",
        "font_class": "arrowthinleft",
        "unicode": "e6bc",
        "unicode_decimal": 59068
      },
      {
        "icon_id": "24923355",
        "name": "arrowthinup",
        "font_class": "arrow-up",
        "unicode": "e6bd",
        "unicode_decimal": 59069
      },
      {
        "icon_id": "24923355",
        "name": "arrowthinup",
        "font_class": "arrowthinup",
        "unicode": "e6bd",
        "unicode_decimal": 59069
      },
      {
        "icon_id": "24923356",
        "name": "arrowthindown",
        "font_class": "arrow-down",
        "unicode": "e6be",
        "unicode_decimal": 59070
      },
      {
        "icon_id": "24923356",
        "name": "arrowthindown",
        "font_class": "arrowthindown",
        "unicode": "e6be",
        "unicode_decimal": 59070
      },
      {
        "icon_id": "24923349",
        "name": "arrowdown",
        "font_class": "bottom",
        "unicode": "e6b8",
        "unicode_decimal": 59064
      },
      {
        "icon_id": "24923349",
        "name": "arrowdown",
        "font_class": "arrowdown",
        "unicode": "e6b8",
        "unicode_decimal": 59064
      },
      {
        "icon_id": "24923346",
        "name": "arrowright",
        "font_class": "right",
        "unicode": "e6b5",
        "unicode_decimal": 59061
      },
      {
        "icon_id": "24923346",
        "name": "arrowright",
        "font_class": "arrowright",
        "unicode": "e6b5",
        "unicode_decimal": 59061
      },
      {
        "icon_id": "24923347",
        "name": "arrowup",
        "font_class": "top",
        "unicode": "e6b6",
        "unicode_decimal": 59062
      },
      {
        "icon_id": "24923347",
        "name": "arrowup",
        "font_class": "arrowup",
        "unicode": "e6b6",
        "unicode_decimal": 59062
      },
      {
        "icon_id": "24923348",
        "name": "arrowleft",
        "font_class": "left",
        "unicode": "e6b7",
        "unicode_decimal": 59063
      },
      {
        "icon_id": "24923348",
        "name": "arrowleft",
        "font_class": "arrowleft",
        "unicode": "e6b7",
        "unicode_decimal": 59063
      },
      {
        "icon_id": "24923334",
        "name": "eye",
        "font_class": "eye",
        "unicode": "e651",
        "unicode_decimal": 58961
      },
      {
        "icon_id": "24923335",
        "name": "eye-filled",
        "font_class": "eye-filled",
        "unicode": "e66a",
        "unicode_decimal": 58986
      },
      {
        "icon_id": "24923336",
        "name": "eye-slash",
        "font_class": "eye-slash",
        "unicode": "e6b3",
        "unicode_decimal": 59059
      },
      {
        "icon_id": "24923337",
        "name": "eye-slash-filled",
        "font_class": "eye-slash-filled",
        "unicode": "e6b4",
        "unicode_decimal": 59060
      },
      {
        "icon_id": "24923305",
        "name": "info-filled",
        "font_class": "info-filled",
        "unicode": "e649",
        "unicode_decimal": 58953
      },
      {
        "icon_id": "24923299",
        "name": "reload-01",
        "font_class": "reload",
        "unicode": "e6b2",
        "unicode_decimal": 59058
      },
      {
        "icon_id": "24923195",
        "name": "mic_slash_fill",
        "font_class": "micoff-filled",
        "unicode": "e6b0",
        "unicode_decimal": 59056
      },
      {
        "icon_id": "24923165",
        "name": "map-pin-ellipse",
        "font_class": "map-pin-ellipse",
        "unicode": "e6ac",
        "unicode_decimal": 59052
      },
      {
        "icon_id": "24923166",
        "name": "map-pin",
        "font_class": "map-pin",
        "unicode": "e6ad",
        "unicode_decimal": 59053
      },
      {
        "icon_id": "24923167",
        "name": "location",
        "font_class": "location",
        "unicode": "e6ae",
        "unicode_decimal": 59054
      },
      {
        "icon_id": "24923064",
        "name": "starhalf",
        "font_class": "starhalf",
        "unicode": "e683",
        "unicode_decimal": 59011
      },
      {
        "icon_id": "24923065",
        "name": "star",
        "font_class": "star",
        "unicode": "e688",
        "unicode_decimal": 59016
      },
      {
        "icon_id": "24923066",
        "name": "star-filled",
        "font_class": "star-filled",
        "unicode": "e68f",
        "unicode_decimal": 59023
      },
      {
        "icon_id": "24899646",
        "name": "a-rilidaka",
        "font_class": "calendar",
        "unicode": "e6a0",
        "unicode_decimal": 59040
      },
      {
        "icon_id": "24899647",
        "name": "fire",
        "font_class": "fire",
        "unicode": "e6a1",
        "unicode_decimal": 59041
      },
      {
        "icon_id": "24899648",
        "name": "paihangbang",
        "font_class": "medal",
        "unicode": "e6a2",
        "unicode_decimal": 59042
      },
      {
        "icon_id": "24899649",
        "name": "font",
        "font_class": "font",
        "unicode": "e6a3",
        "unicode_decimal": 59043
      },
      {
        "icon_id": "24899650",
        "name": "gift",
        "font_class": "gift",
        "unicode": "e6a4",
        "unicode_decimal": 59044
      },
      {
        "icon_id": "24899651",
        "name": "link",
        "font_class": "link",
        "unicode": "e6a5",
        "unicode_decimal": 59045
      },
      {
        "icon_id": "24899652",
        "name": "notification",
        "font_class": "notification",
        "unicode": "e6a6",
        "unicode_decimal": 59046
      },
      {
        "icon_id": "24899653",
        "name": "staff",
        "font_class": "staff",
        "unicode": "e6a7",
        "unicode_decimal": 59047
      },
      {
        "icon_id": "24899654",
        "name": "VIP",
        "font_class": "vip",
        "unicode": "e6a8",
        "unicode_decimal": 59048
      },
      {
        "icon_id": "24899655",
        "name": "folder_add",
        "font_class": "folder-add",
        "unicode": "e6a9",
        "unicode_decimal": 59049
      },
      {
        "icon_id": "24899656",
        "name": "tune",
        "font_class": "tune",
        "unicode": "e6aa",
        "unicode_decimal": 59050
      },
      {
        "icon_id": "24899657",
        "name": "shimingrenzheng",
        "font_class": "auth",
        "unicode": "e6ab",
        "unicode_decimal": 59051
      },
      {
        "icon_id": "24899565",
        "name": "person",
        "font_class": "person",
        "unicode": "e699",
        "unicode_decimal": 59033
      },
      {
        "icon_id": "24899566",
        "name": "email-filled",
        "font_class": "email-filled",
        "unicode": "e69a",
        "unicode_decimal": 59034
      },
      {
        "icon_id": "24899567",
        "name": "phone-filled",
        "font_class": "phone-filled",
        "unicode": "e69b",
        "unicode_decimal": 59035
      },
      {
        "icon_id": "24899568",
        "name": "phone",
        "font_class": "phone",
        "unicode": "e69c",
        "unicode_decimal": 59036
      },
      {
        "icon_id": "24899570",
        "name": "email",
        "font_class": "email",
        "unicode": "e69e",
        "unicode_decimal": 59038
      },
      {
        "icon_id": "24899571",
        "name": "personadd",
        "font_class": "personadd",
        "unicode": "e69f",
        "unicode_decimal": 59039
      },
      {
        "icon_id": "24899558",
        "name": "chatboxes-filled",
        "font_class": "chatboxes-filled",
        "unicode": "e692",
        "unicode_decimal": 59026
      },
      {
        "icon_id": "24899559",
        "name": "contact",
        "font_class": "contact",
        "unicode": "e693",
        "unicode_decimal": 59027
      },
      {
        "icon_id": "24899560",
        "name": "chatbubble-filled",
        "font_class": "chatbubble-filled",
        "unicode": "e694",
        "unicode_decimal": 59028
      },
      {
        "icon_id": "24899561",
        "name": "contact-filled",
        "font_class": "contact-filled",
        "unicode": "e695",
        "unicode_decimal": 59029
      },
      {
        "icon_id": "24899562",
        "name": "chatboxes",
        "font_class": "chatboxes",
        "unicode": "e696",
        "unicode_decimal": 59030
      },
      {
        "icon_id": "24899563",
        "name": "chatbubble",
        "font_class": "chatbubble",
        "unicode": "e697",
        "unicode_decimal": 59031
      },
      {
        "icon_id": "24881290",
        "name": "upload-filled",
        "font_class": "upload-filled",
        "unicode": "e68e",
        "unicode_decimal": 59022
      },
      {
        "icon_id": "24881292",
        "name": "upload",
        "font_class": "upload",
        "unicode": "e690",
        "unicode_decimal": 59024
      },
      {
        "icon_id": "24881293",
        "name": "weixin",
        "font_class": "weixin",
        "unicode": "e691",
        "unicode_decimal": 59025
      },
      {
        "icon_id": "24881274",
        "name": "compose",
        "font_class": "compose",
        "unicode": "e67f",
        "unicode_decimal": 59007
      },
      {
        "icon_id": "24881275",
        "name": "qq",
        "font_class": "qq",
        "unicode": "e680",
        "unicode_decimal": 59008
      },
      {
        "icon_id": "24881276",
        "name": "download-filled",
        "font_class": "download-filled",
        "unicode": "e681",
        "unicode_decimal": 59009
      },
      {
        "icon_id": "24881277",
        "name": "pengyouquan",
        "font_class": "pyq",
        "unicode": "e682",
        "unicode_decimal": 59010
      },
      {
        "icon_id": "24881279",
        "name": "sound",
        "font_class": "sound",
        "unicode": "e684",
        "unicode_decimal": 59012
      },
      {
        "icon_id": "24881280",
        "name": "trash-filled",
        "font_class": "trash-filled",
        "unicode": "e685",
        "unicode_decimal": 59013
      },
      {
        "icon_id": "24881281",
        "name": "sound-filled",
        "font_class": "sound-filled",
        "unicode": "e686",
        "unicode_decimal": 59014
      },
      {
        "icon_id": "24881282",
        "name": "trash",
        "font_class": "trash",
        "unicode": "e687",
        "unicode_decimal": 59015
      },
      {
        "icon_id": "24881284",
        "name": "videocam-filled",
        "font_class": "videocam-filled",
        "unicode": "e689",
        "unicode_decimal": 59017
      },
      {
        "icon_id": "24881285",
        "name": "spinner-cycle",
        "font_class": "spinner-cycle",
        "unicode": "e68a",
        "unicode_decimal": 59018
      },
      {
        "icon_id": "24881286",
        "name": "weibo",
        "font_class": "weibo",
        "unicode": "e68b",
        "unicode_decimal": 59019
      },
      {
        "icon_id": "24881288",
        "name": "videocam",
        "font_class": "videocam",
        "unicode": "e68c",
        "unicode_decimal": 59020
      },
      {
        "icon_id": "24881289",
        "name": "download",
        "font_class": "download",
        "unicode": "e68d",
        "unicode_decimal": 59021
      },
      {
        "icon_id": "24879601",
        "name": "help",
        "font_class": "help",
        "unicode": "e679",
        "unicode_decimal": 59001
      },
      {
        "icon_id": "24879602",
        "name": "navigate-filled",
        "font_class": "navigate-filled",
        "unicode": "e67a",
        "unicode_decimal": 59002
      },
      {
        "icon_id": "24879603",
        "name": "plusempty",
        "font_class": "plusempty",
        "unicode": "e67b",
        "unicode_decimal": 59003
      },
      {
        "icon_id": "24879604",
        "name": "smallcircle",
        "font_class": "smallcircle",
        "unicode": "e67c",
        "unicode_decimal": 59004
      },
      {
        "icon_id": "24879605",
        "name": "minus-filled",
        "font_class": "minus-filled",
        "unicode": "e67d",
        "unicode_decimal": 59005
      },
      {
        "icon_id": "24879606",
        "name": "micoff",
        "font_class": "micoff",
        "unicode": "e67e",
        "unicode_decimal": 59006
      },
      {
        "icon_id": "24879588",
        "name": "closeempty",
        "font_class": "closeempty",
        "unicode": "e66c",
        "unicode_decimal": 58988
      },
      {
        "icon_id": "24879589",
        "name": "clear",
        "font_class": "clear",
        "unicode": "e66d",
        "unicode_decimal": 58989
      },
      {
        "icon_id": "24879590",
        "name": "navigate",
        "font_class": "navigate",
        "unicode": "e66e",
        "unicode_decimal": 58990
      },
      {
        "icon_id": "24879591",
        "name": "minus",
        "font_class": "minus",
        "unicode": "e66f",
        "unicode_decimal": 58991
      },
      {
        "icon_id": "24879592",
        "name": "image",
        "font_class": "image",
        "unicode": "e670",
        "unicode_decimal": 58992
      },
      {
        "icon_id": "24879593",
        "name": "mic",
        "font_class": "mic",
        "unicode": "e671",
        "unicode_decimal": 58993
      },
      {
        "icon_id": "24879594",
        "name": "paperplane",
        "font_class": "paperplane",
        "unicode": "e672",
        "unicode_decimal": 58994
      },
      {
        "icon_id": "24879595",
        "name": "close",
        "font_class": "close",
        "unicode": "e673",
        "unicode_decimal": 58995
      },
      {
        "icon_id": "24879596",
        "name": "help-filled",
        "font_class": "help-filled",
        "unicode": "e674",
        "unicode_decimal": 58996
      },
      {
        "icon_id": "24879597",
        "name": "plus-filled",
        "font_class": "paperplane-filled",
        "unicode": "e675",
        "unicode_decimal": 58997
      },
      {
        "icon_id": "24879598",
        "name": "plus",
        "font_class": "plus",
        "unicode": "e676",
        "unicode_decimal": 58998
      },
      {
        "icon_id": "24879599",
        "name": "mic-filled",
        "font_class": "mic-filled",
        "unicode": "e677",
        "unicode_decimal": 58999
      },
      {
        "icon_id": "24879600",
        "name": "image-filled",
        "font_class": "image-filled",
        "unicode": "e678",
        "unicode_decimal": 59e3
      },
      {
        "icon_id": "24855900",
        "name": "locked-filled",
        "font_class": "locked-filled",
        "unicode": "e668",
        "unicode_decimal": 58984
      },
      {
        "icon_id": "24855901",
        "name": "info",
        "font_class": "info",
        "unicode": "e669",
        "unicode_decimal": 58985
      },
      {
        "icon_id": "24855903",
        "name": "locked",
        "font_class": "locked",
        "unicode": "e66b",
        "unicode_decimal": 58987
      },
      {
        "icon_id": "24855884",
        "name": "camera-filled",
        "font_class": "camera-filled",
        "unicode": "e658",
        "unicode_decimal": 58968
      },
      {
        "icon_id": "24855885",
        "name": "chat-filled",
        "font_class": "chat-filled",
        "unicode": "e659",
        "unicode_decimal": 58969
      },
      {
        "icon_id": "24855886",
        "name": "camera",
        "font_class": "camera",
        "unicode": "e65a",
        "unicode_decimal": 58970
      },
      {
        "icon_id": "24855887",
        "name": "circle",
        "font_class": "circle",
        "unicode": "e65b",
        "unicode_decimal": 58971
      },
      {
        "icon_id": "24855888",
        "name": "checkmarkempty",
        "font_class": "checkmarkempty",
        "unicode": "e65c",
        "unicode_decimal": 58972
      },
      {
        "icon_id": "24855889",
        "name": "chat",
        "font_class": "chat",
        "unicode": "e65d",
        "unicode_decimal": 58973
      },
      {
        "icon_id": "24855890",
        "name": "circle-filled",
        "font_class": "circle-filled",
        "unicode": "e65e",
        "unicode_decimal": 58974
      },
      {
        "icon_id": "24855891",
        "name": "flag",
        "font_class": "flag",
        "unicode": "e65f",
        "unicode_decimal": 58975
      },
      {
        "icon_id": "24855892",
        "name": "flag-filled",
        "font_class": "flag-filled",
        "unicode": "e660",
        "unicode_decimal": 58976
      },
      {
        "icon_id": "24855893",
        "name": "gear-filled",
        "font_class": "gear-filled",
        "unicode": "e661",
        "unicode_decimal": 58977
      },
      {
        "icon_id": "24855894",
        "name": "home",
        "font_class": "home",
        "unicode": "e662",
        "unicode_decimal": 58978
      },
      {
        "icon_id": "24855895",
        "name": "home-filled",
        "font_class": "home-filled",
        "unicode": "e663",
        "unicode_decimal": 58979
      },
      {
        "icon_id": "24855896",
        "name": "gear",
        "font_class": "gear",
        "unicode": "e664",
        "unicode_decimal": 58980
      },
      {
        "icon_id": "24855897",
        "name": "smallcircle-filled",
        "font_class": "smallcircle-filled",
        "unicode": "e665",
        "unicode_decimal": 58981
      },
      {
        "icon_id": "24855898",
        "name": "map-filled",
        "font_class": "map-filled",
        "unicode": "e666",
        "unicode_decimal": 58982
      },
      {
        "icon_id": "24855899",
        "name": "map",
        "font_class": "map",
        "unicode": "e667",
        "unicode_decimal": 58983
      },
      {
        "icon_id": "24855825",
        "name": "refresh-filled",
        "font_class": "refresh-filled",
        "unicode": "e656",
        "unicode_decimal": 58966
      },
      {
        "icon_id": "24855826",
        "name": "refresh",
        "font_class": "refresh",
        "unicode": "e657",
        "unicode_decimal": 58967
      },
      {
        "icon_id": "24855808",
        "name": "cloud-upload",
        "font_class": "cloud-upload",
        "unicode": "e645",
        "unicode_decimal": 58949
      },
      {
        "icon_id": "24855809",
        "name": "cloud-download-filled",
        "font_class": "cloud-download-filled",
        "unicode": "e646",
        "unicode_decimal": 58950
      },
      {
        "icon_id": "24855810",
        "name": "cloud-download",
        "font_class": "cloud-download",
        "unicode": "e647",
        "unicode_decimal": 58951
      },
      {
        "icon_id": "24855811",
        "name": "cloud-upload-filled",
        "font_class": "cloud-upload-filled",
        "unicode": "e648",
        "unicode_decimal": 58952
      },
      {
        "icon_id": "24855813",
        "name": "redo",
        "font_class": "redo",
        "unicode": "e64a",
        "unicode_decimal": 58954
      },
      {
        "icon_id": "24855814",
        "name": "images-filled",
        "font_class": "images-filled",
        "unicode": "e64b",
        "unicode_decimal": 58955
      },
      {
        "icon_id": "24855815",
        "name": "undo-filled",
        "font_class": "undo-filled",
        "unicode": "e64c",
        "unicode_decimal": 58956
      },
      {
        "icon_id": "24855816",
        "name": "more",
        "font_class": "more",
        "unicode": "e64d",
        "unicode_decimal": 58957
      },
      {
        "icon_id": "24855817",
        "name": "more-filled",
        "font_class": "more-filled",
        "unicode": "e64e",
        "unicode_decimal": 58958
      },
      {
        "icon_id": "24855818",
        "name": "undo",
        "font_class": "undo",
        "unicode": "e64f",
        "unicode_decimal": 58959
      },
      {
        "icon_id": "24855819",
        "name": "images",
        "font_class": "images",
        "unicode": "e650",
        "unicode_decimal": 58960
      },
      {
        "icon_id": "24855821",
        "name": "paperclip",
        "font_class": "paperclip",
        "unicode": "e652",
        "unicode_decimal": 58962
      },
      {
        "icon_id": "24855822",
        "name": "settings",
        "font_class": "settings",
        "unicode": "e653",
        "unicode_decimal": 58963
      },
      {
        "icon_id": "24855823",
        "name": "search",
        "font_class": "search",
        "unicode": "e654",
        "unicode_decimal": 58964
      },
      {
        "icon_id": "24855824",
        "name": "redo-filled",
        "font_class": "redo-filled",
        "unicode": "e655",
        "unicode_decimal": 58965
      },
      {
        "icon_id": "24841702",
        "name": "list",
        "font_class": "list",
        "unicode": "e644",
        "unicode_decimal": 58948
      },
      {
        "icon_id": "24841489",
        "name": "mail-open-filled",
        "font_class": "mail-open-filled",
        "unicode": "e63a",
        "unicode_decimal": 58938
      },
      {
        "icon_id": "24841491",
        "name": "hand-thumbsdown-filled",
        "font_class": "hand-down-filled",
        "unicode": "e63c",
        "unicode_decimal": 58940
      },
      {
        "icon_id": "24841492",
        "name": "hand-thumbsdown",
        "font_class": "hand-down",
        "unicode": "e63d",
        "unicode_decimal": 58941
      },
      {
        "icon_id": "24841493",
        "name": "hand-thumbsup-filled",
        "font_class": "hand-up-filled",
        "unicode": "e63e",
        "unicode_decimal": 58942
      },
      {
        "icon_id": "24841494",
        "name": "hand-thumbsup",
        "font_class": "hand-up",
        "unicode": "e63f",
        "unicode_decimal": 58943
      },
      {
        "icon_id": "24841496",
        "name": "heart-filled",
        "font_class": "heart-filled",
        "unicode": "e641",
        "unicode_decimal": 58945
      },
      {
        "icon_id": "24841498",
        "name": "mail-open",
        "font_class": "mail-open",
        "unicode": "e643",
        "unicode_decimal": 58947
      },
      {
        "icon_id": "24841488",
        "name": "heart",
        "font_class": "heart",
        "unicode": "e639",
        "unicode_decimal": 58937
      },
      {
        "icon_id": "24839963",
        "name": "loop",
        "font_class": "loop",
        "unicode": "e633",
        "unicode_decimal": 58931
      },
      {
        "icon_id": "24839866",
        "name": "pulldown",
        "font_class": "pulldown",
        "unicode": "e632",
        "unicode_decimal": 58930
      },
      {
        "icon_id": "24813798",
        "name": "scan",
        "font_class": "scan",
        "unicode": "e62a",
        "unicode_decimal": 58922
      },
      {
        "icon_id": "24813786",
        "name": "bars",
        "font_class": "bars",
        "unicode": "e627",
        "unicode_decimal": 58919
      },
      {
        "icon_id": "24813788",
        "name": "cart-filled",
        "font_class": "cart-filled",
        "unicode": "e629",
        "unicode_decimal": 58921
      },
      {
        "icon_id": "24813790",
        "name": "checkbox",
        "font_class": "checkbox",
        "unicode": "e62b",
        "unicode_decimal": 58923
      },
      {
        "icon_id": "24813791",
        "name": "checkbox-filled",
        "font_class": "checkbox-filled",
        "unicode": "e62c",
        "unicode_decimal": 58924
      },
      {
        "icon_id": "24813794",
        "name": "shop",
        "font_class": "shop",
        "unicode": "e62f",
        "unicode_decimal": 58927
      },
      {
        "icon_id": "24813795",
        "name": "headphones",
        "font_class": "headphones",
        "unicode": "e630",
        "unicode_decimal": 58928
      },
      {
        "icon_id": "24813796",
        "name": "cart",
        "font_class": "cart",
        "unicode": "e631",
        "unicode_decimal": 58929
      }
    ]
  };
  var _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
      target[key] = val;
    }
    return target;
  };
  const getVal = (val) => {
    const reg = /^[0-9]*$/g;
    return typeof val === "number" || reg.test(val) ? val + "px" : val;
  };
  const _sfc_main$z = {
    name: "UniIcons",
    emits: ["click"],
    props: {
      type: {
        type: String,
        default: ""
      },
      color: {
        type: String,
        default: "#333333"
      },
      size: {
        type: [Number, String],
        default: 16
      },
      customPrefix: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        icons: icons.glyphs
      };
    },
    computed: {
      unicode() {
        let code = this.icons.find((v) => v.font_class === this.type);
        if (code) {
          return unescape(`%u${code.unicode}`);
        }
        return "";
      },
      iconSize() {
        return getVal(this.size);
      }
    },
    methods: {
      _onClick() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("text", {
      style: vue.normalizeStyle({ color: $props.color, "font-size": $options.iconSize }),
      class: vue.normalizeClass(["uni-icons", ["uniui-" + $props.type, $props.customPrefix, $props.customPrefix ? $props.type : ""]]),
      onClick: _cache[0] || (_cache[0] = (...args) => $options._onClick && $options._onClick(...args))
    }, null, 6);
  }
  var __easycom_0$4 = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$k], ["__scopeId", "data-v-f7c5b1d8"], ["__file", "C:/myself/social/social/src/uni_modules/uni-icons/components/uni-icons/uni-icons.vue"]]);
  function resolveEasycom(component, easycom) {
    return shared.isString(component) ? easycom : component;
  }
  const _sfc_main$y = {
    name: "UniBadge",
    emits: ["click"],
    props: {
      type: {
        type: String,
        default: "error"
      },
      inverted: {
        type: Boolean,
        default: false
      },
      isDot: {
        type: Boolean,
        default: false
      },
      maxNum: {
        type: Number,
        default: 99
      },
      absolute: {
        type: String,
        default: ""
      },
      offset: {
        type: Array,
        default() {
          return [0, 0];
        }
      },
      text: {
        type: [String, Number],
        default: ""
      },
      size: {
        type: String,
        default: "small"
      },
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      }
    },
    data() {
      return {};
    },
    computed: {
      width() {
        return String(this.text).length * 8 + 12;
      },
      classNames() {
        const {
          inverted,
          type,
          size,
          absolute
        } = this;
        return [
          inverted ? "uni-badge--" + type + "-inverted" : "",
          "uni-badge--" + type,
          "uni-badge--" + size,
          absolute ? "uni-badge--absolute" : ""
        ].join(" ");
      },
      positionStyle() {
        if (!this.absolute)
          return {};
        let w = this.width / 2, h = 10;
        if (this.isDot) {
          w = 5;
          h = 5;
        }
        const x = `${-w + this.offset[0]}px`;
        const y = `${-h + this.offset[1]}px`;
        const whiteList = {
          rightTop: {
            right: x,
            top: y
          },
          rightBottom: {
            right: x,
            bottom: y
          },
          leftBottom: {
            left: x,
            bottom: y
          },
          leftTop: {
            left: x,
            top: y
          }
        };
        const match = whiteList[this.absolute];
        return match ? match : whiteList["rightTop"];
      },
      badgeWidth() {
        return {
          width: `${this.width}px`
        };
      },
      dotStyle() {
        if (!this.isDot)
          return {};
        return {
          width: "10px",
          height: "10px",
          borderRadius: "10px"
        };
      },
      displayValue() {
        const {
          isDot,
          text,
          maxNum
        } = this;
        return isDot ? "" : Number(text) > maxNum ? `${maxNum}+` : text;
      }
    },
    methods: {
      onClick() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-badge--x" }, [
      vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
      $props.text ? (vue.openBlock(), vue.createElementBlock("text", {
        key: 0,
        class: vue.normalizeClass([$options.classNames, "uni-badge"]),
        style: vue.normalizeStyle([$options.badgeWidth, $options.positionStyle, $props.customStyle, $options.dotStyle]),
        onClick: _cache[0] || (_cache[0] = ($event) => $options.onClick())
      }, vue.toDisplayString($options.displayValue), 7)) : vue.createCommentVNode("v-if", true)
    ]);
  }
  var __easycom_1$2 = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$j], ["__scopeId", "data-v-d143ea86"], ["__file", "C:/myself/social/social/src/uni_modules/uni-badge/components/uni-badge/uni-badge.vue"]]);
  const _sfc_main$x = {
    name: "UniListItem",
    emits: ["click", "switchChange"],
    props: {
      direction: {
        type: String,
        default: "row"
      },
      title: {
        type: String,
        default: ""
      },
      note: {
        type: String,
        default: ""
      },
      ellipsis: {
        type: [Number, String],
        default: 0
      },
      disabled: {
        type: [Boolean, String],
        default: false
      },
      clickable: {
        type: Boolean,
        default: false
      },
      showArrow: {
        type: [Boolean, String],
        default: false
      },
      link: {
        type: [Boolean, String],
        default: false
      },
      to: {
        type: String,
        default: ""
      },
      showBadge: {
        type: [Boolean, String],
        default: false
      },
      showSwitch: {
        type: [Boolean, String],
        default: false
      },
      switchChecked: {
        type: [Boolean, String],
        default: false
      },
      badgeText: {
        type: String,
        default: ""
      },
      badgeType: {
        type: String,
        default: "success"
      },
      rightText: {
        type: String,
        default: ""
      },
      thumb: {
        type: String,
        default: ""
      },
      thumbSize: {
        type: String,
        default: "base"
      },
      showExtraIcon: {
        type: [Boolean, String],
        default: false
      },
      extraIcon: {
        type: Object,
        default() {
          return {
            type: "contact",
            color: "#000000",
            size: 20
          };
        }
      },
      border: {
        type: Boolean,
        default: true
      }
    },
    data() {
      return {
        isFirstChild: false
      };
    },
    mounted() {
      this.list = this.getForm();
      if (this.list) {
        if (!this.list.firstChildAppend) {
          this.list.firstChildAppend = true;
          this.isFirstChild = true;
        }
      }
    },
    methods: {
      getForm(name = "uniList") {
        let parent = this.$parent;
        let parentName = parent.$options.name;
        while (parentName !== name) {
          parent = parent.$parent;
          if (!parent)
            return false;
          parentName = parent.$options.name;
        }
        return parent;
      },
      onClick() {
        if (this.to !== "") {
          this.openPage();
          return;
        }
        if (this.clickable || this.link) {
          this.$emit("click", {
            data: {}
          });
        }
      },
      onSwitchChange(e2) {
        this.$emit("switchChange", e2.detail);
      },
      openPage() {
        if (["navigateTo", "redirectTo", "reLaunch", "switchTab"].indexOf(this.link) !== -1) {
          this.pageApi(this.link);
        } else {
          this.pageApi("navigateTo");
        }
      },
      pageApi(api) {
        let callback = {
          url: this.to,
          success: (res2) => {
            this.$emit("click", {
              data: res2
            });
          },
          fail: (err) => {
            this.$emit("click", {
              data: err
            });
          }
        };
        switch (api) {
          case "navigateTo":
            uni.navigateTo(callback);
            break;
          case "redirectTo":
            uni.redirectTo(callback);
            break;
          case "reLaunch":
            uni.reLaunch(callback);
            break;
          case "switchTab":
            uni.switchTab(callback);
            break;
          default:
            uni.navigateTo(callback);
        }
      }
    }
  };
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$4);
    const _component_uni_badge = resolveEasycom(vue.resolveDynamicComponent("uni-badge"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", {
      class: vue.normalizeClass([{ "uni-list-item--disabled": $props.disabled }, "uni-list-item"]),
      "hover-class": !$props.clickable && !$props.link || $props.disabled || $props.showSwitch ? "" : "uni-list-item--hover",
      onClick: _cache[1] || (_cache[1] = (...args) => $options.onClick && $options.onClick(...args))
    }, [
      !$data.isFirstChild ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: vue.normalizeClass(["border--left", { "uni-list--border": $props.border }])
      }, null, 2)) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode("view", {
        class: vue.normalizeClass(["uni-list-item__container", { "container--right": $props.showArrow || $props.link, "flex--direction": $props.direction === "column" }])
      }, [
        vue.renderSlot(_ctx.$slots, "header", {}, () => [
          vue.createElementVNode("view", { class: "uni-list-item__header" }, [
            $props.thumb ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "uni-list-item__icon"
            }, [
              vue.createElementVNode("image", {
                src: $props.thumb,
                class: vue.normalizeClass(["uni-list-item__icon-img", ["uni-list--" + $props.thumbSize]])
              }, null, 10, ["src"])
            ])) : $props.showExtraIcon ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 1,
              class: "uni-list-item__icon"
            }, [
              vue.createVNode(_component_uni_icons, {
                color: $props.extraIcon.color,
                size: $props.extraIcon.size,
                type: $props.extraIcon.type
              }, null, 8, ["color", "size", "type"])
            ])) : vue.createCommentVNode("v-if", true)
          ])
        ], true),
        vue.renderSlot(_ctx.$slots, "body", {}, () => [
          vue.createElementVNode("view", {
            class: vue.normalizeClass(["uni-list-item__content", { "uni-list-item__content--center": $props.thumb || $props.showExtraIcon || $props.showBadge || $props.showSwitch }])
          }, [
            $props.title ? (vue.openBlock(), vue.createElementBlock("text", {
              key: 0,
              class: vue.normalizeClass(["uni-list-item__content-title", [$props.ellipsis !== 0 && $props.ellipsis <= 2 ? "uni-ellipsis-" + $props.ellipsis : ""]])
            }, vue.toDisplayString($props.title), 3)) : vue.createCommentVNode("v-if", true),
            $props.note ? (vue.openBlock(), vue.createElementBlock("text", {
              key: 1,
              class: "uni-list-item__content-note"
            }, vue.toDisplayString($props.note), 1)) : vue.createCommentVNode("v-if", true)
          ], 2)
        ], true),
        vue.renderSlot(_ctx.$slots, "footer", {}, () => [
          $props.rightText || $props.showBadge || $props.showSwitch ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: vue.normalizeClass(["uni-list-item__extra", { "flex--justify": $props.direction === "column" }])
          }, [
            $props.rightText ? (vue.openBlock(), vue.createElementBlock("text", {
              key: 0,
              class: "uni-list-item__extra-text"
            }, vue.toDisplayString($props.rightText), 1)) : vue.createCommentVNode("v-if", true),
            $props.showBadge ? (vue.openBlock(), vue.createBlock(_component_uni_badge, {
              key: 1,
              type: $props.badgeType,
              text: $props.badgeText
            }, null, 8, ["type", "text"])) : vue.createCommentVNode("v-if", true),
            $props.showSwitch ? (vue.openBlock(), vue.createElementBlock("switch", {
              key: 2,
              disabled: $props.disabled,
              checked: $props.switchChecked,
              onChange: _cache[0] || (_cache[0] = (...args) => $options.onSwitchChange && $options.onSwitchChange(...args))
            }, null, 40, ["disabled", "checked"])) : vue.createCommentVNode("v-if", true)
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], true)
      ], 2),
      $props.showArrow || $props.link ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
        key: 1,
        size: 16,
        class: "uni-icon-wrapper",
        color: "#bbb",
        type: "arrowright"
      })) : vue.createCommentVNode("v-if", true)
    ], 10, ["hover-class"]);
  }
  var __easycom_1$1 = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$i], ["__scopeId", "data-v-80c0ffd4"], ["__file", "C:/myself/social/social/src/uni_modules/uni-list/components/uni-list-item/uni-list-item.vue"]]);
  const _sfc_main$w = {
    name: "uniList",
    "mp-weixin": {
      options: {
        multipleSlots: false
      }
    },
    props: {
      enableBackToTop: {
        type: [Boolean, String],
        default: false
      },
      scrollY: {
        type: [Boolean, String],
        default: false
      },
      border: {
        type: Boolean,
        default: true
      }
    },
    created() {
      this.firstChildAppend = false;
    },
    methods: {
      loadMore(e2) {
        this.$emit("scrolltolower");
      }
    }
  };
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-list uni-border-top-bottom" }, [
      $props.border ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "uni-list--border-top"
      })) : vue.createCommentVNode("v-if", true),
      vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
      $props.border ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "uni-list--border-bottom"
      })) : vue.createCommentVNode("v-if", true)
    ]);
  }
  var __easycom_2 = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$h], ["__scopeId", "data-v-089a096a"], ["__file", "C:/myself/social/social/src/uni_modules/uni-list/components/uni-list/uni-list.vue"]]);
  const getVideoList = (params) => {
    return request(`/users/getVideoList`, "GET", params);
  };
  const videoDetail = (params) => {
    return request(`/users/getVideoDetail`, "GET", params);
  };
  const getHobbyList = (params) => {
    formatAppLog("log", "at api/hobby.js:27", "params=", params);
    return request(`/files/getHobbyList`, "GET", params);
  };
  const getHobbyDetail = (params) => {
    return request(`/files/getHobbyDetail`, "GET", params);
  };
  const setFollow = (params) => {
    return request(`/communications/setFollow`, "POST", params);
  };
  const getFollow = (params) => {
    formatAppLog("log", "at api/communication.js:16", "params===", params);
    return request(`/communications/getFollow`, "GET", params);
  };
  const deleteFollow = (params) => {
    return request(`/communications/deleteFollow`, "POST", params);
  };
  const getFollows = (params) => {
    return request(`/communications/getFollows`, "GET", params);
  };
  const getFollowsInfo = (params) => {
    return request(`/communications/getFollowsInfo`, "POST", params);
  };
  const getFansInfo = (params) => {
    return request(`/communications/getFansInfo`, "POST", params);
  };
  const getFans = (params) => {
    return request(`/communications/getFans`, "GET", params);
  };
  const setComment = (params) => {
    return request(`/communications/setComment`, "POST", params);
  };
  const getComment = (params) => {
    formatAppLog("log", "at api/communication.js:45", "params=====================", params);
    return request(`/communications/getComment`, "GET", params);
  };
  const setLike = (params) => {
    return request(`/communications/setLike`, "POST", params);
  };
  const __default__$a = {
    name: "waterFall"
  };
  const _sfc_main$v = /* @__PURE__ */ Object.assign(__default__$a, {
    props: {
      list: {
        type: Array,
        default: []
      },
      activeIndex: {
        type: Number,
        default: 1
      }
    },
    setup(__props) {
      const props = __props;
      vue.ref([]);
      let lists = vue.ref(props.list);
      let waterfall = vue.reactive([
        {
          height: 0,
          list: []
        },
        {
          height: 0,
          list: []
        }
      ]);
      let waterfallImageWidth = vue.ref(328);
      const goDetail = (item) => {
        formatAppLog("log", "at pages/index/WaterFallApp.vue:110", "item=", item);
        formatAppLog("log", "at pages/index/WaterFallApp.vue:111", "props===", props);
        formatAppLog("log", "at pages/index/WaterFallApp.vue:112", "item.id========", item.id);
        formatAppLog("log", "at pages/index/WaterFallApp.vue:113", "props.activeIndex=====", props.activeIndex);
        uni.navigateTo({
          url: `/pages/index/HobbyDetailMountain?id=${item.id}&hobby=${props.activeIndex}`
        });
      };
      const loadImg = (ev, item) => {
        formatAppLog("log", "at pages/index/WaterFallApp.vue:120", "ev================", ev);
        formatAppLog("log", "at pages/index/WaterFallApp.vue:121", "item================,", item);
        let height = ev.detail.height * waterfallImageWidth.value / ev.detail.width;
        formatAppLog("log", "at pages/index/WaterFallApp.vue:123", "height==================", height);
        if (waterfall[0].height <= waterfall[1].height) {
          waterfall[0].list.push(lists.value.shift());
          waterfall[0].height += height;
        } else {
          waterfall[1].list.push(lists.value.shift());
          waterfall[1].height += height;
        }
      };
      const like = (item) => {
        formatAppLog("log", "at pages/index/WaterFallApp.vue:137", "item=", item);
        let likeIds = uni.getStorageSync("like") || [];
        if (likeIds.includes(item.id)) {
          formatAppLog("log", "at pages/index/WaterFallApp.vue:141", "isOK=", likeIds);
          for (let i2 = 0; i2 < likeIds.length; i2++) {
            if (likeIds[i2] === item.id) {
              likeIds.splice(i2, 1);
            }
          }
          item.likes -= 1;
          item.likeFlag = false;
          uni.setStorageSync("like", likeIds);
        } else {
          item.likes += 1;
          item.likeFlag = true;
          formatAppLog("log", "at pages/index/WaterFallApp.vue:153", "likeIds=", likeIds);
          likeIds.unshift(item.id);
          uni.setStorageSync("like", likeIds);
        }
        const params = { hobby: props.activeIndex, hobbyId: item.id };
        setLike(params).then((data) => {
          formatAppLog("log", "at pages/index/WaterFallApp.vue:159", "like data=", data);
        });
      };
      vue.watchEffect(() => {
        lists.value = props.list;
      });
      vue.onMounted(() => {
        formatAppLog("log", "at pages/index/WaterFallApp.vue:189", "list1=", props.list);
        formatAppLog("log", "at pages/index/WaterFallApp.vue:190", "6666lists================", lists);
      });
      vue.onUpdated(() => {
        formatAppLog("log", "at pages/index/WaterFallApp.vue:193", "list2=", props.list);
        formatAppLog("log", "at pages/index/WaterFallApp.vue:194", "6666lists================", lists.value);
        formatAppLog("log", "at pages/index/WaterFallApp.vue:195", "waterfall.value===", waterfall);
      });
      vue.onBeforeUnmount(() => {
        formatAppLog("log", "at pages/index/WaterFallApp.vue:199", "onBeforeUnmount==========================");
      });
      vue.onUnmounted(() => {
        formatAppLog("log", "at pages/index/WaterFallApp.vue:202", "===\u5378\u8F7D\u5566\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002");
        waterfall = vue.reactive([
          {
            height: 0,
            list: []
          },
          {
            height: 0,
            list: []
          }
        ]);
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("view", { class: "waterfall" }, [
          vue.createElementVNode("view", { hidden: "" }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(props.list, (item) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                key: item.id
              }, [
                item.url ? (vue.openBlock(), vue.createElementBlock("image", {
                  key: 0,
                  src: item.url,
                  onLoad: ($event) => loadImg($event, item)
                }, null, 40, ["src", "onLoad"])) : vue.createCommentVNode("v-if", true)
              ]);
            }), 128))
          ]),
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(waterfall), (list) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: "list",
              key: list.height
            }, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(list.list, (item) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  key: item.id,
                  onClick: ($event) => goDetail(item)
                }, [
                  vue.createElementVNode("text", null, vue.toDisplayString(item.title), 1),
                  vue.createElementVNode("view", { class: "waterfall-image-wrapper" }, [
                    vue.createElementVNode("image", {
                      class: "waterfall-image",
                      mode: "widthFix",
                      style: vue.normalizeStyle({ width: vue.unref(waterfallImageWidth) + "rpx" }),
                      src: item.url
                    }, null, 12, ["src"]),
                    item.fileType ? (vue.openBlock(), vue.createElementBlock("span", {
                      key: 0,
                      class: "iconfont video-icon"
                    }, "\uE7C7")) : vue.createCommentVNode("v-if", true)
                  ]),
                  vue.createElementVNode("view", {
                    class: "hobby-title",
                    ref_for: true,
                    ref: "hobbyTitle"
                  }, vue.toDisplayString(item.title), 513),
                  vue.createElementVNode("view", { class: "hobby-info" }, [
                    vue.createElementVNode("view", { class: "info" }, [
                      vue.createElementVNode("image", {
                        class: "avatar",
                        mode: "aspectFit",
                        src: item.avatar
                      }, null, 8, ["src"]),
                      vue.createElementVNode("text", null, vue.toDisplayString(item.username), 1)
                    ]),
                    vue.createElementVNode("view", null, [
                      vue.createCommentVNode(' <svg v-if="item.likeFlag" class="icon" aria-hidden="true" @click.stop="like(item)">\r\n            <use xlink:href="#icon-xihuan1"></use>\r\n          </svg>\r\n          <svg v-else class="icon" aria-hidden="true" @click.stop="like(item)">\r\n            <use xlink:href="#icon-xihuan"></use>\r\n          </svg> '),
                      item.likeFlag ? (vue.openBlock(), vue.createElementBlock("span", {
                        key: 0,
                        style: { "color": "#f00" },
                        class: "iconfont",
                        onClick: vue.withModifiers(($event) => like(item), ["stop"])
                      }, "\uE86F", 8, ["onClick"])) : (vue.openBlock(), vue.createElementBlock("span", {
                        key: 1,
                        class: "iconfont",
                        onClick: vue.withModifiers(($event) => like(item), ["stop"])
                      }, "\uE86F", 8, ["onClick"])),
                      vue.createElementVNode("text", { style: { "margin-left": "10rpx" } }, vue.toDisplayString(item.likes), 1)
                    ])
                  ])
                ], 8, ["onClick"]);
              }), 128))
            ]);
          }), 128))
        ]);
      };
    }
  });
  var WaterFallApp = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["__scopeId", "data-v-6deeb950"], ["__file", "C:/myself/social/social/src/pages/index/WaterFallApp.vue"]]);
  const __default__$9 = {
    name: "McTabs",
    mounted() {
      formatAppLog("log", "at pages/index/McTabs.vue:157", "this===", this);
    }
  };
  const _sfc_main$u = /* @__PURE__ */ Object.assign(__default__$9, {
    setup(__props) {
      vue.useCssVars((_ctx) => ({
        "60f14796-result": vue.unref(result)
      }));
      const list = vue.ref([
        { title: "\u82F1\u8BED", content: [] },
        {
          title: "\u72FC\u4EBA\u6740",
          content: []
        },
        { title: "\u5267\u672C\u6740", content: [] },
        {
          title: "\u767B\u5C71",
          content: []
        },
        {
          title: "\u65C5\u6E38",
          content: []
        },
        {
          title: "\u89C6\u9891",
          content: []
        }
      ]);
      let swiperIndex = vue.ref(0);
      let navItemWidth = vue.ref(0);
      const navItems = vue.reactive([]);
      const strateies = {
        hobby0: (obj) => getEnglishVideos(obj),
        hobby1: (obj) => getWerewolf(obj),
        hobby2: (obj) => getScriptKill(obj),
        hobby3: (obj) => getMountaineers(obj),
        hobby4: (obj) => getTravel(obj),
        hobby5: (obj) => getvideoList(obj)
      };
      const handleScroll = (e2) => {
        formatAppLog("log", "at pages/index/McTabs.vue:205", "e=", e2);
        const {
          detail: { current }
        } = e2;
        formatAppLog("log", "at pages/index/McTabs.vue:209", "current=", current);
      };
      const taggleNav = (index) => {
        formatAppLog("log", "at pages/index/McTabs.vue:212", "swiperIndex========================", index);
        swiperIndex.value = index;
      };
      const swiperChange = (e2) => {
        const {
          detail: { current }
        } = e2;
        swiperIndex.value = current;
        navItemWidth.value = navItems[swiperIndex.value].width;
        strateies[`hobby${current}`]({ pageNum: 1, pageSize: 100 });
        formatAppLog("log", "at pages/index/McTabs.vue:222", "e=", e2);
        formatAppLog("log", "at pages/index/McTabs.vue:223", "navItemWidth.value=====", navItemWidth.value);
      };
      vue.onMounted(() => {
        formatAppLog("log", "at pages/index/McTabs.vue:241", "list====", list.value);
        if (list.value.length > 0) {
          list.value.forEach(() => {
            navItems.push({ width: 48 });
          });
          navItemWidth.value = navItems[swiperIndex.value].width;
          formatAppLog("log", "at pages/index/McTabs.vue:247", "navItemWidth===", navItemWidth.value);
          getEnglishVideos({ pageNum: 1, pageSize: 10 });
        }
      });
      const result = vue.computed(() => `${navItemWidth.value}rpx`);
      let videos = vue.ref([]);
      let pageNum = vue.ref(1);
      let pageSize = vue.ref(10);
      let total = vue.ref(0);
      var getEnglishVideos = ({ pageNum: pageNum2 = 1, pageSize: pageSize2 = 10 }) => {
        const params = {
          pageNum: pageNum2,
          pageSize: pageSize2
        };
        getVideoList(params).then((data) => {
          formatAppLog("log", "at pages/index/McTabs.vue:265", "data===", data);
          if (data.data.code === 200) {
            videos.value = videos.value.concat(data.data.data);
            total.value = data.data.total;
          }
        });
      };
      const onScrolltolower = (e2) => {
        if (swiperIndex.value === 0) {
          if (Math.ceil(total.value / pageSize.value) <= pageNum.value) {
            return;
          }
          pageNum.value++;
          getEnglishVideos({ pageNum: pageNum.value, pageSize: pageSize.value });
        }
      };
      const goDetail = (item) => {
        formatAppLog("log", "at pages/index/McTabs.vue:321", "item===", item);
        uni.navigateTo({
          url: `/pages/index/VideoDetail?id=${item.id}`
        });
      };
      let mountaineers = vue.ref([]);
      let mountaineersTotal = vue.ref(0);
      const getMountaineers = ({ pageNum: pageNum2 = 1, pageSize: pageSize2 = 10 }) => {
        const params = {
          pageNum: pageNum2,
          pageSize: pageSize2,
          hobby: 4
        };
        formatAppLog("log", "at pages/index/McTabs.vue:343", "hobby");
        getHobbyList(params).then((data) => {
          formatAppLog("log", "at pages/index/McTabs.vue:345", "data===", data);
          if (data.data.code === 200) {
            formatAppLog("log", "at pages/index/McTabs.vue:347", "data.data.data=", data.data.data);
            mountaineers.value = data.data.data;
            mountaineersTotal.value = data.data.total;
          }
        });
      };
      let werewolfs = vue.ref([]);
      let werewolfsTotal = vue.ref(0);
      const getWerewolf = ({ pageNum: pageNum2 = 1, pageSize: pageSize2 = 10 }) => {
        const params = {
          pageNum: pageNum2,
          pageSize: pageSize2,
          hobby: 2
        };
        formatAppLog("log", "at pages/index/McTabs.vue:363", "hobby");
        getHobbyList(params).then((data) => {
          formatAppLog("log", "at pages/index/McTabs.vue:365", "data===", data);
          if (data.data.code === 200) {
            formatAppLog("log", "at pages/index/McTabs.vue:367", "data.data.data=", data.data.data);
            werewolfs.value = data.data.data;
            werewolfsTotal.value = data.data.total;
          }
        });
      };
      let scriptKills = vue.ref([]);
      let scriptKillsTotal = vue.ref(0);
      const getScriptKill = ({ pageNum: pageNum2 = 1, pageSize: pageSize2 = 10 }) => {
        const params = {
          pageNum: pageNum2,
          pageSize: pageSize2,
          hobby: 3
        };
        formatAppLog("log", "at pages/index/McTabs.vue:383", "hobby");
        getHobbyList(params).then((data) => {
          formatAppLog("log", "at pages/index/McTabs.vue:385", "data===", data);
          if (data.data.code === 200) {
            formatAppLog("log", "at pages/index/McTabs.vue:387", "data.data.data=", data.data.data);
            scriptKills.value = data.data.data;
            scriptKillsTotal.value = data.data.total;
          }
        });
      };
      let travels = vue.ref([]);
      let travelsTotal = vue.ref(0);
      const getTravel = ({ pageNum: pageNum2 = 1, pageSize: pageSize2 = 10 }) => {
        const params = {
          pageNum: pageNum2,
          pageSize: pageSize2,
          hobby: 5
        };
        formatAppLog("log", "at pages/index/McTabs.vue:403", "hobby");
        getHobbyList(params).then((data) => {
          formatAppLog("log", "at pages/index/McTabs.vue:405", "data===", data);
          if (data.data.code === 200) {
            formatAppLog("log", "at pages/index/McTabs.vue:407", "data.data.data=", data.data.data);
            travels.value = data.data.data;
            travelsTotal.value = data.data.total;
          }
        });
      };
      let videoList = vue.ref([]);
      let videoListTotal = vue.ref(0);
      const getvideoList = ({ pageNum: pageNum2 = 1, pageSize: pageSize2 = 10 }) => {
        const params = {
          pageNum: pageNum2,
          pageSize: pageSize2,
          hobby: 6
        };
        formatAppLog("log", "at pages/index/McTabs.vue:423", "hobby");
        getHobbyList(params).then((data) => {
          formatAppLog("log", "at pages/index/McTabs.vue:425", "data===", data);
          if (data.data.code === 200) {
            formatAppLog("log", "at pages/index/McTabs.vue:427", "data.data.data=", data.data.data);
            videoList.value = data.data.data;
            videoListTotal.value = data.data.total;
          }
        });
      };
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$4);
        const _component_uni_list_item = resolveEasycom(vue.resolveDynamicComponent("uni-list-item"), __easycom_1$1);
        const _component_uni_list = resolveEasycom(vue.resolveDynamicComponent("uni-list"), __easycom_2);
        return vue.openBlock(), vue.createElementBlock("view", { class: "tabs" }, [
          vue.createElementVNode("scroll-view", {
            "scroll-x": "",
            "scroll-with-animaiton": "",
            "enable-flex": true,
            onScroll: handleScroll,
            class: "nav-wraper"
          }, [
            vue.createElementVNode("view", { class: "nav" }, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(list.value, (item, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: vue.normalizeClass(["nav-item", vue.unref(swiperIndex) == index ? "nav-item-act" : ""]),
                  key: index,
                  onClick: ($event) => taggleNav(index)
                }, [
                  vue.createElementVNode("text", null, vue.toDisplayString(item.title), 1),
                  vue.unref(swiperIndex) == index ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "nav-line",
                    style: vue.normalizeStyle(`{width: ${vue.unref(navItemWidth)}rpx}`)
                  }, null, 4)) : vue.createCommentVNode("v-if", true)
                ], 10, ["onClick"]);
              }), 128))
            ])
          ], 32),
          vue.createElementVNode("swiper", {
            current: vue.unref(swiperIndex),
            duration: 300,
            class: "swiper",
            onChange: swiperChange
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(list.value, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("swiper-item", { key: index }, [
                vue.createElementVNode("scroll-view", {
                  "scroll-y": "true",
                  class: "swiper-scroll",
                  onScrolltolower
                }, [
                  index === 0 ? (vue.openBlock(), vue.createBlock(_component_uni_list, { key: 0 }, {
                    default: vue.withCtx(() => [
                      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(videos), (item2) => {
                        return vue.openBlock(), vue.createBlock(_component_uni_list_item, {
                          title: item2.title,
                          ellipsis: item2.title,
                          note: item2.description,
                          key: item2.id,
                          direction: "column",
                          class: "content-item"
                        }, {
                          header: vue.withCtx(() => [
                            vue.createElementVNode("view", { class: "uni-thumb uni-content list-picture" }, [
                              item2.img ? (vue.openBlock(), vue.createElementBlock("image", {
                                key: 0,
                                class: "slot-image",
                                src: item2.img,
                                mode: "widthFix",
                                onClick: ($event) => goDetail(item2)
                              }, null, 8, ["src", "onClick"])) : vue.createCommentVNode("v-if", true),
                              item2.hintTitle || item2.dateSrc ? (vue.openBlock(), vue.createElementBlock("view", {
                                key: 1,
                                class: "hint"
                              }, [
                                vue.createCommentVNode(' <text v-if="item.hintTitle">By</text> '),
                                item2.hintTitle ? (vue.openBlock(), vue.createElementBlock("text", {
                                  key: 0,
                                  class: "hint-title"
                                }, vue.toDisplayString(item2.hintTitle), 1)) : vue.createCommentVNode("v-if", true),
                                vue.createElementVNode("text", { class: "hint-date" }, vue.toDisplayString(item2.dateSrc), 1)
                              ])) : vue.createCommentVNode("v-if", true)
                            ])
                          ]),
                          body: vue.withCtx(() => [
                            vue.createElementVNode("view", { class: "content-body" }, [
                              vue.createElementVNode("view", {
                                class: "title-wraper",
                                onClick: ($event) => goDetail(item2)
                              }, [
                                vue.createElementVNode("text", { class: "title" }, vue.toDisplayString(item2.title), 1),
                                vue.createElementVNode("view", { class: "video" }, [
                                  vue.createVNode(_component_uni_icons, {
                                    style: { "vertical-align": "middle" },
                                    type: "videocam",
                                    size: "20",
                                    color: "#999"
                                  }),
                                  vue.createElementVNode("text", null, "VIDEO")
                                ])
                              ], 8, ["onClick"]),
                              vue.createElementVNode("view", { class: "description" }, vue.toDisplayString(item2.description), 1)
                            ])
                          ]),
                          _: 2
                        }, 1032, ["title", "ellipsis", "note"]);
                      }), 128))
                    ]),
                    _: 2
                  }, 1024)) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(' <view v-else-if="index === 3"> '),
                  index === 1 && vue.unref(swiperIndex) === index ? (vue.openBlock(), vue.createBlock(WaterFallApp, {
                    list: vue.unref(werewolfs),
                    activeIndex: 2,
                    key: vue.unref(werewolfs)
                  }, null, 8, ["list"])) : index === 2 && vue.unref(swiperIndex) === index ? (vue.openBlock(), vue.createBlock(WaterFallApp, {
                    list: vue.unref(scriptKills),
                    activeIndex: 3,
                    key: vue.unref(scriptKills)
                  }, null, 8, ["list"])) : index === 3 && vue.unref(swiperIndex) === index ? (vue.openBlock(), vue.createBlock(WaterFallApp, {
                    key: 3,
                    list: vue.unref(mountaineers),
                    activeIndex: 4
                  }, null, 8, ["list"])) : index === 4 && vue.unref(swiperIndex) === index ? (vue.openBlock(), vue.createBlock(WaterFallApp, {
                    key: 4,
                    list: vue.unref(travels),
                    activeIndex: 5
                  }, null, 8, ["list"])) : index === 5 && vue.unref(swiperIndex) === index ? (vue.openBlock(), vue.createBlock(WaterFallApp, {
                    key: 5,
                    list: vue.unref(videoList),
                    activeIndex: 6
                  }, null, 8, ["list"])) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(' <WaterFall v-else-if="index === 6" :list="movies" :activeIndex="7"/> '),
                  vue.createCommentVNode(" </view> "),
                  vue.createCommentVNode(" <view v-else>\u5F85\u4E0A\u7EBF</view> ")
                ], 32),
                vue.createCommentVNode(" <slot></slot> ")
              ]);
            }), 128))
          ], 40, ["current"])
        ]);
      };
    }
  });
  var McTabs = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["__scopeId", "data-v-60f14796"], ["__file", "C:/myself/social/social/src/pages/index/McTabs.vue"]]);
  const totalKey = "totalIM";
  const userKey = "userinfo";
  function getTotalIM() {
    return uni.getStorageSync(totalKey);
  }
  function setTotalIM(data) {
    return uni.setStorageSync(totalKey, data);
  }
  function getStoreUserInfo() {
    return uni.getStorageSync(userKey);
  }
  function setStoreUserInfo(data) {
    return uni.setStorageSync(userKey, data);
  }
  const _sfc_main$t = {
    onShow: function() {
      if (getTotalIM() > 0) {
        uni.setTabBarBadge({
          index: 2,
          text: "\xB7\xB7\xB7"
        });
      } else {
        uni.removeTabBarBadge({
          index: 2
        });
      }
    },
    components: {
      McTabs
    },
    setup() {
      const store2 = useStore();
      vue.computed(() => store2.state.user.userInfo).value;
      vue.onMounted(() => {
      });
      return {
        title: "\u8513\u8349"
      };
    }
  };
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_McTabs = vue.resolveComponent("McTabs");
    return vue.openBlock(), vue.createElementBlock("view", { class: "content" }, [
      vue.createVNode(_component_McTabs),
      vue.createCommentVNode(' <button @click="open">\u6253\u5F00\u5F39\u7A97</button> ')
    ]);
  }
  var PagesIndexIndex = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$g], ["__file", "C:/myself/social/social/src/pages/index/index.vue"]]);
  const getPublish = (params) => {
    formatAppLog("log", "at api/publish.js:12", "params===", params);
    return request(`/publishs/getPublish`, "GET", params);
  };
  const deletePublish = (params) => {
    return request(`/publishs/deletePublish`, "POST", params);
  };
  const updatePublish = (params) => {
    return request(`/publishs/updatePublish`, "POST", params, "application/x-www-form-urlencoded");
  };
  const updateVideoPublish = (params) => {
    return request(`/publishs/updateVideoPublish`, "POST", params);
  };
  const getMylikes = (params) => {
    formatAppLog("log", "at api/publish.js:29", "params===", params);
    return request(`/publishs/getMylikes`, "GET", params);
  };
  const __default__$8 = {
    name: "infoList"
  };
  const _sfc_main$s = /* @__PURE__ */ Object.assign(__default__$8, {
    props: {
      list: {
        type: Array,
        default: []
      },
      activeIndex: {
        type: Number,
        default: 0
      }
    },
    setup(__props) {
      const props = __props;
      let infoList = vue.ref([]);
      const goDetail = (item) => {
        formatAppLog("log", "at pages/components/InfoList.vue:78", "item=", item);
        if (props.activeIndex === 0) {
          uni.navigateTo({
            url: `/pages/user/info/PublicDetail?id=${item.id}&hobby=${item.hobby}`
          });
        } else {
          uni.navigateTo({
            url: `/pages/user/info/LikeDetail?id=${item.id}&hobby=${item.hobby}`
          });
        }
      };
      vue.watch(() => props.list, (state) => {
        formatAppLog("log", "at pages/components/InfoList.vue:106", "state=", state);
        infoList.value = state;
      }, {
        deep: true
      });
      vue.onMounted(() => {
        formatAppLog("log", "at pages/components/InfoList.vue:115", "props=", props);
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("view", { class: "info-list" }, [
          vue.createCommentVNode(' <uni-list>\r\n      <uni-list-item\r\n        v-for="item in infoList"\r\n        :key="item.id"\r\n        :title="item.username"\r\n        :note="item.title"\r\n        :thumb="item.avatar"\r\n        thumb-size="lg"\r\n      ></uni-list-item>\r\n    </uni-list> '),
          vue.createElementVNode("view", { class: "ul" }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(infoList), (item) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "li",
                key: item.id,
                onClick: ($event) => goDetail(item)
              }, [
                vue.createElementVNode("view", { class: "comment" }, [
                  vue.createCommentVNode(' <svg class="replay-icon" aria-hidden="true">\r\n            <use xlink:href="#icon-pinglunhuifu"></use>\r\n          </svg> '),
                  vue.createElementVNode("span", { class: "iconfont replay-icon" }, "\uE653"),
                  vue.createElementVNode("view", null, [
                    vue.createElementVNode("text", null, vue.toDisplayString(item.comments || 0), 1)
                  ])
                ]),
                vue.createElementVNode("view", { class: "publish-info" }, [
                  vue.createElementVNode("view", { class: "title" }, vue.toDisplayString(item.title), 1),
                  vue.createElementVNode("view", { class: "userinfo" }, [
                    vue.createElementVNode("image", {
                      class: "avatar",
                      mode: "aspectFit",
                      src: item.avatar || ""
                    }, null, 8, ["src"]),
                    vue.createElementVNode("text", { class: "username" }, vue.toDisplayString(item.username), 1),
                    vue.createElementVNode("text", { class: "update-time" }, vue.toDisplayString(_ctx.$filters.commentTime(item.create_time || "")) + "\xA0\u66F4\u65B0", 1)
                  ])
                ]),
                vue.createElementVNode("view", { class: "img" }, [
                  vue.createElementVNode("image", {
                    class: "img-url",
                    mode: "aspectFit",
                    src: item.url || ""
                  }, null, 8, ["src"])
                ])
              ], 8, ["onClick"]);
            }), 128)),
            vue.unref(infoList).length <= 0 ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "li empty"
            }, "\u6682\u65E0\u6570\u636E")) : vue.createCommentVNode("v-if", true)
          ])
        ]);
      };
    }
  });
  var InfoList = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["__scopeId", "data-v-260b9811"], ["__file", "C:/myself/social/social/src/pages/components/InfoList.vue"]]);
  var e, n, r = function() {
    function e2() {
      this.events = void 0, this.events = {};
    }
    var n2 = e2.prototype;
    return n2.emit = function(e3, n3) {
      return this.events[e3] && this.events[e3].forEach(function(e4) {
        return e4(n3);
      }), this;
    }, n2.on = function(e3, n3) {
      return this.events[e3] ? this.events[e3].push(n3) : this.events[e3] = [n3], this;
    }, n2.off = function(e3, n3) {
      if (e3 && typeof n3 == "function") {
        var r2 = this.events[e3], t2 = r2.findIndex(function(e4) {
          return e4 === n3;
        });
        r2.splice(t2, 1);
      } else
        this.events[e3] = [];
      return this;
    }, e2;
  }();
  function t$1(e2, n2) {
    return t$1 = Object.setPrototypeOf || function(e3, n3) {
      return e3.__proto__ = n3, e3;
    }, t$1(e2, n2);
  }
  !function(e2) {
    e2.INITSDK = "InitSDK", e2.LOGIN = "Login", e2.LOGOUT = "Logout", e2.GETLOGINSTATUS = "GetLoginStatus", e2.GETLOGINUSER = "GetLoginUser", e2.GETSELFUSERINFO = "GetSelfUserInfo", e2.CREATETEXTMESSAGE = "CreateTextMessage", e2.CREATETEXTATMESSAGE = "CreateTextAtMessage", e2.CREATEIMAGEMESSAGEFROMBYURL = "CreateImageMessageByURL", e2.CREATESOUNDMESSAGEBYURL = "CreateSoundMessageByURL", e2.CREATEVIDEOMESSAGEBYURL = "CreateVideoMessageByURL", e2.CREATEFILEMESSAGEBYURL = "CreateFileMessageByURL", e2.CREATEIMAGEMESSAGEFROMFULLPATH = "CreateImageMessageFromFullPath", e2.CREATESOUNDMESSAGEFROMFULLPATH = "CreateSoundMessageFromFullPath", e2.CREATEVIDEOMESSAGEFROMFULLPATH = "CreateVideoMessageFromFullPath", e2.CREATEFILEMESSAGEFROMFULLPATH = "CreateFileMessageFromFullPath", e2.CREATELOCATIONMESSAGE = "CreateLocationMessage", e2.CREATECUSTOMMESSAGE = "CreateCustomMessage", e2.CREATEMERGERMESSAGE = "CreateMergerMessage", e2.CREATEFORWARDMESSAGE = "CreateForwardMessage", e2.CREATEQUOTEMESSAGE = "CreateQuoteMessage", e2.CREATECARDMESSAGE = "CreateCardMessage", e2.CREATEFACEMESSAGE = "CreateFaceMessage", e2.SENDMESSAGE = "SendMessage", e2.SENDMESSAGENOTOSS = "SendMessageNotOss", e2.GETHISTORYMESSAGELIST = "GetHistoryMessageList", e2.REVOKEMESSAGE = "RevokeMessage", e2.SETONECONVERSATIONPRIVATECHAT = "SetOneConversationPrivateChat", e2.DELETEMESSAGEFROMLOCALSTORAGE = "DeleteMessageFromLocalStorage", e2.DELETEMESSAGEFROMLOCALANDSVR = "DeleteMessageFromLocalAndSvr", e2.DELETECONVERSATIONFROMLOCALANDSVR = "DeleteConversationFromLocalAndSvr", e2.DELETEALLMSGFROMLOCALANDSVR = "DeleteAllMsgFromLocalAndSvr", e2.DELETEALLMSGFROMLOCAL = "DeleteAllMsgFromLocal", e2.MARKSINGLEMESSAGEHASREAD = "MarkSingleMessageHasRead", e2.INSERTSINGLEMESSAGETOLOCALSTORAGE = "InsertSingleMessageToLocalStorage", e2.INSERTGROUPMESSAGETOLOCALSTORAGE = "InsertGroupMessageToLocalStorage", e2.TYPINGSTATUSUPDATE = "TypingStatusUpdate", e2.MARKC2CMESSAGEASREAD = "MarkC2CMessageAsRead", e2.MARKMESSAGEASREADBYCONID = "MarkMessageAsReadByConID", e2.CLEARC2CHISTORYMESSAGE = "ClearC2CHistoryMessage", e2.CLEARGROUPHISTORYMESSAGE = "ClearGroupHistoryMessage", e2.ADDFRIEND = "AddFriend", e2.GETDESIGNATEDFRIENDSINFO = "GetDesignatedFriendsInfo", e2.GETRECVFRIENDAPPLICATIONLIST = "GetRecvFriendApplicationList", e2.GETSENDFRIENDAPPLICATIONLIST = "GetSendFriendApplicationList", e2.GETFRIENDLIST = "GetFriendList", e2.SETFRIENDREMARK = "SetFriendRemark", e2.ADDBLACK = "AddBlack", e2.GETBLACKLIST = "GetBlackList", e2.REMOVEBLACK = "RemoveBlack", e2.CHECKFRIEND = "CheckFriend", e2.ACCEPTFRIENDAPPLICATION = "AcceptFriendApplication", e2.REFUSEFRIENDAPPLICATION = "RefuseFriendApplication", e2.DELETEFRIEND = "DeleteFriend", e2.GETUSERSINFO = "GetUsersInfo", e2.SETSELFINFO = "SetSelfInfo", e2.GETALLCONVERSATIONLIST = "GetAllConversationList", e2.GETCONVERSATIONLISTSPLIT = "GetConversationListSplit", e2.GETONECONVERSATION = "GetOneConversation", e2.GETCONVERSATIONIDBYSESSIONTYPE = "GetConversationIDBySessionType", e2.GETMULTIPLECONVERSATION = "GetMultipleConversation", e2.DELETECONVERSATION = "DeleteConversation", e2.SETCONVERSATIONDRAFT = "SetConversationDraft", e2.PINCONVERSATION = "PinConversation", e2.GETTOTALUNREADMSGCOUNT = "GetTotalUnreadMsgCount", e2.GETCONVERSATIONRECVMESSAGEOPT = "GetConversationRecvMessageOpt", e2.SETCONVERSATIONRECVMESSAGEOPT = "SetConversationRecvMessageOpt", e2.SEARCHLOCALMESSAGES = "SearchLocalMessages", e2.MARKGROUPMESSAGEHASREAD = "MarkGroupMessageHasRead", e2.MARKGROUPMESSAGEASREAD = "MarkGroupMessageAsRead", e2.INVITEUSERTOGROUP = "InviteUserToGroup", e2.KICKGROUPMEMBER = "KickGroupMember", e2.GETGROUPMEMBERSINFO = "GetGroupMembersInfo", e2.GETGROUPMEMBERLIST = "GetGroupMemberList", e2.GETJOINEDGROUPLIST = "GetJoinedGroupList", e2.CREATEGROUP = "CreateGroup", e2.SETGROUPINFO = "SetGroupInfo", e2.GETGROUPSINFO = "GetGroupsInfo", e2.JOINGROUP = "JoinGroup", e2.QUITGROUP = "QuitGroup", e2.DISMISSGROUP = "DismissGroup", e2.CHANGEGROUPMUTE = "ChangeGroupMute", e2.CHANGEGROUPMEMBERMUTE = "ChangeGroupMemberMute", e2.TRANSFERGROUPOWNER = "TransferGroupOwner", e2.GETSENDGROUPAPPLICATIONLIST = "GetSendGroupApplicationList", e2.GETRECVGROUPAPPLICATIONLIST = "GetRecvGroupApplicationList", e2.ACCEPTGROUPAPPLICATION = "AcceptGroupApplication", e2.REFUSEGROUPAPPLICATION = "RefuseGroupApplication", e2.SIGNALINGINVITE = "SignalingInvite", e2.SIGNALINGINVITEINGROUP = "SignalingInviteInGroup", e2.SIGNALINGACCEPT = "SignalingAccept", e2.SIGNALINGREJECT = "SignalingReject", e2.SIGNALINGCANCEL = "SignalingCancel";
  }(e || (e = {})), function(e2) {
    e2.ONCONNECTFAILED = "OnConnectFailed", e2.ONCONNECTSUCCESS = "OnConnectSuccess", e2.ONCONNECTING = "OnConnecting", e2.ONKICKEDOFFLINE = "OnKickedOffline", e2.ONSELFINFOUPDATED = "OnSelfInfoUpdated", e2.ONUSERTOKENEXPIRED = "OnUserTokenExpired", e2.ONPROGRESS = "OnProgress", e2.ONRECVNEWMESSAGE = "OnRecvNewMessage", e2.ONRECVMESSAGEREVOKED = "OnRecvMessageRevoked", e2.ONRECVC2CREADRECEIPT = "OnRecvC2CReadReceipt", e2.ONRECVGROUPREADRECEIPT = "OnRecvGroupReadReceipt", e2.ONCONVERSATIONCHANGED = "OnConversationChanged", e2.ONNEWCONVERSATION = "OnNewConversation", e2.ONSYNCSERVERFAILED = "OnSyncServerFailed", e2.ONSYNCSERVERFINISH = "OnSyncServerFinish", e2.ONSYNCSERVERSTART = "OnSyncServerStart", e2.ONTOTALUNREADMESSAGECOUNTCHANGED = "OnTotalUnreadMessageCountChanged", e2.ONBLACKADDED = "OnBlackAdded", e2.ONBLACKDELETED = "OnBlackDeleted", e2.ONFRIENDAPPLICATIONACCEPTED = "OnFriendApplicationAccepted", e2.ONFRIENDAPPLICATIONADDED = "OnFriendApplicationAdded", e2.ONFRIENDAPPLICATIONDELETED = "OnFriendApplicationDeleted", e2.ONFRIENDAPPLICATIONREJECTED = "OnFriendApplicationRejected", e2.ONFRIENDINFOCHANGED = "OnFriendInfoChanged", e2.ONFRIENDADDED = "OnFriendAdded", e2.ONFRIENDDELETED = "OnFriendDeleted", e2.ONJOINEDGROUPADDED = "OnJoinedGroupAdded", e2.ONJOINEDGROUPDELETED = "OnJoinedGroupDeleted", e2.ONGROUPMEMBERADDED = "OnGroupMemberAdded", e2.ONGROUPMEMBERDELETED = "OnGroupMemberDeleted", e2.ONGROUPAPPLICATIONADDED = "OnGroupApplicationAdded", e2.ONGROUPAPPLICATIONDELETED = "OnGroupApplicationDeleted", e2.ONGROUPINFOCHANGED = "OnGroupInfoChanged", e2.ONGROUPMEMBERINFOCHANGED = "OnGroupMemberInfoChanged", e2.ONGROUPAPPLICATIONACCEPTED = "OnGroupApplicationAccepted", e2.ONGROUPAPPLICATIONREJECTED = "OnGroupApplicationRejected", e2.ONRECEIVENEWINVITATION = "OnReceiveNewInvitation", e2.ONINVITEEACCEPTED = "OnInviteeAccepted", e2.ONINVITEEREJECTED = "OnInviteeRejected", e2.ONINVITATIONCANCELLED = "OnInvitationCancelled", e2.ONINVITATIONTIMEOUT = "OnInvitationTimeout", e2.ONINVITEEACCEPTEDBYOTHERDEVICE = "OnInviteeAcceptedByOtherDevice", e2.ONINVITEEREJECTEDBYOTHERDEVICE = "OnInviteeRejectedByOtherDevice";
  }(n || (n = {}));
  var i = function(e2) {
    return (36 * Math.random()).toString(36).slice(2) + new Date().getTime().toString() + e2;
  }, o = function(r2) {
    var o2, a;
    function u() {
      var t2;
      return (t2 = r2.call(this) || this).ws = void 0, t2.uid = void 0, t2.token = void 0, t2.platform = "web", t2.wsUrl = "", t2.lock = false, t2.logoutFlag = false, t2.ws2promise = {}, t2.onceFlag = true, t2.getLoginStatus = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETLOGINSTATUS, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.getLoginUser = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETLOGINUSER, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.getSelfUserInfo = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETSELFUSERINFO, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.getUsersInfo = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETUSERSINFO, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.setSelfInfo = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.SETSELFINFO, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createTextMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATETEXTMESSAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createTextAtMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = n2;
          u2.atUserIDList = JSON.stringify(u2.atUserIDList);
          var s2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATETEXTATMESSAGE, operationID: s2, userID: t2.uid, data: u2 }, o3, a2);
        });
      }, t2.createImageMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.bigPicture = JSON.stringify(s2.bigPicture), s2.snapshotPicture = JSON.stringify(s2.snapshotPicture), s2.sourcePicture = JSON.stringify(s2.sourcePicture);
          var E = { reqFuncName: e.CREATEIMAGEMESSAGEFROMBYURL, operationID: u2, userID: t2.uid, data: JSON.stringify(s2) };
          t2.wsSend(E, o3, a2);
        });
      }, t2.createSoundMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = { soundBaseInfo: JSON.stringify(n2) }, E = { reqFuncName: e.CREATESOUNDMESSAGEBYURL, operationID: u2, userID: t2.uid, data: JSON.stringify(s2) };
          t2.wsSend(E, o3, a2);
        });
      }, t2.createVideoMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = { videoBaseInfo: JSON.stringify(n2) }, E = { reqFuncName: e.CREATEVIDEOMESSAGEBYURL, operationID: u2, userID: t2.uid, data: JSON.stringify(s2) };
          t2.wsSend(E, o3, a2);
        });
      }, t2.createFileMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = { fileBaseInfo: JSON.stringify(n2) }, E = { reqFuncName: e.CREATEFILEMESSAGEBYURL, operationID: u2, userID: t2.uid, data: JSON.stringify(s2) };
          t2.wsSend(E, o3, a2);
        });
      }, t2.createFileMessageFromFullPath = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATEFILEMESSAGEFROMFULLPATH, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createImageMessageFromFullPath = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATEIMAGEMESSAGEFROMFULLPATH, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createSoundMessageFromFullPath = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATESOUNDMESSAGEFROMFULLPATH, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createVideoMessageFromFullPath = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATEVIDEOMESSAGEFROMFULLPATH, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createMergerMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.messageList = JSON.stringify(n2.messageList), s2.summaryList = JSON.stringify(n2.summaryList), t2.wsSend({ reqFuncName: e.CREATEMERGERMESSAGE, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.createForwardMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATEFORWARDMESSAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createFaceMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATEFACEMESSAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createLocationMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATELOCATIONMESSAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createCustomMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATECUSTOMMESSAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createQuoteMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATEQUOTEMESSAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.createCardMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CREATECARDMESSAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.sendMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.offlinePushInfo = s2.offlinePushInfo ? JSON.stringify(n2.offlinePushInfo) : "", t2.wsSend({ reqFuncName: e.SENDMESSAGE, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.sendMessageNotOss = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.offlinePushInfo = s2.offlinePushInfo ? JSON.stringify(n2.offlinePushInfo) : "", t2.wsSend({ reqFuncName: e.SENDMESSAGENOTOSS, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.getHistoryMessageList = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETHISTORYMESSAGELIST, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.revokeMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.REVOKEMESSAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.setOneConversationPrivateChat = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.SETONECONVERSATIONPRIVATECHAT, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.deleteMessageFromLocalStorage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.DELETEMESSAGEFROMLOCALSTORAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.deleteMessageFromLocalAndSvr = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.DELETEMESSAGEFROMLOCALANDSVR, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.deleteConversationFromLocalAndSvr = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.DELETECONVERSATIONFROMLOCALANDSVR, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.deleteAllMsgFromLocal = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.DELETEALLMSGFROMLOCAL, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.deleteAllMsgFromLocalAndSvr = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.DELETEALLMSGFROMLOCALANDSVR, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.markGroupMessageHasRead = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.MARKGROUPMESSAGEHASREAD, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.markGroupMessageAsRead = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.msgIDList = JSON.stringify(s2.msgIDList), t2.wsSend({ reqFuncName: e.MARKGROUPMESSAGEASREAD, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.insertSingleMessageToLocalStorage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.INSERTSINGLEMESSAGETOLOCALSTORAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.insertGroupMessageToLocalStorage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.INSERTGROUPMESSAGETOLOCALSTORAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.typingStatusUpdate = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.TYPINGSTATUSUPDATE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.markC2CMessageAsRead = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = n2;
          u2.msgIDList = JSON.stringify(u2.msgIDList);
          var s2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.MARKC2CMESSAGEASREAD, operationID: s2, userID: t2.uid, data: u2 }, o3, a2);
        });
      }, t2.markMessageAsReadByConID = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = n2;
          u2.msgIDList = JSON.stringify(u2.msgIDList);
          var s2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.MARKMESSAGEASREADBYCONID, operationID: s2, userID: t2.uid, data: u2 }, o3, a2);
        });
      }, t2.clearC2CHistoryMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CLEARC2CHISTORYMESSAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.clearGroupHistoryMessage = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CLEARGROUPHISTORYMESSAGE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.getAllConversationList = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETALLCONVERSATIONLIST, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.getConversationListSplit = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETCONVERSATIONLISTSPLIT, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.getOneConversation = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETONECONVERSATION, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.getConversationIDBySessionType = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETCONVERSATIONIDBYSESSIONTYPE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.getMultipleConversation = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETMULTIPLECONVERSATION, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.deleteConversation = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.DELETECONVERSATION, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.setConversationDraft = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.SETCONVERSATIONDRAFT, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.pinConversation = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.PINCONVERSATION, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.getTotalUnreadMsgCount = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETTOTALUNREADMSGCOUNT, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.getConversationRecvMessageOpt = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETCONVERSATIONRECVMESSAGEOPT, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.setConversationRecvMessageOpt = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.conversationIDList = JSON.stringify(n2.conversationIDList), t2.wsSend({ reqFuncName: e.SETCONVERSATIONRECVMESSAGEOPT, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.searchLocalMessages = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.SEARCHLOCALMESSAGES, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.addFriend = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.ADDFRIEND, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.getDesignatedFriendsInfo = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETDESIGNATEDFRIENDSINFO, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.getRecvFriendApplicationList = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETRECVFRIENDAPPLICATIONLIST, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.getSendFriendApplicationList = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETSENDFRIENDAPPLICATIONLIST, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.getFriendList = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETFRIENDLIST, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.setFriendRemark = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.SETFRIENDREMARK, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.checkFriend = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CHECKFRIEND, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.acceptFriendApplication = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.ACCEPTFRIENDAPPLICATION, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.refuseFriendApplication = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.REFUSEFRIENDAPPLICATION, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.deleteFriend = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.DELETEFRIEND, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.addBlack = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.ADDBLACK, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.removeBlack = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.REMOVEBLACK, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.getBlackList = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETBLACKLIST, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.inviteUserToGroup = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.userIDList = JSON.stringify(s2.userIDList), t2.wsSend({ reqFuncName: e.INVITEUSERTOGROUP, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.kickGroupMember = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.userIDList = JSON.stringify(s2.userIDList), t2.wsSend({ reqFuncName: e.KICKGROUPMEMBER, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.getGroupMembersInfo = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.userIDList = JSON.stringify(s2.userIDList), t2.wsSend({ reqFuncName: e.GETGROUPMEMBERSINFO, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.getGroupMemberList = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETGROUPMEMBERLIST, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.getJoinedGroupList = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETJOINEDGROUPLIST, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.createGroup = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.groupBaseInfo = JSON.stringify(s2.groupBaseInfo), s2.memberList = JSON.stringify(s2.memberList), t2.wsSend({ reqFuncName: e.CREATEGROUP, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.setGroupInfo = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = n2;
          s2.groupInfo = JSON.stringify(s2.groupInfo), t2.wsSend({ reqFuncName: e.SETGROUPINFO, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.getGroupsInfo = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETGROUPSINFO, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.joinGroup = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.JOINGROUP, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.quitGroup = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.QUITGROUP, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.dismissGroup = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.DISMISSGROUP, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.changeGroupMute = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CHANGEGROUPMUTE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.changeGroupMemberMute = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.CHANGEGROUPMEMBERMUTE, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.transferGroupOwner = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.TRANSFERGROUPOWNER, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.getSendGroupApplicationList = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETSENDGROUPAPPLICATIONLIST, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.getRecvGroupApplicationList = function(n2) {
        return new Promise(function(r3, o3) {
          var a2 = n2 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.GETRECVGROUPAPPLICATIONLIST, operationID: a2, userID: t2.uid, data: "" }, r3, o3);
        });
      }, t2.acceptGroupApplication = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.ACCEPTGROUPAPPLICATION, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.refuseGroupApplication = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.REFUSEGROUPAPPLICATION, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.signalingInvite = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = {};
          s2.invitation = n2, t2.wsSend({ reqFuncName: e.SIGNALINGINVITE, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.signalingInviteInGroup = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid), s2 = {};
          s2.invitation = n2, t2.wsSend({ reqFuncName: e.SIGNALINGINVITEINGROUP, operationID: u2, userID: t2.uid, data: s2 }, o3, a2);
        });
      }, t2.signalingAccept = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.SIGNALINGACCEPT, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.signalingReject = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.SIGNALINGREJECT, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.signalingCancel = function(n2, r3) {
        return new Promise(function(o3, a2) {
          var u2 = r3 || i(t2.uid);
          t2.wsSend({ reqFuncName: e.SIGNALINGCANCEL, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
        });
      }, t2.wsSend = function(r3, o3, a2) {
        t2.ws === void 0 && a2({ event: r3.reqFuncName, errCode: 112, errMsg: "ws conect failed...", data: "", operationID: r3.operationID || "" }), typeof r3.data == "object" && (r3.data = JSON.stringify(r3.data));
        var u2 = { oid: r3.operationID || i(t2.uid), mname: r3.reqFuncName, mrsve: o3, mrjet: a2, flag: false };
        t2.ws2promise[u2.oid] = u2;
        var s2 = function(i2) {
          var o4 = JSON.parse(i2.data);
          if (n[o4.event.toUpperCase()])
            t2.emit(o4.event, o4);
          else {
            r3.reqFuncName === e.LOGOUT && (t2.logoutFlag = true, t2.ws.close(), t2.ws = void 0);
            var a3 = t2.ws2promise[o4.operationID];
            a3 && (o4.errCode === 0 ? a3.mrsve(o4) : a3.mrjet(o4), delete t2.ws2promise[o4.operationID]);
          }
        };
        t2.platform == "web" ? (t2.ws.send(JSON.stringify(r3)), t2.ws.onmessage = s2) : (t2.ws.send({ data: JSON.stringify(r3), success: function(e2) {
          t2.platform === "uni" && t2.ws._callbacks !== void 0 && t2.ws._callbacks.message !== void 0 && (t2.ws._callbacks.message = []);
        } }), t2.onceFlag && (t2.ws.onMessage(s2), t2.onceFlag = false)), r3.reqFuncName === e.LOGOUT && (t2.onceFlag = true);
      }, t2.getPlatform(), t2;
    }
    a = r2, (o2 = u).prototype = Object.create(a.prototype), o2.prototype.constructor = o2, t$1(o2, a);
    var s = u.prototype;
    return s.login = function(n2) {
      var r3 = this;
      return new Promise(function(t2, i2) {
        var o3 = n2.userID, a2 = n2.token, u2 = n2.operationID;
        r3.wsUrl = n2.url + "?sendID=" + o3 + "&token=" + a2 + "&platformID=" + n2.platformID;
        var s2 = { userID: o3, token: a2 }, E = { event: e.LOGIN, errCode: 0, errMsg: "", data: "", operationID: u2 || "" };
        r3.createWs(function() {
          r3.uid = o3, r3.token = a2, r3.iLogin(s2, u2).then(function(e2) {
            r3.logoutFlag = false, t2(e2);
          }).catch(function(e2) {
            E.errCode = e2.errCode, E.errMsg = e2.errMsg, i2(E);
          });
        }, function() {
          E.errCode = 111, E.errMsg = "ws connect close...", r3.logoutFlag || r3.reconnect(), i2(E);
        }, function(e2) {
          console.log(e2), E.errCode = 112, E.errMsg = "ws connect error...", i2(E);
        }), r3.ws || (E.errCode = 112, E.errMsg = "The current platform is not supported...", i2(E));
      });
    }, s.iLogin = function(n2, r3) {
      var t2 = this;
      return new Promise(function(o3, a2) {
        var u2 = r3 || i(t2.uid);
        t2.wsSend({ reqFuncName: e.LOGIN, operationID: u2, userID: t2.uid, data: n2 }, o3, a2);
      });
    }, s.logout = function(n2) {
      var r3 = this;
      return new Promise(function(t2, o3) {
        var a2 = n2 || i(r3.uid);
        r3.wsSend({ reqFuncName: e.LOGOUT, operationID: a2, userID: r3.uid, data: "" }, t2, o3);
      });
    }, s.getPlatform = function() {
      var e2 = typeof WebSocket, n2 = typeof uni, r3 = typeof wx;
      this.platform = e2 === "undefined" ? n2 === "object" && r3 !== "object" ? "uni" : n2 !== "object" && r3 === "object" ? "wx" : "unknow" : "web";
    }, s.createWs = function(e2, n2, r3) {
      var t2 = this;
      console.log("call createWs:::");
      var i2 = function() {
        t2.iLogin({ userID: t2.uid, token: t2.token }).then(function(e3) {
          return t2.logoutFlag = false;
        });
      };
      e2 && (i2 = e2);
      var o3 = function() {
        console.log("ws close agin:::"), t2.logoutFlag || t2.reconnect();
      };
      n2 && (o3 = n2);
      var a2 = function() {
      };
      if (r3 && (a2 = r3), this.platform === "web")
        return this.ws = new WebSocket(this.wsUrl), this.ws.onclose = o3, this.ws.onopen = i2, void (this.ws.onerror = a2);
      var u2 = this.platform === "uni" ? uni : wx;
      this.ws = u2.connectSocket({ url: this.wsUrl, complete: function() {
      } }), this.ws.onClose(o3), this.ws.onOpen(i2), this.ws.onError(a2);
    }, s.reconnect = function() {
      var e2 = this;
      this.onceFlag || (this.onceFlag = true), this.lock || (this.lock = true, setTimeout(function() {
        e2.createWs(), e2.lock = false;
      }, 2e3));
    }, u;
  }(r);
  const openIM = new o();
  const __default__$7 = {
    onShow: function() {
      if (getTotalIM() > 0) {
        uni.setTabBarBadge({
          index: 2,
          text: "\xB7\xB7\xB7"
        });
      } else {
        uni.removeTabBarBadge({
          index: 2
        });
      }
    }
  };
  const _sfc_main$r = /* @__PURE__ */ Object.assign(__default__$7, {
    setup(__props) {
      const defaultAvatar = "/static/images/default_avatar.png";
      const store2 = useStore();
      const userInfo = vue.computed(() => store2.state.user.userInfo).value;
      const onLogout = () => {
        new Promise((resolve, reject) => {
          removeToken();
          resolve();
        }).then(() => {
          uni.reLaunch({
            url: "/pages/login/index"
          });
        });
      };
      const onUserInfo = () => {
        uni.navigateTo({
          url: "/pages/user/info/index"
        });
      };
      let follows = vue.ref([]);
      let fans = vue.ref([]);
      let getFollowsData = () => {
        getFollows().then((data) => {
          formatAppLog("log", "at pages/user/index.vue:123", "getfollows =", data);
          if (data.data.code === 200) {
            follows.value = data.data.follows;
          }
        });
      };
      let getFansData = () => {
        getFans().then((data) => {
          formatAppLog("log", "at pages/user/index.vue:131", "getfans =", data);
          if (data.data.code === 200) {
            fans.value = data.data.fans;
          }
        });
      };
      const goFollows = () => {
        const userids = [];
        for (let item of follows.value) {
          userids.push(item.follow_id);
        }
        uni.navigateTo({
          url: `/pages/user/info/Follow?type=${0}&userids=${encodeURIComponent(JSON.stringify(userids))}`
        });
      };
      const goFans = () => {
        const userids = [];
        for (let item of fans.value) {
          userids.push(item.user_id);
        }
        uni.navigateTo({
          url: `/pages/user/info/Follow?type=${1}&userids=${encodeURIComponent(JSON.stringify(userids))}`
        });
      };
      let activeIndex = vue.ref(0);
      let publishs = vue.ref([]);
      const getPublishData = () => {
        publishs.value = [];
        getPublish().then((data) => {
          formatAppLog("log", "at pages/user/index.vue:169", "data getPublish=", data);
          if (data.data.code === 200) {
            publishs.value = data.data.data;
          }
        });
      };
      vue.ref([]);
      const getMylikesData = () => {
        publishs.value = [];
        getMylikes().then((data) => {
          formatAppLog("log", "at pages/user/index.vue:181", "data likes=", data);
          if (data.data.code === 200) {
            publishs.value = data.data.data;
          }
        });
      };
      const changeTab = (flag) => {
        activeIndex.value = flag;
      };
      vue.watchEffect(() => {
        if (activeIndex.value === 0) {
          getPublishData();
        } else {
          getMylikesData();
        }
      }, activeIndex.value);
      vue.onMounted(() => {
        getFollowsData();
        getFansData();
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("view", { class: "userinfo-wraper" }, [
          vue.createElementVNode("view", { class: "userinfo" }, [
            vue.createElementVNode("view", {
              class: "avatar-warper",
              onClick: onUserInfo
            }, [
              vue.createElementVNode("image", {
                src: vue.unref(userInfo).avatar ? vue.unref(userInfo).avatar : defaultAvatar,
                class: "avatar"
              }, null, 8, ["src"]),
              !vue.unref(userInfo).avatar ? (vue.openBlock(), vue.createElementBlock("text", {
                key: 0,
                class: "avatar-title"
              }, "\u8BF7\u4E0A\u4F20\u56FE\u7247")) : vue.createCommentVNode("v-if", true)
            ]),
            vue.createElementVNode("view", { class: "userinfo-detail" }, [
              vue.createElementVNode("text", null, "\u7528\u6237\u540D\uFF1A" + vue.toDisplayString(vue.unref(userInfo).username), 1),
              vue.createElementVNode("view", { class: "motto" }, [
                vue.createElementVNode("text", null, "\u7B7E\xA0\xA0\xA0\u540D\uFF1A"),
                vue.createElementVNode("text", null, vue.toDisplayString(vue.unref(userInfo).motto), 1)
              ])
            ])
          ]),
          vue.createElementVNode("view", { class: "fans-wraper" }, [
            vue.createElementVNode("view", {
              class: "follows",
              onClick: goFollows
            }, [
              vue.createElementVNode("text", null, "\u5173\u6CE8"),
              vue.createTextVNode("\xA0"),
              vue.createElementVNode("text", null, vue.toDisplayString(vue.unref(follows).length), 1)
            ]),
            vue.createElementVNode("view", {
              class: "fans",
              onClick: goFans
            }, [
              vue.createElementVNode("text", null, "\u7C89\u4E1D"),
              vue.createTextVNode("\xA0"),
              vue.createElementVNode("text", null, vue.toDisplayString(vue.unref(fans).length), 1)
            ])
          ]),
          vue.createElementVNode("view", { class: "publish-wraper" }, [
            vue.createElementVNode("view", {
              class: "my-publishs",
              onClick: _cache[0] || (_cache[0] = ($event) => changeTab(0))
            }, [
              vue.createElementVNode("text", null, "\u6211\u53D1\u5E03\u7684"),
              vue.createElementVNode("view", {
                class: vue.normalizeClass({ active: vue.unref(activeIndex) === 0 })
              }, null, 2)
            ]),
            vue.createElementVNode("view", {
              class: "my-likes",
              onClick: _cache[1] || (_cache[1] = ($event) => changeTab(1))
            }, [
              vue.createElementVNode("text", null, "\u6211\u559C\u6B22\u7684"),
              vue.createElementVNode("view", {
                class: vue.normalizeClass({ active: vue.unref(activeIndex) === 1 })
              }, null, 2)
            ])
          ]),
          vue.createElementVNode("view", null, [
            vue.createVNode(InfoList, {
              list: vue.unref(publishs),
              activeIndex: vue.unref(activeIndex)
            }, null, 8, ["list", "activeIndex"])
          ]),
          vue.createElementVNode("button", {
            onClick: onLogout,
            style: { "margin-top": "20rpx" }
          }, "\u9000\u51FA"),
          vue.createCommentVNode("v-if", true)
        ]);
      };
    }
  });
  var PagesUserIndex = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["__scopeId", "data-v-4070cfdc"], ["__file", "C:/myself/social/social/src/pages/user/index.vue"]]);
  const _sfc_main$q = {
    name: "uni-easyinput",
    emits: ["click", "iconClick", "update:modelValue", "input", "focus", "blur", "confirm"],
    model: {
      prop: "modelValue",
      event: "update:modelValue"
    },
    props: {
      name: String,
      value: [Number, String],
      modelValue: [Number, String],
      type: {
        type: String,
        default: "text"
      },
      clearable: {
        type: Boolean,
        default: true
      },
      autoHeight: {
        type: Boolean,
        default: false
      },
      placeholder: String,
      placeholderStyle: String,
      focus: {
        type: Boolean,
        default: false
      },
      disabled: {
        type: Boolean,
        default: false
      },
      maxlength: {
        type: [Number, String],
        default: 140
      },
      confirmType: {
        type: String,
        default: "done"
      },
      clearSize: {
        type: [Number, String],
        default: 15
      },
      inputBorder: {
        type: Boolean,
        default: true
      },
      prefixIcon: {
        type: String,
        default: ""
      },
      suffixIcon: {
        type: String,
        default: ""
      },
      trim: {
        type: [Boolean, String],
        default: true
      },
      passwordIcon: {
        type: Boolean,
        default: true
      },
      styles: {
        type: Object,
        default() {
          return {
            color: "#333",
            disableColor: "#F7F6F6",
            borderColor: "#e5e5e5"
          };
        }
      },
      errorMessage: {
        type: [String, Boolean],
        default: ""
      }
    },
    data() {
      return {
        focused: false,
        errMsg: "",
        val: "",
        showMsg: "",
        border: false,
        isFirstBorder: false,
        showClearIcon: false,
        showPassword: false
      };
    },
    computed: {
      msg() {
        return this.errorMessage || this.errMsg;
      },
      inputMaxlength() {
        return Number(this.maxlength);
      }
    },
    watch: {
      value(newVal) {
        if (this.errMsg)
          this.errMsg = "";
        this.val = newVal;
        if (this.form && this.formItem && !this.is_reset) {
          this.is_reset = false;
          this.formItem.setValue(newVal);
        }
      },
      modelValue(newVal) {
        if (this.errMsg)
          this.errMsg = "";
        this.val = newVal;
        if (this.form && this.formItem && !this.is_reset) {
          this.is_reset = false;
          this.formItem.setValue(newVal);
        }
      },
      focus(newVal) {
        this.$nextTick(() => {
          this.focused = this.focus;
        });
      }
    },
    created() {
      if (!this.value) {
        this.val = this.modelValue;
      }
      if (!this.modelValue) {
        this.val = this.value;
      }
      this.form = this.getForm("uniForms");
      this.formItem = this.getForm("uniFormsItem");
      if (this.form && this.formItem) {
        if (this.formItem.name) {
          if (!this.is_reset) {
            this.is_reset = false;
            this.formItem.setValue(this.val);
          }
          this.rename = this.formItem.name;
          this.form.inputChildrens.push(this);
        }
      }
    },
    mounted() {
      this.$nextTick(() => {
        this.focused = this.focus;
      });
    },
    methods: {
      init() {
      },
      onClickIcon(type) {
        this.$emit("iconClick", type);
      },
      getForm(name = "uniForms") {
        let parent = this.$parent;
        let parentName = parent.$options.name;
        while (parentName !== name) {
          parent = parent.$parent;
          if (!parent)
            return false;
          parentName = parent.$options.name;
        }
        return parent;
      },
      onEyes() {
        this.showPassword = !this.showPassword;
      },
      onInput(event) {
        let value = event.detail.value;
        if (this.trim) {
          if (typeof this.trim === "boolean" && this.trim) {
            value = this.trimStr(value);
          }
          if (typeof this.trim === "string") {
            value = this.trimStr(value, this.trim);
          }
        }
        if (this.errMsg)
          this.errMsg = "";
        this.val = value;
        this.$emit("input", value);
        this.$emit("update:modelValue", value);
      },
      onFocus(event) {
        this.$emit("focus", event);
      },
      onBlur(event) {
        event.detail.value;
        this.$emit("blur", event);
      },
      onConfirm(e2) {
        this.$emit("confirm", e2.detail.value);
      },
      onClear(event) {
        this.val = "";
        this.$emit("input", "");
        this.$emit("update:modelValue", "");
      },
      fieldClick() {
        this.$emit("click");
      },
      trimStr(str, pos = "both") {
        if (pos === "both") {
          return str.trim();
        } else if (pos === "left") {
          return str.trimLeft();
        } else if (pos === "right") {
          return str.trimRight();
        } else if (pos === "start") {
          return str.trimStart();
        } else if (pos === "end") {
          return str.trimEnd();
        } else if (pos === "all") {
          return str.replace(/\s+/g, "");
        } else if (pos === "none") {
          return str;
        }
        return str;
      }
    }
  };
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$4);
    return vue.openBlock(), vue.createElementBlock("view", {
      class: vue.normalizeClass(["uni-easyinput", { "uni-easyinput-error": $options.msg }]),
      style: vue.normalizeStyle({ color: $props.inputBorder && $options.msg ? "#e43d33" : $props.styles.color })
    }, [
      vue.createElementVNode("view", {
        class: vue.normalizeClass(["uni-easyinput__content", { "is-input-border": $props.inputBorder, "is-input-error-border": $props.inputBorder && $options.msg, "is-textarea": $props.type === "textarea", "is-disabled": $props.disabled }]),
        style: vue.normalizeStyle({ "border-color": $props.inputBorder && $options.msg ? "#dd524d" : $props.styles.borderColor, "background-color": $props.disabled ? $props.styles.disableColor : "" })
      }, [
        $props.prefixIcon ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
          key: 0,
          class: "content-clear-icon",
          type: $props.prefixIcon,
          color: "#c0c4cc",
          onClick: _cache[0] || (_cache[0] = ($event) => $options.onClickIcon("prefix"))
        }, null, 8, ["type"])) : vue.createCommentVNode("v-if", true),
        $props.type === "textarea" ? (vue.openBlock(), vue.createElementBlock("textarea", {
          key: 1,
          class: vue.normalizeClass(["uni-easyinput__content-textarea", { "input-padding": $props.inputBorder }]),
          name: $props.name,
          value: $data.val,
          placeholder: $props.placeholder,
          placeholderStyle: $props.placeholderStyle,
          disabled: $props.disabled,
          "placeholder-class": "uni-easyinput__placeholder-class",
          maxlength: $options.inputMaxlength,
          focus: $data.focused,
          autoHeight: $props.autoHeight,
          onInput: _cache[1] || (_cache[1] = (...args) => $options.onInput && $options.onInput(...args)),
          onBlur: _cache[2] || (_cache[2] = (...args) => $options.onBlur && $options.onBlur(...args)),
          onFocus: _cache[3] || (_cache[3] = (...args) => $options.onFocus && $options.onFocus(...args)),
          onConfirm: _cache[4] || (_cache[4] = (...args) => $options.onConfirm && $options.onConfirm(...args))
        }, null, 42, ["name", "value", "placeholder", "placeholderStyle", "disabled", "maxlength", "focus", "autoHeight"])) : (vue.openBlock(), vue.createElementBlock("input", {
          key: 2,
          type: $props.type === "password" ? "text" : $props.type,
          class: "uni-easyinput__content-input",
          style: vue.normalizeStyle({
            "padding-right": $props.type === "password" || $props.clearable || $props.prefixIcon ? "" : "10px",
            "padding-left": $props.prefixIcon ? "" : "10px"
          }),
          name: $props.name,
          value: $data.val,
          password: !$data.showPassword && $props.type === "password",
          placeholder: $props.placeholder,
          placeholderStyle: $props.placeholderStyle,
          "placeholder-class": "uni-easyinput__placeholder-class",
          disabled: $props.disabled,
          maxlength: $options.inputMaxlength,
          focus: $data.focused,
          confirmType: $props.confirmType,
          onFocus: _cache[5] || (_cache[5] = (...args) => $options.onFocus && $options.onFocus(...args)),
          onBlur: _cache[6] || (_cache[6] = (...args) => $options.onBlur && $options.onBlur(...args)),
          onInput: _cache[7] || (_cache[7] = (...args) => $options.onInput && $options.onInput(...args)),
          onConfirm: _cache[8] || (_cache[8] = (...args) => $options.onConfirm && $options.onConfirm(...args))
        }, null, 44, ["type", "name", "value", "password", "placeholder", "placeholderStyle", "disabled", "maxlength", "focus", "confirmType"])),
        $props.type === "password" && $props.passwordIcon ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 3 }, [
          $data.val != "" ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
            key: 0,
            class: vue.normalizeClass(["content-clear-icon", { "is-textarea-icon": $props.type === "textarea" }]),
            type: $data.showPassword ? "eye-slash-filled" : "eye-filled",
            size: 18,
            color: "#c0c4cc",
            onClick: $options.onEyes
          }, null, 8, ["class", "type", "onClick"])) : vue.createCommentVNode("v-if", true)
        ], 2112)) : $props.suffixIcon ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 4 }, [
          $props.suffixIcon ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
            key: 0,
            class: "content-clear-icon",
            type: $props.suffixIcon,
            color: "#c0c4cc",
            onClick: _cache[9] || (_cache[9] = ($event) => $options.onClickIcon("suffix"))
          }, null, 8, ["type"])) : vue.createCommentVNode("v-if", true)
        ], 2112)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 5 }, [
          $props.clearable && $data.val && !$props.disabled ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
            key: 0,
            class: vue.normalizeClass(["content-clear-icon", { "is-textarea-icon": $props.type === "textarea" }]),
            type: "clear",
            size: $props.clearSize,
            color: "#c0c4cc",
            onClick: $options.onClear
          }, null, 8, ["class", "size", "onClick"])) : vue.createCommentVNode("v-if", true)
        ], 2112)),
        vue.renderSlot(_ctx.$slots, "right", {}, void 0, true)
      ], 6)
    ], 6);
  }
  var __easycom_0$3 = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$f], ["__scopeId", "data-v-7365cc42"], ["__file", "C:/myself/social/social/src/uni_modules/uni-easyinput/components/uni-easyinput/uni-easyinput.vue"]]);
  const _sfc_main$p = {
    name: "uniFormsItem",
    props: {
      custom: {
        type: Boolean,
        default: false
      },
      showMessage: {
        type: Boolean,
        default: true
      },
      name: String,
      required: Boolean,
      validateTrigger: {
        type: String,
        default: ""
      },
      leftIcon: String,
      iconColor: {
        type: String,
        default: "#606266"
      },
      label: String,
      labelWidth: {
        type: [Number, String],
        default: ""
      },
      labelAlign: {
        type: String,
        default: ""
      },
      labelPosition: {
        type: String,
        default: ""
      },
      errorMessage: {
        type: [String, Boolean],
        default: ""
      },
      rules: {
        type: Array,
        default() {
          return [];
        }
      }
    },
    data() {
      return {
        errorTop: false,
        errorBottom: false,
        labelMarginBottom: "",
        errorWidth: "",
        errMsg: "",
        val: "",
        labelPos: "",
        labelWid: "",
        labelAli: "",
        showMsg: "undertext",
        border: false,
        isFirstBorder: false,
        isArray: false,
        arrayField: ""
      };
    },
    computed: {
      msg() {
        return this.errorMessage || this.errMsg;
      },
      fieldStyle() {
        let style = {};
        if (this.labelPos == "top") {
          style.padding = "0 0";
          this.labelMarginBottom = "6px";
        }
        if (this.labelPos == "left" && this.msg !== false && this.msg != "") {
          style.paddingBottom = "0px";
          this.errorBottom = true;
          this.errorTop = false;
        } else if (this.labelPos == "top" && this.msg !== false && this.msg != "") {
          this.errorBottom = false;
          this.errorTop = true;
        } else {
          this.errorTop = false;
          this.errorBottom = false;
        }
        return style;
      },
      justifyContent() {
        if (this.labelAli === "left")
          return "flex-start";
        if (this.labelAli === "center")
          return "center";
        if (this.labelAli === "right")
          return "flex-end";
      },
      labelLeft() {
        return (this.labelPos === "left" ? parseInt(this.labelWid) : 0) + "px";
      }
    },
    watch: {
      validateTrigger(trigger) {
        this.formTrigger = trigger;
      }
    },
    created() {
      this.form = this.getForm();
      this.group = this.getForm("uniGroup");
      this.formRules = [];
      this.formTrigger = this.validateTrigger;
      if (this.name && this.name.indexOf("[") !== -1 && this.name.indexOf("]") !== -1) {
        this.isArray = true;
        this.arrayField = this.name;
        this.form.formData[this.name] = this.form._getValue(this.name, "");
      }
    },
    mounted() {
      if (this.form) {
        this.form.childrens.push(this);
      }
      this.init();
    },
    unmounted() {
      this.__isUnmounted = true;
      this.unInit();
    },
    methods: {
      init() {
        if (this.form) {
          let { formRules, validator, formData, value, labelPosition, labelWidth, labelAlign, errShowType } = this.form;
          this.labelPos = this.labelPosition ? this.labelPosition : labelPosition;
          if (this.label) {
            this.labelWid = this.labelWidth ? this.labelWidth : labelWidth || 70;
          } else {
            this.labelWid = this.labelWidth ? this.labelWidth : labelWidth || "auto";
          }
          if (this.labelWid && this.labelWid !== "auto") {
            this.labelWid += "px";
          }
          this.labelAli = this.labelAlign ? this.labelAlign : labelAlign;
          if (!this.form.isFirstBorder) {
            this.form.isFirstBorder = true;
            this.isFirstBorder = true;
          }
          if (this.group) {
            if (!this.group.isFirstBorder) {
              this.group.isFirstBorder = true;
              this.isFirstBorder = true;
            }
          }
          this.border = this.form.border;
          this.showMsg = errShowType;
          let name = this.isArray ? this.arrayField : this.name;
          if (!name)
            return;
          if (formRules && this.rules.length > 0) {
            if (!formRules[name]) {
              formRules[name] = {
                rules: this.rules
              };
            }
            validator.updateSchema(formRules);
          }
          this.formRules = formRules[name] || {};
          this.validator = validator;
        } else {
          this.labelPos = this.labelPosition || "left";
          this.labelWid = this.labelWidth || 65;
          this.labelAli = this.labelAlign || "left";
        }
      },
      unInit() {
        if (this.form) {
          this.form.childrens.forEach((item, index) => {
            if (item === this) {
              this.form.childrens.splice(index, 1);
              delete this.form.formData[item.name];
            }
          });
        }
      },
      getForm(name = "uniForms") {
        let parent = this.$parent;
        let parentName = parent.$options.name;
        while (parentName !== name) {
          parent = parent.$parent;
          if (!parent)
            return false;
          parentName = parent.$options.name;
        }
        return parent;
      },
      clearValidate() {
        this.errMsg = "";
      },
      setValue(value) {
        let name = this.isArray ? this.arrayField : this.name;
        if (name) {
          if (this.errMsg)
            this.errMsg = "";
          this.form.formData[name] = this.form._getValue(name, value);
          if (!this.formRules || typeof this.formRules && JSON.stringify(this.formRules) === "{}")
            return;
          this.triggerCheck(this.form._getValue(this.name, value));
        }
      },
      async triggerCheck(value, formTrigger) {
        this.errMsg = "";
        if (!this.validator || Object.keys(this.formRules).length === 0)
          return;
        const isNoField = this.isRequired(this.formRules.rules || []);
        let isTrigger = this.isTrigger(this.formRules.validateTrigger, this.validateTrigger, this.form.validateTrigger);
        let result = null;
        if (!!isTrigger || formTrigger) {
          let name = this.isArray ? this.arrayField : this.name;
          result = await this.validator.validateUpdate({
            [name]: value
          }, this.form.formData);
        }
        if (!isNoField && (value === void 0 || value === "")) {
          result = null;
        }
        const inputComp = this.form.inputChildrens.find((child) => child.rename === this.name);
        if ((isTrigger || formTrigger) && result && result.errorMessage) {
          if (inputComp) {
            inputComp.errMsg = result.errorMessage;
          }
          if (this.form.errShowType === "toast") {
            uni.showToast({
              title: result.errorMessage || "\u6821\u9A8C\u9519\u8BEF",
              icon: "none"
            });
          }
          if (this.form.errShowType === "modal") {
            uni.showModal({
              title: "\u63D0\u793A",
              content: result.errorMessage || "\u6821\u9A8C\u9519\u8BEF"
            });
          }
        } else {
          if (inputComp) {
            inputComp.errMsg = "";
          }
        }
        this.errMsg = !result ? "" : result.errorMessage;
        this.form.validateCheck(result ? result : null);
        return result ? result : null;
      },
      isTrigger(rule, itemRlue, parentRule) {
        if (rule === "submit" || !rule) {
          if (rule === void 0) {
            if (itemRlue !== "bind") {
              if (!itemRlue) {
                return parentRule === "bind" ? true : false;
              }
              return false;
            }
            return true;
          }
          return false;
        }
        return true;
      },
      isRequired(rules) {
        let isNoField = false;
        for (let i2 = 0; i2 < rules.length; i2++) {
          const ruleData = rules[i2];
          if (ruleData.required) {
            isNoField = true;
            break;
          }
        }
        return isNoField;
      }
    }
  };
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$4);
    return vue.openBlock(), vue.createElementBlock("view", {
      class: vue.normalizeClass(["uni-forms-item", { "uni-forms-item--border": $data.border, "is-first-border": $data.border && $data.isFirstBorder, "uni-forms-item-error": $options.msg }])
    }, [
      vue.createElementVNode("view", { class: "uni-forms-item__box" }, [
        vue.createElementVNode("view", {
          class: vue.normalizeClass(["uni-forms-item__inner", ["is-direction-" + $data.labelPos]])
        }, [
          vue.createElementVNode("view", {
            class: "uni-forms-item__label",
            style: vue.normalizeStyle({ width: $data.labelWid, justifyContent: $options.justifyContent })
          }, [
            vue.renderSlot(_ctx.$slots, "label", {}, () => [
              $props.required ? (vue.openBlock(), vue.createElementBlock("text", {
                key: 0,
                class: "is-required"
              }, "*")) : vue.createCommentVNode("v-if", true),
              $props.leftIcon ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
                key: 1,
                class: "label-icon",
                size: "16",
                type: $props.leftIcon,
                color: $props.iconColor
              }, null, 8, ["type", "color"])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("text", { class: "label-text" }, vue.toDisplayString($props.label), 1),
              $props.label ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 2,
                class: "label-seat"
              })) : vue.createCommentVNode("v-if", true)
            ], true)
          ], 4),
          vue.createElementVNode("view", {
            class: vue.normalizeClass(["uni-forms-item__content", { "is-input-error-border": $options.msg }])
          }, [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ], 2)
        ], 2),
        $options.msg ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: vue.normalizeClass(["uni-error-message", { "uni-error-msg--boeder": $data.border }]),
          style: vue.normalizeStyle({
            paddingLeft: $options.labelLeft
          })
        }, [
          vue.createElementVNode("text", { class: "uni-error-message-text" }, vue.toDisplayString($data.showMsg === "undertext" ? $options.msg : ""), 1)
        ], 6)) : vue.createCommentVNode("v-if", true)
      ])
    ], 2);
  }
  var __easycom_0$2 = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$e], ["__scopeId", "data-v-1b20d6ba"], ["__file", "C:/myself/social/social/src/uni_modules/uni-forms/components/uni-forms-item/uni-forms-item.vue"]]);
  var pattern = {
    email: /^\S+?@\S+?\.\S+?$/,
    idcard: /^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/,
    url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", "i")
  };
  const FORMAT_MAPPING = {
    "int": "integer",
    "bool": "boolean",
    "double": "number",
    "long": "number",
    "password": "string"
  };
  function formatMessage(args, resources = "") {
    var defaultMessage = ["label"];
    defaultMessage.forEach((item) => {
      if (args[item] === void 0) {
        args[item] = "";
      }
    });
    let str = resources;
    for (let key in args) {
      let reg = new RegExp("{" + key + "}");
      str = str.replace(reg, args[key]);
    }
    return str;
  }
  function isEmptyValue(value, type) {
    if (value === void 0 || value === null) {
      return true;
    }
    if (typeof value === "string" && !value) {
      return true;
    }
    if (Array.isArray(value) && !value.length) {
      return true;
    }
    if (type === "object" && !Object.keys(value).length) {
      return true;
    }
    return false;
  }
  const types = {
    integer(value) {
      return types.number(value) && parseInt(value, 10) === value;
    },
    string(value) {
      return typeof value === "string";
    },
    number(value) {
      if (isNaN(value)) {
        return false;
      }
      return typeof value === "number";
    },
    "boolean": function(value) {
      return typeof value === "boolean";
    },
    "float": function(value) {
      return types.number(value) && !types.integer(value);
    },
    array(value) {
      return Array.isArray(value);
    },
    object(value) {
      return typeof value === "object" && !types.array(value);
    },
    date(value) {
      return value instanceof Date;
    },
    timestamp(value) {
      if (!this.integer(value) || Math.abs(value).toString().length > 16) {
        return false;
      }
      return true;
    },
    file(value) {
      return typeof value.url === "string";
    },
    email(value) {
      return typeof value === "string" && !!value.match(pattern.email) && value.length < 255;
    },
    url(value) {
      return typeof value === "string" && !!value.match(pattern.url);
    },
    pattern(reg, value) {
      try {
        return new RegExp(reg).test(value);
      } catch (e2) {
        return false;
      }
    },
    method(value) {
      return typeof value === "function";
    },
    idcard(value) {
      return typeof value === "string" && !!value.match(pattern.idcard);
    },
    "url-https"(value) {
      return this.url(value) && value.startsWith("https://");
    },
    "url-scheme"(value) {
      return value.startsWith("://");
    },
    "url-web"(value) {
      return false;
    }
  };
  class RuleValidator {
    constructor(message) {
      this._message = message;
    }
    async validateRule(fieldKey, fieldValue, value, data, allData) {
      var result = null;
      let rules = fieldValue.rules;
      let hasRequired = rules.findIndex((item) => {
        return item.required;
      });
      if (hasRequired < 0) {
        if (value === null || value === void 0) {
          return result;
        }
        if (typeof value === "string" && !value.length) {
          return result;
        }
      }
      var message = this._message;
      if (rules === void 0) {
        return message["default"];
      }
      for (var i2 = 0; i2 < rules.length; i2++) {
        let rule = rules[i2];
        let vt = this._getValidateType(rule);
        Object.assign(rule, {
          label: fieldValue.label || `["${fieldKey}"]`
        });
        if (RuleValidatorHelper[vt]) {
          result = RuleValidatorHelper[vt](rule, value, message);
          if (result != null) {
            break;
          }
        }
        if (rule.validateExpr) {
          let now2 = Date.now();
          let resultExpr = rule.validateExpr(value, allData, now2);
          if (resultExpr === false) {
            result = this._getMessage(rule, rule.errorMessage || this._message["default"]);
            break;
          }
        }
        if (rule.validateFunction) {
          result = await this.validateFunction(rule, value, data, allData, vt);
          if (result !== null) {
            break;
          }
        }
      }
      if (result !== null) {
        result = message.TAG + result;
      }
      return result;
    }
    async validateFunction(rule, value, data, allData, vt) {
      let result = null;
      try {
        let callbackMessage = null;
        const res2 = await rule.validateFunction(rule, value, allData || data, (message) => {
          callbackMessage = message;
        });
        if (callbackMessage || typeof res2 === "string" && res2 || res2 === false) {
          result = this._getMessage(rule, callbackMessage || res2, vt);
        }
      } catch (e2) {
        result = this._getMessage(rule, e2.message, vt);
      }
      return result;
    }
    _getMessage(rule, message, vt) {
      return formatMessage(rule, message || rule.errorMessage || this._message[vt] || message["default"]);
    }
    _getValidateType(rule) {
      var result = "";
      if (rule.required) {
        result = "required";
      } else if (rule.format) {
        result = "format";
      } else if (rule.arrayType) {
        result = "arrayTypeFormat";
      } else if (rule.range) {
        result = "range";
      } else if (rule.maximum !== void 0 || rule.minimum !== void 0) {
        result = "rangeNumber";
      } else if (rule.maxLength !== void 0 || rule.minLength !== void 0) {
        result = "rangeLength";
      } else if (rule.pattern) {
        result = "pattern";
      } else if (rule.validateFunction) {
        result = "validateFunction";
      }
      return result;
    }
  }
  const RuleValidatorHelper = {
    required(rule, value, message) {
      if (rule.required && isEmptyValue(value, rule.format || typeof value)) {
        return formatMessage(rule, rule.errorMessage || message.required);
      }
      return null;
    },
    range(rule, value, message) {
      const {
        range,
        errorMessage
      } = rule;
      let list = new Array(range.length);
      for (let i2 = 0; i2 < range.length; i2++) {
        const item = range[i2];
        if (types.object(item) && item.value !== void 0) {
          list[i2] = item.value;
        } else {
          list[i2] = item;
        }
      }
      let result = false;
      if (Array.isArray(value)) {
        result = new Set(value.concat(list)).size === list.length;
      } else {
        if (list.indexOf(value) > -1) {
          result = true;
        }
      }
      if (!result) {
        return formatMessage(rule, errorMessage || message["enum"]);
      }
      return null;
    },
    rangeNumber(rule, value, message) {
      if (!types.number(value)) {
        return formatMessage(rule, rule.errorMessage || message.pattern.mismatch);
      }
      let {
        minimum,
        maximum,
        exclusiveMinimum,
        exclusiveMaximum
      } = rule;
      let min2 = exclusiveMinimum ? value <= minimum : value < minimum;
      let max2 = exclusiveMaximum ? value >= maximum : value > maximum;
      if (minimum !== void 0 && min2) {
        return formatMessage(rule, rule.errorMessage || message["number"][exclusiveMinimum ? "exclusiveMinimum" : "minimum"]);
      } else if (maximum !== void 0 && max2) {
        return formatMessage(rule, rule.errorMessage || message["number"][exclusiveMaximum ? "exclusiveMaximum" : "maximum"]);
      } else if (minimum !== void 0 && maximum !== void 0 && (min2 || max2)) {
        return formatMessage(rule, rule.errorMessage || message["number"].range);
      }
      return null;
    },
    rangeLength(rule, value, message) {
      if (!types.string(value) && !types.array(value)) {
        return formatMessage(rule, rule.errorMessage || message.pattern.mismatch);
      }
      let min2 = rule.minLength;
      let max2 = rule.maxLength;
      let val = value.length;
      if (min2 !== void 0 && val < min2) {
        return formatMessage(rule, rule.errorMessage || message["length"].minLength);
      } else if (max2 !== void 0 && val > max2) {
        return formatMessage(rule, rule.errorMessage || message["length"].maxLength);
      } else if (min2 !== void 0 && max2 !== void 0 && (val < min2 || val > max2)) {
        return formatMessage(rule, rule.errorMessage || message["length"].range);
      }
      return null;
    },
    pattern(rule, value, message) {
      if (!types["pattern"](rule.pattern, value)) {
        return formatMessage(rule, rule.errorMessage || message.pattern.mismatch);
      }
      return null;
    },
    format(rule, value, message) {
      var customTypes = Object.keys(types);
      var format2 = FORMAT_MAPPING[rule.format] ? FORMAT_MAPPING[rule.format] : rule.format || rule.arrayType;
      if (customTypes.indexOf(format2) > -1) {
        if (!types[format2](value)) {
          return formatMessage(rule, rule.errorMessage || message.typeError);
        }
      }
      return null;
    },
    arrayTypeFormat(rule, value, message) {
      if (!Array.isArray(value)) {
        return formatMessage(rule, rule.errorMessage || message.typeError);
      }
      for (let i2 = 0; i2 < value.length; i2++) {
        const element = value[i2];
        let formatResult = this.format(rule, element, message);
        if (formatResult !== null) {
          return formatResult;
        }
      }
      return null;
    }
  };
  class SchemaValidator extends RuleValidator {
    constructor(schema, options) {
      super(SchemaValidator.message);
      this._schema = schema;
      this._options = options || null;
    }
    updateSchema(schema) {
      this._schema = schema;
    }
    async validate(data, allData) {
      let result = this._checkFieldInSchema(data);
      if (!result) {
        result = await this.invokeValidate(data, false, allData);
      }
      return result.length ? result[0] : null;
    }
    async validateAll(data, allData) {
      let result = this._checkFieldInSchema(data);
      if (!result) {
        result = await this.invokeValidate(data, true, allData);
      }
      return result;
    }
    async validateUpdate(data, allData) {
      let result = this._checkFieldInSchema(data);
      if (!result) {
        result = await this.invokeValidateUpdate(data, false, allData);
      }
      return result.length ? result[0] : null;
    }
    async invokeValidate(data, all, allData) {
      let result = [];
      let schema = this._schema;
      for (let key in schema) {
        let value = schema[key];
        let errorMessage = await this.validateRule(key, value, data[key], data, allData);
        if (errorMessage != null) {
          result.push({
            key,
            errorMessage
          });
          if (!all)
            break;
        }
      }
      return result;
    }
    async invokeValidateUpdate(data, all, allData) {
      let result = [];
      for (let key in data) {
        let errorMessage = await this.validateRule(key, this._schema[key], data[key], data, allData);
        if (errorMessage != null) {
          result.push({
            key,
            errorMessage
          });
          if (!all)
            break;
        }
      }
      return result;
    }
    _checkFieldInSchema(data) {
      var keys2 = Object.keys(data);
      var keys22 = Object.keys(this._schema);
      if (new Set(keys2.concat(keys22)).size === keys22.length) {
        return "";
      }
      var noExistFields = keys2.filter((key) => {
        return keys22.indexOf(key) < 0;
      });
      var errorMessage = formatMessage({
        field: JSON.stringify(noExistFields)
      }, SchemaValidator.message.TAG + SchemaValidator.message["defaultInvalid"]);
      return [{
        key: "invalid",
        errorMessage
      }];
    }
  }
  function Message() {
    return {
      TAG: "",
      default: "\u9A8C\u8BC1\u9519\u8BEF",
      defaultInvalid: "\u63D0\u4EA4\u7684\u5B57\u6BB5{field}\u5728\u6570\u636E\u5E93\u4E2D\u5E76\u4E0D\u5B58\u5728",
      validateFunction: "\u9A8C\u8BC1\u65E0\u6548",
      required: "{label}\u5FC5\u586B",
      "enum": "{label}\u8D85\u51FA\u8303\u56F4",
      timestamp: "{label}\u683C\u5F0F\u65E0\u6548",
      whitespace: "{label}\u4E0D\u80FD\u4E3A\u7A7A",
      typeError: "{label}\u7C7B\u578B\u65E0\u6548",
      date: {
        format: "{label}\u65E5\u671F{value}\u683C\u5F0F\u65E0\u6548",
        parse: "{label}\u65E5\u671F\u65E0\u6CD5\u89E3\u6790,{value}\u65E0\u6548",
        invalid: "{label}\u65E5\u671F{value}\u65E0\u6548"
      },
      length: {
        minLength: "{label}\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E{minLength}",
        maxLength: "{label}\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7{maxLength}",
        range: "{label}\u5FC5\u987B\u4ECB\u4E8E{minLength}\u548C{maxLength}\u4E4B\u95F4"
      },
      number: {
        minimum: "{label}\u4E0D\u80FD\u5C0F\u4E8E{minimum}",
        maximum: "{label}\u4E0D\u80FD\u5927\u4E8E{maximum}",
        exclusiveMinimum: "{label}\u4E0D\u80FD\u5C0F\u4E8E\u7B49\u4E8E{minimum}",
        exclusiveMaximum: "{label}\u4E0D\u80FD\u5927\u4E8E\u7B49\u4E8E{maximum}",
        range: "{label}\u5FC5\u987B\u4ECB\u4E8E{minimum}and{maximum}\u4E4B\u95F4"
      },
      pattern: {
        mismatch: "{label}\u683C\u5F0F\u4E0D\u5339\u914D"
      }
    };
  }
  SchemaValidator.message = new Message();
  const _sfc_main$o = {
    name: "uniForms",
    components: {},
    emits: ["input", "reset", "validate", "submit"],
    props: {
      value: {
        type: Object,
        default() {
          return {};
        }
      },
      modelValue: {
        type: Object,
        default() {
          return {};
        }
      },
      rules: {
        type: Object,
        default() {
          return {};
        }
      },
      validateTrigger: {
        type: String,
        default: ""
      },
      labelPosition: {
        type: String,
        default: "left"
      },
      labelWidth: {
        type: [String, Number],
        default: ""
      },
      labelAlign: {
        type: String,
        default: "left"
      },
      errShowType: {
        type: String,
        default: "undertext"
      },
      border: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        formData: {}
      };
    },
    computed: {
      dataValue() {
        if (JSON.stringify(this.modelValue) === "{}") {
          return this.value;
        } else {
          return this.modelValue;
        }
      }
    },
    watch: {
      rules(newVal) {
        this.init(newVal);
      },
      labelPosition() {
        this.childrens.forEach((vm) => {
          vm.init();
        });
      }
    },
    created() {
      let getbinddata = getApp().$vm.$.appContext.config.globalProperties.binddata;
      if (!getbinddata) {
        getApp().$vm.$.appContext.config.globalProperties.binddata = function(name, value, formName) {
          if (formName) {
            this.$refs[formName].setValue(name, value);
          } else {
            let formVm;
            for (let i2 in this.$refs) {
              const vm = this.$refs[i2];
              if (vm && vm.$options && vm.$options.name === "uniForms") {
                formVm = vm;
                break;
              }
            }
            if (!formVm)
              return formatAppLog("error", "at uni_modules/uni-forms/components/uni-forms/uni-forms.vue:152", "\u5F53\u524D uni-froms \u7EC4\u4EF6\u7F3A\u5C11 ref \u5C5E\u6027");
            formVm.setValue(name, value);
          }
        };
      }
      this.unwatchs = [];
      this.childrens = [];
      this.inputChildrens = [];
      this.checkboxChildrens = [];
      this.formRules = [];
      this.init(this.rules);
    },
    methods: {
      init(formRules) {
        if (Object.keys(formRules).length === 0) {
          this.formData = this.dataValue;
          return;
        }
        this.formRules = formRules;
        this.validator = new SchemaValidator(formRules);
        this.registerWatch();
      },
      registerWatch() {
        this.unwatchs.forEach((v) => v());
        this.childrens.forEach((v) => {
          v.init();
        });
        Object.keys(this.dataValue).forEach((key) => {
          let watch = this.$watch("dataValue." + key, (value) => {
            if (!value)
              return;
            if (value.toString() === "[object Object]") {
              for (let i2 in value) {
                let name = `${key}[${i2}]`;
                this.formData[name] = this._getValue(name, value[i2]);
              }
            } else {
              this.formData[key] = this._getValue(key, value);
            }
          }, {
            deep: true,
            immediate: true
          });
          this.unwatchs.push(watch);
        });
      },
      setRules(formRules) {
        this.init(formRules);
      },
      setValue(name, value, callback) {
        let example = this.childrens.find((child) => child.name === name);
        if (!example)
          return null;
        value = this._getValue(example.name, value);
        this.formData[name] = value;
        example.val = value;
        return example.triggerCheck(value, callback);
      },
      resetForm(event) {
        this.childrens.forEach((item) => {
          item.errMsg = "";
          const inputComp = this.inputChildrens.find((child) => child.rename === item.name);
          if (inputComp) {
            inputComp.errMsg = "";
            inputComp.is_reset = true;
            inputComp.$emit("input", inputComp.multiple ? [] : "");
            inputComp.$emit("update:modelValue", inputComp.multiple ? [] : "");
          }
        });
        this.childrens.forEach((item) => {
          if (item.name) {
            this.formData[item.name] = this._getValue(item.name, "");
          }
        });
        this.$emit("reset", event);
      },
      validateCheck(validate) {
        if (validate === null)
          validate = null;
        this.$emit("validate", validate);
      },
      async validateAll(invalidFields, type, keepitem, callback) {
        let childrens = [];
        for (let i2 in invalidFields) {
          const item = this.childrens.find((v) => v.name === i2);
          if (item) {
            childrens.push(item);
          }
        }
        if (!callback && typeof keepitem === "function") {
          callback = keepitem;
        }
        let promise;
        if (!callback && typeof callback !== "function" && Promise) {
          promise = new Promise((resolve, reject) => {
            callback = function(valid, invalidFields2) {
              !valid ? resolve(invalidFields2) : reject(valid);
            };
          });
        }
        let results = [];
        let newFormData = {};
        if (this.validator) {
          for (let key in childrens) {
            const child = childrens[key];
            let name = child.isArray ? child.arrayField : child.name;
            if (child.isArray) {
              if (child.name.indexOf("[") !== -1 && child.name.indexOf("]") !== -1) {
                const fieldData = child.name.split("[");
                const fieldName = fieldData[0];
                const fieldValue = fieldData[1].replace("]", "");
                if (!newFormData[fieldName]) {
                  newFormData[fieldName] = {};
                }
                newFormData[fieldName][fieldValue] = this._getValue(name, invalidFields[name]);
              }
            } else {
              newFormData[name] = this._getValue(name, invalidFields[name]);
            }
            const result = await child.triggerCheck(invalidFields[name], true);
            if (result) {
              results.push(result);
              if (this.errShowType === "toast" || this.errShowType === "modal")
                break;
            }
          }
        } else {
          newFormData = invalidFields;
        }
        if (Array.isArray(results)) {
          if (results.length === 0)
            results = null;
        }
        if (Array.isArray(keepitem)) {
          keepitem.forEach((v) => {
            newFormData[v] = this.dataValue[v];
          });
        }
        if (type === "submit") {
          this.$emit("submit", {
            detail: {
              value: newFormData,
              errors: results
            }
          });
        } else {
          this.$emit("validate", results);
        }
        callback && typeof callback === "function" && callback(results, newFormData);
        if (promise && callback) {
          return promise;
        } else {
          return null;
        }
      },
      submitForm() {
      },
      submit(keepitem, callback, type) {
        for (let i2 in this.dataValue) {
          const itemData = this.childrens.find((v) => v.name === i2);
          if (itemData) {
            if (this.formData[i2] === void 0) {
              this.formData[i2] = this._getValue(i2, this.dataValue[i2]);
            }
          }
        }
        if (!type) {
          formatAppLog("warn", "at uni_modules/uni-forms/components/uni-forms/uni-forms.vue:371", "submit \u65B9\u6CD5\u5373\u5C06\u5E9F\u5F03\uFF0C\u8BF7\u4F7F\u7528validate\u65B9\u6CD5\u4EE3\u66FF\uFF01");
        }
        return this.validateAll(this.formData, "submit", keepitem, callback);
      },
      validate(keepitem, callback) {
        return this.submit(keepitem, callback, true);
      },
      validateField(props, callback) {
        props = [].concat(props);
        let invalidFields = {};
        this.childrens.forEach((item) => {
          if (props.indexOf(item.name) !== -1) {
            invalidFields = Object.assign({}, invalidFields, {
              [item.name]: this.formData[item.name]
            });
          }
        });
        return this.validateAll(invalidFields, "submit", [], callback);
      },
      resetFields() {
        this.resetForm();
      },
      clearValidate(props) {
        props = [].concat(props);
        this.childrens.forEach((item) => {
          const inputComp = this.inputChildrens.find((child) => child.rename === item.name);
          if (props.length === 0) {
            item.errMsg = "";
            if (inputComp) {
              inputComp.errMsg = "";
            }
          } else {
            if (props.indexOf(item.name) !== -1) {
              item.errMsg = "";
              if (inputComp) {
                inputComp.errMsg = "";
              }
            }
          }
        });
      },
      _getValue(key, value) {
        const rules = this.formRules[key] && this.formRules[key].rules || [];
        const isRuleNum = rules.find((val) => val.format && this.type_filter(val.format));
        const isRuleBool = rules.find((val) => val.format && val.format === "boolean" || val.format === "bool");
        if (isRuleNum) {
          value = isNaN(value) ? value : value === "" || value === null ? null : Number(value);
        }
        if (isRuleBool) {
          value = !value ? false : true;
        }
        return value;
      },
      type_filter(format2) {
        return format2 === "int" || format2 === "double" || format2 === "number" || format2 === "timestamp";
      }
    }
  };
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", {
      class: vue.normalizeClass(["uni-forms", { "uni-forms--top": !$props.border }])
    }, [
      vue.createElementVNode("form", {
        onSubmit: _cache[0] || (_cache[0] = vue.withModifiers((...args) => $options.submitForm && $options.submitForm(...args), ["stop"])),
        onReset: _cache[1] || (_cache[1] = (...args) => $options.resetForm && $options.resetForm(...args))
      }, [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ], 32)
    ], 2);
  }
  var __easycom_1 = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$d], ["__scopeId", "data-v-cfbe766e"], ["__file", "C:/myself/social/social/src/uni_modules/uni-forms/components/uni-forms/uni-forms.vue"]]);
  function getAugmentedNamespace(n2) {
    if (n2.__esModule)
      return n2;
    var a = Object.defineProperty({}, "__esModule", { value: true });
    Object.keys(n2).forEach(function(k) {
      var d = Object.getOwnPropertyDescriptor(n2, k);
      Object.defineProperty(a, k, d.get ? d : {
        enumerable: true,
        get: function() {
          return n2[k];
        }
      });
    });
    return a;
  }
  var shams = function hasSymbols2() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = shams;
  var hasSymbols$1 = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var slice = Array.prototype.slice;
  var toStr$1 = Object.prototype.toString;
  var funcType = "[object Function]";
  var implementation$1 = function bind2(that) {
    var target = this;
    if (typeof target !== "function" || toStr$1.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, args.concat(slice.call(arguments)));
        if (Object(result) === result) {
          return result;
        }
        return this;
      } else {
        return target.apply(that, args.concat(slice.call(arguments)));
      }
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i2 = 0; i2 < boundLength; i2++) {
      boundArgs.push("$" + i2);
    }
    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty2() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound;
  };
  var implementation = implementation$1;
  var functionBind = Function.prototype.bind || implementation;
  var bind$1 = functionBind;
  var src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);
  var undefined$1;
  var $SyntaxError = SyntaxError;
  var $Function = Function;
  var $TypeError$1 = TypeError;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e2) {
    }
  };
  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
    try {
      $gOPD({}, "");
    } catch (e2) {
      $gOPD = null;
    }
  }
  var throwTypeError = function() {
    throw new $TypeError$1();
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols = hasSymbols$1();
  var getProto = Object.getPrototypeOf || function(x) {
    return x.__proto__;
  };
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" ? undefined$1 : getProto(Uint8Array);
  var INTRINSICS = {
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined$1,
    "%AsyncFromSyncIteratorPrototype%": undefined$1,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": Error,
    "%eval%": eval,
    "%EvalError%": EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
    "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined$1 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
    "%RangeError%": RangeError,
    "%ReferenceError%": ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined$1 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined$1,
    "%Symbol%": hasSymbols ? Symbol : undefined$1,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError$1,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
    "%URIError%": URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet
  };
  var doEval = function doEval2(name) {
    var value;
    if (name === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name === "%AsyncGenerator%") {
      var fn = doEval2("%AsyncGeneratorFunction%");
      if (fn) {
        value = fn.prototype;
      }
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval2("%AsyncGenerator%");
      if (gen) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind = functionBind;
  var hasOwn$2 = src;
  var $concat$1 = bind.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
  var $replace$1 = bind.call(Function.call, String.prototype.replace);
  var $strSlice = bind.call(Function.call, String.prototype.slice);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath2(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace$1(string, rePropName, function(match, number, quote2, subString) {
      result[result.length] = quote2 ? $replace$1(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn$2(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn$2(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError$1("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
  };
  var getIntrinsic = function GetIntrinsic2(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) {
      throw new $TypeError$1("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError$1('"allowMissing" argument must be a boolean');
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat$1([0, 1], alias));
    }
    for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
      var part = parts[i2];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn$2(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError$1("base intrinsic for " + name + " exists, but the property is not available.");
          }
          return void 0;
        }
        if ($gOPD && i2 + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn$2(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
  var callBind$1 = { exports: {} };
  (function(module2) {
    var bind2 = functionBind;
    var GetIntrinsic2 = getIntrinsic;
    var $apply = GetIntrinsic2("%Function.prototype.apply%");
    var $call = GetIntrinsic2("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic2("%Reflect.apply%", true) || bind2.call($call, $apply);
    var $gOPD2 = GetIntrinsic2("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic2("%Object.defineProperty%", true);
    var $max = GetIntrinsic2("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e2) {
        $defineProperty = null;
      }
    }
    module2.exports = function callBind2(originalFunction) {
      var func = $reflectApply(bind2, $call, arguments);
      if ($gOPD2 && $defineProperty) {
        var desc = $gOPD2(func, "length");
        if (desc.configurable) {
          $defineProperty(func, "length", { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) });
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind2, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  })(callBind$1);
  var GetIntrinsic$1 = getIntrinsic;
  var callBind = callBind$1.exports;
  var $indexOf = callBind(GetIntrinsic$1("String.prototype.indexOf"));
  var callBound$1 = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic$1(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
      return callBind(intrinsic);
    }
    return intrinsic;
  };
  var __viteBrowserExternal = new Proxy({}, {
    get() {
      throw new Error('Module "" has been externalized for browser compatibility and cannot be accessed in client code.');
    }
  });
  var __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    [Symbol.toStringTag]: "Module",
    "default": __viteBrowserExternal
  });
  var require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
  var hasMap = typeof Map === "function" && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === "function" && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice = String.prototype.slice;
  var $replace = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor = Math.floor;
  var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
  var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
    return O.__proto__;
  } : null);
  function addNumericSeparator(num, str) {
    if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
      return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
      var int = num < 0 ? -$floor(-num) : $floor(num);
      if (int !== num) {
        var intStr = String(int);
        var dec = $slice.call(str, intStr.length + 1);
        return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
      }
    }
    return $replace.call(str, sepRegex, "$&_");
  }
  var inspectCustom = require$$0.custom;
  var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;
  var objectInspect = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has$3(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
      throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (has$3(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
      throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has$3(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
      throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
    }
    if (has$3(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
      throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has$3(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
      throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") {
      return "undefined";
    }
    if (obj === null) {
      return "null";
    }
    if (typeof obj === "boolean") {
      return obj ? "true" : "false";
    }
    if (typeof obj === "string") {
      return inspectString(obj, opts);
    }
    if (typeof obj === "number") {
      if (obj === 0) {
        return Infinity / obj > 0 ? "0" : "-0";
      }
      var str = String(obj);
      return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
      var bigIntStr = String(obj) + "n";
      return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") {
      depth = 0;
    }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
      return isArray$5(obj) ? "[Array]" : "[Object]";
    }
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") {
      seen = [];
    } else if (indexOf$1(seen, obj) >= 0) {
      return "[Circular]";
    }
    function inspect2(value, from2, noIndent) {
      if (from2) {
        seen = $arrSlice.call(seen);
        seen.push(from2);
      }
      if (noIndent) {
        var newOpts = {
          depth: opts.depth
        };
        if (has$3(opts, "quoteStyle")) {
          newOpts.quoteStyle = opts.quoteStyle;
        }
        return inspect_(value, newOpts, depth + 1, seen);
      }
      return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function") {
      var name = nameOf(obj);
      var keys2 = arrObjKeys(obj, inspect2);
      return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys2.length > 0 ? " { " + $join.call(keys2, ", ") + " }" : "");
    }
    if (isSymbol(obj)) {
      var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
      return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
      var s = "<" + $toLowerCase.call(String(obj.nodeName));
      var attrs = obj.attributes || [];
      for (var i2 = 0; i2 < attrs.length; i2++) {
        s += " " + attrs[i2].name + "=" + wrapQuotes(quote(attrs[i2].value), "double", opts);
      }
      s += ">";
      if (obj.childNodes && obj.childNodes.length) {
        s += "...";
      }
      s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
      return s;
    }
    if (isArray$5(obj)) {
      if (obj.length === 0) {
        return "[]";
      }
      var xs = arrObjKeys(obj, inspect2);
      if (indent && !singleLineValues(xs)) {
        return "[" + indentedJoin(xs, indent) + "]";
      }
      return "[ " + $join.call(xs, ", ") + " ]";
    }
    if (isError(obj)) {
      var parts = arrObjKeys(obj, inspect2);
      if ("cause" in obj && !isEnumerable.call(obj, "cause")) {
        return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect2(obj.cause), parts), ", ") + " }";
      }
      if (parts.length === 0) {
        return "[" + String(obj) + "]";
      }
      return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] === "function") {
        return obj[inspectSymbol]();
      } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
        return obj.inspect();
      }
    }
    if (isMap(obj)) {
      var mapParts = [];
      mapForEach.call(obj, function(value, key) {
        mapParts.push(inspect2(key, obj, true) + " => " + inspect2(value, obj));
      });
      return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
      var setParts = [];
      setForEach.call(obj, function(value) {
        setParts.push(inspect2(value, obj));
      });
      return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
      return weakCollectionOf("WeakMap");
    }
    if (isWeakSet(obj)) {
      return weakCollectionOf("WeakSet");
    }
    if (isWeakRef(obj)) {
      return weakCollectionOf("WeakRef");
    }
    if (isNumber$1(obj)) {
      return markBoxed(inspect2(Number(obj)));
    }
    if (isBigInt(obj)) {
      return markBoxed(inspect2(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
      return markBoxed(booleanValueOf.call(obj));
    }
    if (isString$1(obj)) {
      return markBoxed(inspect2(String(obj)));
    }
    if (!isDate$1(obj) && !isRegExp$1(obj)) {
      var ys = arrObjKeys(obj, inspect2);
      var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
      var protoTag = obj instanceof Object ? "" : "null prototype";
      var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
      var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
      var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
      if (ys.length === 0) {
        return tag + "{}";
      }
      if (indent) {
        return tag + "{" + indentedJoin(ys, indent) + "}";
      }
      return tag + "{ " + $join.call(ys, ", ") + " }";
    }
    return String(obj);
  };
  function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s + quoteChar;
  }
  function quote(s) {
    return $replace.call(String(s), /"/g, "&quot;");
  }
  function isArray$5(obj) {
    return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isDate$1(obj) {
    return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isRegExp$1(obj) {
    return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isError(obj) {
    return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isString$1(obj) {
    return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isNumber$1(obj) {
    return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isBoolean(obj) {
    return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isSymbol(obj) {
    if (hasShammedSymbols) {
      return obj && typeof obj === "object" && obj instanceof Symbol;
    }
    if (typeof obj === "symbol") {
      return true;
    }
    if (!obj || typeof obj !== "object" || !symToString) {
      return false;
    }
    try {
      symToString.call(obj);
      return true;
    } catch (e2) {
    }
    return false;
  }
  function isBigInt(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) {
      return false;
    }
    try {
      bigIntValueOf.call(obj);
      return true;
    } catch (e2) {
    }
    return false;
  }
  var hasOwn$1 = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
  };
  function has$3(obj, key) {
    return hasOwn$1.call(obj, key);
  }
  function toStr(obj) {
    return objectToString.call(obj);
  }
  function nameOf(f) {
    if (f.name) {
      return f.name;
    }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) {
      return m[1];
    }
    return null;
  }
  function indexOf$1(xs, x) {
    if (xs.indexOf) {
      return xs.indexOf(x);
    }
    for (var i2 = 0, l = xs.length; i2 < l; i2++) {
      if (xs[i2] === x) {
        return i2;
      }
    }
    return -1;
  }
  function isMap(x) {
    if (!mapSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      mapSize.call(x);
      try {
        setSize.call(x);
      } catch (s) {
        return true;
      }
      return x instanceof Map;
    } catch (e2) {
    }
    return false;
  }
  function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakMapHas.call(x, weakMapHas);
      try {
        weakSetHas.call(x, weakSetHas);
      } catch (s) {
        return true;
      }
      return x instanceof WeakMap;
    } catch (e2) {
    }
    return false;
  }
  function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakRefDeref.call(x);
      return true;
    } catch (e2) {
    }
    return false;
  }
  function isSet(x) {
    if (!setSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      setSize.call(x);
      try {
        mapSize.call(x);
      } catch (m) {
        return true;
      }
      return x instanceof Set;
    } catch (e2) {
    }
    return false;
  }
  function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakSetHas.call(x, weakSetHas);
      try {
        weakMapHas.call(x, weakMapHas);
      } catch (s) {
        return true;
      }
      return x instanceof WeakSet;
    } catch (e2) {
    }
    return false;
  }
  function isElement(x) {
    if (!x || typeof x !== "object") {
      return false;
    }
    if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
      return true;
    }
    return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
  }
  function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength;
      var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
      return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, "single", opts);
  }
  function lowbyte(c) {
    var n2 = c.charCodeAt(0);
    var x = {
      8: "b",
      9: "t",
      10: "n",
      12: "f",
      13: "r"
    }[n2];
    if (x) {
      return "\\" + x;
    }
    return "\\x" + (n2 < 16 ? "0" : "") + $toUpperCase.call(n2.toString(16));
  }
  function markBoxed(str) {
    return "Object(" + str + ")";
  }
  function weakCollectionOf(type) {
    return type + " { ? }";
  }
  function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type + " (" + size + ") {" + joinedEntries + "}";
  }
  function singleLineValues(xs) {
    for (var i2 = 0; i2 < xs.length; i2++) {
      if (indexOf$1(xs[i2], "\n") >= 0) {
        return false;
      }
    }
    return true;
  }
  function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === "	") {
      baseIndent = "	";
    } else if (typeof opts.indent === "number" && opts.indent > 0) {
      baseIndent = $join.call(Array(opts.indent + 1), " ");
    } else {
      return null;
    }
    return {
      base: baseIndent,
      prev: $join.call(Array(depth + 1), baseIndent)
    };
  }
  function indentedJoin(xs, indent) {
    if (xs.length === 0) {
      return "";
    }
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
  }
  function arrObjKeys(obj, inspect2) {
    var isArr = isArray$5(obj);
    var xs = [];
    if (isArr) {
      xs.length = obj.length;
      for (var i2 = 0; i2 < obj.length; i2++) {
        xs[i2] = has$3(obj, i2) ? inspect2(obj[i2], obj) : "";
      }
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
      symMap = {};
      for (var k = 0; k < syms.length; k++) {
        symMap["$" + syms[k]] = syms[k];
      }
    }
    for (var key in obj) {
      if (!has$3(obj, key)) {
        continue;
      }
      if (isArr && String(Number(key)) === key && key < obj.length) {
        continue;
      }
      if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
        continue;
      } else if ($test.call(/[^\w$]/, key)) {
        xs.push(inspect2(key, obj) + ": " + inspect2(obj[key], obj));
      } else {
        xs.push(key + ": " + inspect2(obj[key], obj));
      }
    }
    if (typeof gOPS === "function") {
      for (var j = 0; j < syms.length; j++) {
        if (isEnumerable.call(obj, syms[j])) {
          xs.push("[" + inspect2(syms[j]) + "]: " + inspect2(obj[syms[j]], obj));
        }
      }
    }
    return xs;
  }
  var GetIntrinsic = getIntrinsic;
  var callBound = callBound$1;
  var inspect$1 = objectInspect;
  var $TypeError = GetIntrinsic("%TypeError%");
  var $WeakMap = GetIntrinsic("%WeakMap%", true);
  var $Map = GetIntrinsic("%Map%", true);
  var $weakMapGet = callBound("WeakMap.prototype.get", true);
  var $weakMapSet = callBound("WeakMap.prototype.set", true);
  var $weakMapHas = callBound("WeakMap.prototype.has", true);
  var $mapGet = callBound("Map.prototype.get", true);
  var $mapSet = callBound("Map.prototype.set", true);
  var $mapHas = callBound("Map.prototype.has", true);
  var listGetNode = function(list, key) {
    for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
      if (curr.key === key) {
        prev.next = curr.next;
        curr.next = list.next;
        list.next = curr;
        return curr;
      }
    }
  };
  var listGet = function(objects, key) {
    var node = listGetNode(objects, key);
    return node && node.value;
  };
  var listSet = function(objects, key, value) {
    var node = listGetNode(objects, key);
    if (node) {
      node.value = value;
    } else {
      objects.next = {
        key,
        next: objects.next,
        value
      };
    }
  };
  var listHas = function(objects, key) {
    return !!listGetNode(objects, key);
  };
  var sideChannel = function getSideChannel2() {
    var $wm;
    var $m;
    var $o;
    var channel = {
      assert: function(key) {
        if (!channel.has(key)) {
          throw new $TypeError("Side channel does not contain " + inspect$1(key));
        }
      },
      get: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapGet($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapGet($m, key);
          }
        } else {
          if ($o) {
            return listGet($o, key);
          }
        }
      },
      has: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapHas($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapHas($m, key);
          }
        } else {
          if ($o) {
            return listHas($o, key);
          }
        }
        return false;
      },
      set: function(key, value) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if (!$wm) {
            $wm = new $WeakMap();
          }
          $weakMapSet($wm, key, value);
        } else if ($Map) {
          if (!$m) {
            $m = new $Map();
          }
          $mapSet($m, key, value);
        } else {
          if (!$o) {
            $o = { key: {}, next: null };
          }
          listSet($o, key, value);
        }
      }
    };
    return channel;
  };
  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;
  var Format = {
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
  };
  var formats$3 = {
    "default": Format.RFC3986,
    formatters: {
      RFC1738: function(value) {
        return replace.call(value, percentTwenties, "+");
      },
      RFC3986: function(value) {
        return String(value);
      }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
  };
  var formats$2 = formats$3;
  var has$2 = Object.prototype.hasOwnProperty;
  var isArray$4 = Array.isArray;
  var hexTable = function() {
    var array = [];
    for (var i2 = 0; i2 < 256; ++i2) {
      array.push("%" + ((i2 < 16 ? "0" : "") + i2.toString(16)).toUpperCase());
    }
    return array;
  }();
  var compactQueue = function compactQueue2(queue) {
    while (queue.length > 1) {
      var item = queue.pop();
      var obj = item.obj[item.prop];
      if (isArray$4(obj)) {
        var compacted = [];
        for (var j = 0; j < obj.length; ++j) {
          if (typeof obj[j] !== "undefined") {
            compacted.push(obj[j]);
          }
        }
        item.obj[item.prop] = compacted;
      }
    }
  };
  var arrayToObject = function arrayToObject2(source, options) {
    var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
    for (var i2 = 0; i2 < source.length; ++i2) {
      if (typeof source[i2] !== "undefined") {
        obj[i2] = source[i2];
      }
    }
    return obj;
  };
  var merge = function merge2(target, source, options) {
    if (!source) {
      return target;
    }
    if (typeof source !== "object") {
      if (isArray$4(target)) {
        target.push(source);
      } else if (target && typeof target === "object") {
        if (options && (options.plainObjects || options.allowPrototypes) || !has$2.call(Object.prototype, source)) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }
      return target;
    }
    if (!target || typeof target !== "object") {
      return [target].concat(source);
    }
    var mergeTarget = target;
    if (isArray$4(target) && !isArray$4(source)) {
      mergeTarget = arrayToObject(target, options);
    }
    if (isArray$4(target) && isArray$4(source)) {
      source.forEach(function(item, i2) {
        if (has$2.call(target, i2)) {
          var targetItem = target[i2];
          if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
            target[i2] = merge2(targetItem, item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i2] = item;
        }
      });
      return target;
    }
    return Object.keys(source).reduce(function(acc, key) {
      var value = source[key];
      if (has$2.call(acc, key)) {
        acc[key] = merge2(acc[key], value, options);
      } else {
        acc[key] = value;
      }
      return acc;
    }, mergeTarget);
  };
  var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
      acc[key] = source[key];
      return acc;
    }, target);
  };
  var decode = function(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") {
      return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    try {
      return decodeURIComponent(strWithoutPlus);
    } catch (e2) {
      return strWithoutPlus;
    }
  };
  var encode = function encode2(str, defaultEncoder, charset, kind, format2) {
    if (str.length === 0) {
      return str;
    }
    var string = str;
    if (typeof str === "symbol") {
      string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== "string") {
      string = String(str);
    }
    if (charset === "iso-8859-1") {
      return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
      });
    }
    var out = "";
    for (var i2 = 0; i2 < string.length; ++i2) {
      var c = string.charCodeAt(i2);
      if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format2 === formats$2.RFC1738 && (c === 40 || c === 41)) {
        out += string.charAt(i2);
        continue;
      }
      if (c < 128) {
        out = out + hexTable[c];
        continue;
      }
      if (c < 2048) {
        out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
        continue;
      }
      if (c < 55296 || c >= 57344) {
        out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
        continue;
      }
      i2 += 1;
      c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i2) & 1023);
      out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
    }
    return out;
  };
  var compact = function compact2(value) {
    var queue = [{ obj: { o: value }, prop: "o" }];
    var refs = [];
    for (var i2 = 0; i2 < queue.length; ++i2) {
      var item = queue[i2];
      var obj = item.obj[item.prop];
      var keys2 = Object.keys(obj);
      for (var j = 0; j < keys2.length; ++j) {
        var key = keys2[j];
        var val = obj[key];
        if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
          queue.push({ obj, prop: key });
          refs.push(val);
        }
      }
    }
    compactQueue(queue);
    return value;
  };
  var isRegExp = function isRegExp2(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isBuffer = function isBuffer2(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };
  var combine = function combine2(a, b) {
    return [].concat(a, b);
  };
  var maybeMap = function maybeMap2(val, fn) {
    if (isArray$4(val)) {
      var mapped = [];
      for (var i2 = 0; i2 < val.length; i2 += 1) {
        mapped.push(fn(val[i2]));
      }
      return mapped;
    }
    return fn(val);
  };
  var utils$2 = {
    arrayToObject,
    assign,
    combine,
    compact,
    decode,
    encode,
    isBuffer,
    isRegExp,
    maybeMap,
    merge
  };
  var getSideChannel = sideChannel;
  var utils$1 = utils$2;
  var formats$1 = formats$3;
  var has$1 = Object.prototype.hasOwnProperty;
  var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
      return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key) {
      return prefix + "[" + key + "]";
    },
    repeat: function repeat(prefix) {
      return prefix;
    }
  };
  var isArray$3 = Array.isArray;
  var split = String.prototype.split;
  var push = Array.prototype.push;
  var pushToArray = function(arr, valueOrArray) {
    push.apply(arr, isArray$3(valueOrArray) ? valueOrArray : [valueOrArray]);
  };
  var toISO = Date.prototype.toISOString;
  var defaultFormat = formats$1["default"];
  var defaults$2 = {
    addQueryPrefix: false,
    allowDots: false,
    charset: "utf-8",
    charsetSentinel: false,
    delimiter: "&",
    encode: true,
    encoder: utils$1.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats$1.formatters[defaultFormat],
    indices: false,
    serializeDate: function serializeDate(date) {
      return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
  };
  var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
    return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
  };
  var sentinel = {};
  var stringify$1 = function stringify2(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format2, formatter, encodeValuesOnly, charset, sideChannel2) {
    var obj = object;
    var tmpSc = sideChannel2;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
      var pos = tmpSc.get(object);
      step += 1;
      if (typeof pos !== "undefined") {
        if (pos === step) {
          throw new RangeError("Cyclic object value");
        } else {
          findFlag = true;
        }
      }
      if (typeof tmpSc.get(sentinel) === "undefined") {
        step = 0;
      }
    }
    if (typeof filter === "function") {
      obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
      obj = serializeDate(obj);
    } else if (generateArrayPrefix === "comma" && isArray$3(obj)) {
      obj = utils$1.maybeMap(obj, function(value2) {
        if (value2 instanceof Date) {
          return serializeDate(value2);
        }
        return value2;
      });
    }
    if (obj === null) {
      if (strictNullHandling) {
        return encoder && !encodeValuesOnly ? encoder(prefix, defaults$2.encoder, charset, "key", format2) : prefix;
      }
      obj = "";
    }
    if (isNonNullishPrimitive(obj) || utils$1.isBuffer(obj)) {
      if (encoder) {
        var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults$2.encoder, charset, "key", format2);
        if (generateArrayPrefix === "comma" && encodeValuesOnly) {
          var valuesArray = split.call(String(obj), ",");
          var valuesJoined = "";
          for (var i2 = 0; i2 < valuesArray.length; ++i2) {
            valuesJoined += (i2 === 0 ? "" : ",") + formatter(encoder(valuesArray[i2], defaults$2.encoder, charset, "value", format2));
          }
          return [formatter(keyValue) + "=" + valuesJoined];
        }
        return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults$2.encoder, charset, "value", format2))];
      }
      return [formatter(prefix) + "=" + formatter(String(obj))];
    }
    var values = [];
    if (typeof obj === "undefined") {
      return values;
    }
    var objKeys;
    if (generateArrayPrefix === "comma" && isArray$3(obj)) {
      objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
    } else if (isArray$3(filter)) {
      objKeys = filter;
    } else {
      var keys2 = Object.keys(obj);
      objKeys = sort ? keys2.sort(sort) : keys2;
    }
    for (var j = 0; j < objKeys.length; ++j) {
      var key = objKeys[j];
      var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
      if (skipNulls && value === null) {
        continue;
      }
      var keyPrefix = isArray$3(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? "." + key : "[" + key + "]");
      sideChannel2.set(object, step);
      var valueSideChannel = getSideChannel();
      valueSideChannel.set(sentinel, sideChannel2);
      pushToArray(values, stringify2(value, keyPrefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format2, formatter, encodeValuesOnly, charset, valueSideChannel));
    }
    return values;
  };
  var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
    if (!opts) {
      return defaults$2;
    }
    if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
      throw new TypeError("Encoder has to be a function.");
    }
    var charset = opts.charset || defaults$2.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var format2 = formats$1["default"];
    if (typeof opts.format !== "undefined") {
      if (!has$1.call(formats$1.formatters, opts.format)) {
        throw new TypeError("Unknown format option provided.");
      }
      format2 = opts.format;
    }
    var formatter = formats$1.formatters[format2];
    var filter = defaults$2.filter;
    if (typeof opts.filter === "function" || isArray$3(opts.filter)) {
      filter = opts.filter;
    }
    return {
      addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults$2.addQueryPrefix,
      allowDots: typeof opts.allowDots === "undefined" ? defaults$2.allowDots : !!opts.allowDots,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults$2.charsetSentinel,
      delimiter: typeof opts.delimiter === "undefined" ? defaults$2.delimiter : opts.delimiter,
      encode: typeof opts.encode === "boolean" ? opts.encode : defaults$2.encode,
      encoder: typeof opts.encoder === "function" ? opts.encoder : defaults$2.encoder,
      encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults$2.encodeValuesOnly,
      filter,
      format: format2,
      formatter,
      serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults$2.serializeDate,
      skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults$2.skipNulls,
      sort: typeof opts.sort === "function" ? opts.sort : null,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults$2.strictNullHandling
    };
  };
  var stringify_1 = function(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === "function") {
      filter = options.filter;
      obj = filter("", obj);
    } else if (isArray$3(options.filter)) {
      filter = options.filter;
      objKeys = filter;
    }
    var keys2 = [];
    if (typeof obj !== "object" || obj === null) {
      return "";
    }
    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
      arrayFormat = opts.arrayFormat;
    } else if (opts && "indices" in opts) {
      arrayFormat = opts.indices ? "indices" : "repeat";
    } else {
      arrayFormat = "indices";
    }
    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
    if (!objKeys) {
      objKeys = Object.keys(obj);
    }
    if (options.sort) {
      objKeys.sort(options.sort);
    }
    var sideChannel2 = getSideChannel();
    for (var i2 = 0; i2 < objKeys.length; ++i2) {
      var key = objKeys[i2];
      if (options.skipNulls && obj[key] === null) {
        continue;
      }
      pushToArray(keys2, stringify$1(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel2));
    }
    var joined = keys2.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
      if (options.charset === "iso-8859-1") {
        prefix += "utf8=%26%2310003%3B&";
      } else {
        prefix += "utf8=%E2%9C%93&";
      }
    }
    return joined.length > 0 ? prefix + joined : "";
  };
  var utils = utils$2;
  var has = Object.prototype.hasOwnProperty;
  var isArray$2 = Array.isArray;
  var defaults$1 = {
    allowDots: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: "&",
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1e3,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
  };
  var interpretNumericEntities = function(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
      return String.fromCharCode(parseInt(numberStr, 10));
    });
  };
  var parseArrayValue = function(val, options) {
    if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
      return val.split(",");
    }
    return val;
  };
  var isoSentinel = "utf8=%26%2310003%3B";
  var charsetSentinel = "utf8=%E2%9C%93";
  var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1;
    var i2;
    var charset = options.charset;
    if (options.charsetSentinel) {
      for (i2 = 0; i2 < parts.length; ++i2) {
        if (parts[i2].indexOf("utf8=") === 0) {
          if (parts[i2] === charsetSentinel) {
            charset = "utf-8";
          } else if (parts[i2] === isoSentinel) {
            charset = "iso-8859-1";
          }
          skipIndex = i2;
          i2 = parts.length;
        }
      }
    }
    for (i2 = 0; i2 < parts.length; ++i2) {
      if (i2 === skipIndex) {
        continue;
      }
      var part = parts[i2];
      var bracketEqualsPos = part.indexOf("]=");
      var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
      var key, val;
      if (pos === -1) {
        key = options.decoder(part, defaults$1.decoder, charset, "key");
        val = options.strictNullHandling ? null : "";
      } else {
        key = options.decoder(part.slice(0, pos), defaults$1.decoder, charset, "key");
        val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {
          return options.decoder(encodedVal, defaults$1.decoder, charset, "value");
        });
      }
      if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
        val = interpretNumericEntities(val);
      }
      if (part.indexOf("[]=") > -1) {
        val = isArray$2(val) ? [val] : val;
      }
      if (has.call(obj, key)) {
        obj[key] = utils.combine(obj[key], val);
      } else {
        obj[key] = val;
      }
    }
    return obj;
  };
  var parseObject = function(chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);
    for (var i2 = chain.length - 1; i2 >= 0; --i2) {
      var obj;
      var root = chain[i2];
      if (root === "[]" && options.parseArrays) {
        obj = [].concat(leaf);
      } else {
        obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
        var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
        var index = parseInt(cleanRoot, 10);
        if (!options.parseArrays && cleanRoot === "") {
          obj = { 0: leaf };
        } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
          obj = [];
          obj[index] = leaf;
        } else if (cleanRoot !== "__proto__") {
          obj[cleanRoot] = leaf;
        }
      }
      leaf = obj;
    }
    return leaf;
  };
  var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
      return;
    }
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    var keys2 = [];
    if (parent) {
      if (!options.plainObjects && has.call(Object.prototype, parent)) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys2.push(parent);
    }
    var i2 = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i2 < options.depth) {
      i2 += 1;
      if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys2.push(segment[1]);
    }
    if (segment) {
      keys2.push("[" + key.slice(segment.index) + "]");
    }
    return parseObject(keys2, val, options, valuesParsed);
  };
  var normalizeParseOptions = function normalizeParseOptions2(opts) {
    if (!opts) {
      return defaults$1;
    }
    if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
      throw new TypeError("Decoder has to be a function.");
    }
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var charset = typeof opts.charset === "undefined" ? defaults$1.charset : opts.charset;
    return {
      allowDots: typeof opts.allowDots === "undefined" ? defaults$1.allowDots : !!opts.allowDots,
      allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults$1.allowPrototypes,
      allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults$1.allowSparse,
      arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults$1.arrayLimit,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults$1.charsetSentinel,
      comma: typeof opts.comma === "boolean" ? opts.comma : defaults$1.comma,
      decoder: typeof opts.decoder === "function" ? opts.decoder : defaults$1.decoder,
      delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults$1.delimiter,
      depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults$1.depth,
      ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
      interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults$1.interpretNumericEntities,
      parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults$1.parameterLimit,
      parseArrays: opts.parseArrays !== false,
      plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults$1.plainObjects,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults$1.strictNullHandling
    };
  };
  var parse$2 = function(str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") {
      return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
    }
    var tempObj = typeof str === "string" ? parseValues(str, options) : str;
    var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
    var keys2 = Object.keys(tempObj);
    for (var i2 = 0; i2 < keys2.length; ++i2) {
      var key = keys2[i2];
      var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
      obj = utils.merge(obj, newObj, options);
    }
    if (options.allowSparse === true) {
      return obj;
    }
    return utils.compact(obj);
  };
  var stringify = stringify_1;
  var parse$1 = parse$2;
  var formats = formats$3;
  var lib = {
    formats,
    parse: parse$1,
    stringify
  };
  var sparkMd5 = { exports: {} };
  (function(module2, exports) {
    (function(factory) {
      {
        module2.exports = factory();
      }
    })(function(undefined$12) {
      var hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
      function md5cycle(x, k) {
        var a = x[0], b = x[1], c = x[2], d = x[3];
        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
      }
      function md5blk(s) {
        var md5blks = [], i2;
        for (i2 = 0; i2 < 64; i2 += 4) {
          md5blks[i2 >> 2] = s.charCodeAt(i2) + (s.charCodeAt(i2 + 1) << 8) + (s.charCodeAt(i2 + 2) << 16) + (s.charCodeAt(i2 + 3) << 24);
        }
        return md5blks;
      }
      function md5blk_array(a) {
        var md5blks = [], i2;
        for (i2 = 0; i2 < 64; i2 += 4) {
          md5blks[i2 >> 2] = a[i2] + (a[i2 + 1] << 8) + (a[i2 + 2] << 16) + (a[i2 + 3] << 24);
        }
        return md5blks;
      }
      function md51(s) {
        var n2 = s.length, state = [1732584193, -271733879, -1732584194, 271733878], i2, length, tail, tmp, lo, hi;
        for (i2 = 64; i2 <= n2; i2 += 64) {
          md5cycle(state, md5blk(s.substring(i2 - 64, i2)));
        }
        s = s.substring(i2 - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= s.charCodeAt(i2) << (i2 % 4 << 3);
        }
        tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
        if (i2 > 55) {
          md5cycle(state, tail);
          for (i2 = 0; i2 < 16; i2 += 1) {
            tail[i2] = 0;
          }
        }
        tmp = n2 * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(state, tail);
        return state;
      }
      function md51_array(a) {
        var n2 = a.length, state = [1732584193, -271733879, -1732584194, 271733878], i2, length, tail, tmp, lo, hi;
        for (i2 = 64; i2 <= n2; i2 += 64) {
          md5cycle(state, md5blk_array(a.subarray(i2 - 64, i2)));
        }
        a = i2 - 64 < n2 ? a.subarray(i2 - 64) : new Uint8Array(0);
        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= a[i2] << (i2 % 4 << 3);
        }
        tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
        if (i2 > 55) {
          md5cycle(state, tail);
          for (i2 = 0; i2 < 16; i2 += 1) {
            tail[i2] = 0;
          }
        }
        tmp = n2 * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(state, tail);
        return state;
      }
      function rhex(n2) {
        var s = "", j;
        for (j = 0; j < 4; j += 1) {
          s += hex_chr[n2 >> j * 8 + 4 & 15] + hex_chr[n2 >> j * 8 & 15];
        }
        return s;
      }
      function hex(x) {
        var i2;
        for (i2 = 0; i2 < x.length; i2 += 1) {
          x[i2] = rhex(x[i2]);
        }
        return x.join("");
      }
      if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592")
        ;
      if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
        (function() {
          function clamp(val, length) {
            val = val | 0 || 0;
            if (val < 0) {
              return Math.max(val + length, 0);
            }
            return Math.min(val, length);
          }
          ArrayBuffer.prototype.slice = function(from2, to2) {
            var length = this.byteLength, begin = clamp(from2, length), end = length, num, target, targetArray, sourceArray;
            if (to2 !== undefined$12) {
              end = clamp(to2, length);
            }
            if (begin > end) {
              return new ArrayBuffer(0);
            }
            num = end - begin;
            target = new ArrayBuffer(num);
            targetArray = new Uint8Array(target);
            sourceArray = new Uint8Array(this, begin, num);
            targetArray.set(sourceArray);
            return target;
          };
        })();
      }
      function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
          str = unescape(encodeURIComponent(str));
        }
        return str;
      }
      function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i2;
        for (i2 = 0; i2 < length; i2 += 1) {
          arr[i2] = str.charCodeAt(i2);
        }
        return returnUInt8Array ? arr : buff;
      }
      function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
      }
      function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);
        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);
        return returnUInt8Array ? result : result.buffer;
      }
      function hexToBinaryString(hex2) {
        var bytes = [], length = hex2.length, x;
        for (x = 0; x < length - 1; x += 2) {
          bytes.push(parseInt(hex2.substr(x, 2), 16));
        }
        return String.fromCharCode.apply(String, bytes);
      }
      function SparkMD52() {
        this.reset();
      }
      SparkMD52.prototype.append = function(str) {
        this.appendBinary(toUtf8(str));
        return this;
      };
      SparkMD52.prototype.appendBinary = function(contents) {
        this._buff += contents;
        this._length += contents.length;
        var length = this._buff.length, i2;
        for (i2 = 64; i2 <= length; i2 += 64) {
          md5cycle(this._hash, md5blk(this._buff.substring(i2 - 64, i2)));
        }
        this._buff = this._buff.substring(i2 - 64);
        return this;
      };
      SparkMD52.prototype.end = function(raw) {
        var buff = this._buff, length = buff.length, i2, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= buff.charCodeAt(i2) << (i2 % 4 << 3);
        }
        this._finish(tail, length);
        ret = hex(this._hash);
        if (raw) {
          ret = hexToBinaryString(ret);
        }
        this.reset();
        return ret;
      };
      SparkMD52.prototype.reset = function() {
        this._buff = "";
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];
        return this;
      };
      SparkMD52.prototype.getState = function() {
        return {
          buff: this._buff,
          length: this._length,
          hash: this._hash.slice()
        };
      };
      SparkMD52.prototype.setState = function(state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;
        return this;
      };
      SparkMD52.prototype.destroy = function() {
        delete this._hash;
        delete this._buff;
        delete this._length;
      };
      SparkMD52.prototype._finish = function(tail, length) {
        var i2 = length, tmp, lo, hi;
        tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
        if (i2 > 55) {
          md5cycle(this._hash, tail);
          for (i2 = 0; i2 < 16; i2 += 1) {
            tail[i2] = 0;
          }
        }
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
      };
      SparkMD52.hash = function(str, raw) {
        return SparkMD52.hashBinary(toUtf8(str), raw);
      };
      SparkMD52.hashBinary = function(content, raw) {
        var hash = md51(content), ret = hex(hash);
        return raw ? hexToBinaryString(ret) : ret;
      };
      SparkMD52.ArrayBuffer = function() {
        this.reset();
      };
      SparkMD52.ArrayBuffer.prototype.append = function(arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i2;
        this._length += arr.byteLength;
        for (i2 = 64; i2 <= length; i2 += 64) {
          md5cycle(this._hash, md5blk_array(buff.subarray(i2 - 64, i2)));
        }
        this._buff = i2 - 64 < length ? new Uint8Array(buff.buffer.slice(i2 - 64)) : new Uint8Array(0);
        return this;
      };
      SparkMD52.ArrayBuffer.prototype.end = function(raw) {
        var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i2, ret;
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= buff[i2] << (i2 % 4 << 3);
        }
        this._finish(tail, length);
        ret = hex(this._hash);
        if (raw) {
          ret = hexToBinaryString(ret);
        }
        this.reset();
        return ret;
      };
      SparkMD52.ArrayBuffer.prototype.reset = function() {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];
        return this;
      };
      SparkMD52.ArrayBuffer.prototype.getState = function() {
        var state = SparkMD52.prototype.getState.call(this);
        state.buff = arrayBuffer2Utf8Str(state.buff);
        return state;
      };
      SparkMD52.ArrayBuffer.prototype.setState = function(state) {
        state.buff = utf8Str2ArrayBuffer(state.buff, true);
        return SparkMD52.prototype.setState.call(this, state);
      };
      SparkMD52.ArrayBuffer.prototype.destroy = SparkMD52.prototype.destroy;
      SparkMD52.ArrayBuffer.prototype._finish = SparkMD52.prototype._finish;
      SparkMD52.ArrayBuffer.hash = function(arr, raw) {
        var hash = md51_array(new Uint8Array(arr)), ret = hex(hash);
        return raw ? hexToBinaryString(ret) : ret;
      };
      return SparkMD52;
    });
  })(sparkMd5);
  var SparkMD5 = sparkMd5.exports;
  //! moment.js
  //! version : 2.29.3
  //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
  //! license : MIT
  //! momentjs.com
  var hookCallback;
  function hooks() {
    return hookCallback.apply(null, arguments);
  }
  function setHookCallback(callback) {
    hookCallback = callback;
  }
  function isArray$1(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
  }
  function isObject$1(input) {
    return input != null && Object.prototype.toString.call(input) === "[object Object]";
  }
  function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }
  function isObjectEmpty(obj) {
    if (Object.getOwnPropertyNames) {
      return Object.getOwnPropertyNames(obj).length === 0;
    } else {
      var k;
      for (k in obj) {
        if (hasOwnProp(obj, k)) {
          return false;
        }
      }
      return true;
    }
  }
  function isUndefined(input) {
    return input === void 0;
  }
  function isNumber(input) {
    return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
  }
  function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
  }
  function map(arr, fn) {
    var res2 = [], i2, arrLen = arr.length;
    for (i2 = 0; i2 < arrLen; ++i2) {
      res2.push(fn(arr[i2], i2));
    }
    return res2;
  }
  function extend(a, b) {
    for (var i2 in b) {
      if (hasOwnProp(b, i2)) {
        a[i2] = b[i2];
      }
    }
    if (hasOwnProp(b, "toString")) {
      a.toString = b.toString;
    }
    if (hasOwnProp(b, "valueOf")) {
      a.valueOf = b.valueOf;
    }
    return a;
  }
  function createUTC(input, format2, locale2, strict) {
    return createLocalOrUTC(input, format2, locale2, strict, true).utc();
  }
  function defaultParsingFlags() {
    return {
      empty: false,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: false,
      invalidEra: null,
      invalidMonth: null,
      invalidFormat: false,
      userInvalidated: false,
      iso: false,
      parsedDateParts: [],
      era: null,
      meridiem: null,
      rfc2822: false,
      weekdayMismatch: false
    };
  }
  function getParsingFlags(m) {
    if (m._pf == null) {
      m._pf = defaultParsingFlags();
    }
    return m._pf;
  }
  var some;
  if (Array.prototype.some) {
    some = Array.prototype.some;
  } else {
    some = function(fun) {
      var t2 = Object(this), len = t2.length >>> 0, i2;
      for (i2 = 0; i2 < len; i2++) {
        if (i2 in t2 && fun.call(this, t2[i2], i2, t2)) {
          return true;
        }
      }
      return false;
    };
  }
  function isValid(m) {
    if (m._isValid == null) {
      var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i2) {
        return i2 != null;
      }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
      if (m._strict) {
        isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
      }
      if (Object.isFrozen == null || !Object.isFrozen(m)) {
        m._isValid = isNowValid;
      } else {
        return isNowValid;
      }
    }
    return m._isValid;
  }
  function createInvalid(flags) {
    var m = createUTC(NaN);
    if (flags != null) {
      extend(getParsingFlags(m), flags);
    } else {
      getParsingFlags(m).userInvalidated = true;
    }
    return m;
  }
  var momentProperties = hooks.momentProperties = [], updateInProgress = false;
  function copyConfig(to2, from2) {
    var i2, prop, val, momentPropertiesLen = momentProperties.length;
    if (!isUndefined(from2._isAMomentObject)) {
      to2._isAMomentObject = from2._isAMomentObject;
    }
    if (!isUndefined(from2._i)) {
      to2._i = from2._i;
    }
    if (!isUndefined(from2._f)) {
      to2._f = from2._f;
    }
    if (!isUndefined(from2._l)) {
      to2._l = from2._l;
    }
    if (!isUndefined(from2._strict)) {
      to2._strict = from2._strict;
    }
    if (!isUndefined(from2._tzm)) {
      to2._tzm = from2._tzm;
    }
    if (!isUndefined(from2._isUTC)) {
      to2._isUTC = from2._isUTC;
    }
    if (!isUndefined(from2._offset)) {
      to2._offset = from2._offset;
    }
    if (!isUndefined(from2._pf)) {
      to2._pf = getParsingFlags(from2);
    }
    if (!isUndefined(from2._locale)) {
      to2._locale = from2._locale;
    }
    if (momentPropertiesLen > 0) {
      for (i2 = 0; i2 < momentPropertiesLen; i2++) {
        prop = momentProperties[i2];
        val = from2[prop];
        if (!isUndefined(val)) {
          to2[prop] = val;
        }
      }
    }
    return to2;
  }
  function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
      this._d = new Date(NaN);
    }
    if (updateInProgress === false) {
      updateInProgress = true;
      hooks.updateOffset(this);
      updateInProgress = false;
    }
  }
  function isMoment(obj) {
    return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
  }
  function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
      console.warn("Deprecation warning: " + msg);
    }
  }
  function deprecate(msg, fn) {
    var firstTime = true;
    return extend(function() {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(null, msg);
      }
      if (firstTime) {
        var args = [], arg, i2, key, argLen = arguments.length;
        for (i2 = 0; i2 < argLen; i2++) {
          arg = "";
          if (typeof arguments[i2] === "object") {
            arg += "\n[" + i2 + "] ";
            for (key in arguments[0]) {
              if (hasOwnProp(arguments[0], key)) {
                arg += key + ": " + arguments[0][key] + ", ";
              }
            }
            arg = arg.slice(0, -2);
          } else {
            arg = arguments[i2];
          }
          args.push(arg);
        }
        warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
        firstTime = false;
      }
      return fn.apply(this, arguments);
    }, fn);
  }
  var deprecations = {};
  function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
      warn(msg);
      deprecations[name] = true;
    }
  }
  hooks.suppressDeprecationWarnings = false;
  hooks.deprecationHandler = null;
  function isFunction(input) {
    return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
  }
  function set(config) {
    var prop, i2;
    for (i2 in config) {
      if (hasOwnProp(config, i2)) {
        prop = config[i2];
        if (isFunction(prop)) {
          this[i2] = prop;
        } else {
          this["_" + i2] = prop;
        }
      }
    }
    this._config = config;
    this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
  }
  function mergeConfigs(parentConfig, childConfig) {
    var res2 = extend({}, parentConfig), prop;
    for (prop in childConfig) {
      if (hasOwnProp(childConfig, prop)) {
        if (isObject$1(parentConfig[prop]) && isObject$1(childConfig[prop])) {
          res2[prop] = {};
          extend(res2[prop], parentConfig[prop]);
          extend(res2[prop], childConfig[prop]);
        } else if (childConfig[prop] != null) {
          res2[prop] = childConfig[prop];
        } else {
          delete res2[prop];
        }
      }
    }
    for (prop in parentConfig) {
      if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject$1(parentConfig[prop])) {
        res2[prop] = extend({}, res2[prop]);
      }
    }
    return res2;
  }
  function Locale(config) {
    if (config != null) {
      this.set(config);
    }
  }
  var keys;
  if (Object.keys) {
    keys = Object.keys;
  } else {
    keys = function(obj) {
      var i2, res2 = [];
      for (i2 in obj) {
        if (hasOwnProp(obj, i2)) {
          res2.push(i2);
        }
      }
      return res2;
    };
  }
  var defaultCalendar = {
    sameDay: "[Today at] LT",
    nextDay: "[Tomorrow at] LT",
    nextWeek: "dddd [at] LT",
    lastDay: "[Yesterday at] LT",
    lastWeek: "[Last] dddd [at] LT",
    sameElse: "L"
  };
  function calendar(key, mom, now2) {
    var output = this._calendar[key] || this._calendar["sameElse"];
    return isFunction(output) ? output.call(mom, now2) : output;
  }
  function zeroFill(number, targetLength, forceSign) {
    var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
    return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
  }
  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
  function addFormatToken(token2, padded, ordinal2, callback) {
    var func = callback;
    if (typeof callback === "string") {
      func = function() {
        return this[callback]();
      };
    }
    if (token2) {
      formatTokenFunctions[token2] = func;
    }
    if (padded) {
      formatTokenFunctions[padded[0]] = function() {
        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
      };
    }
    if (ordinal2) {
      formatTokenFunctions[ordinal2] = function() {
        return this.localeData().ordinal(func.apply(this, arguments), token2);
      };
    }
  }
  function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
      return input.replace(/^\[|\]$/g, "");
    }
    return input.replace(/\\/g, "");
  }
  function makeFormatFunction(format2) {
    var array = format2.match(formattingTokens), i2, length;
    for (i2 = 0, length = array.length; i2 < length; i2++) {
      if (formatTokenFunctions[array[i2]]) {
        array[i2] = formatTokenFunctions[array[i2]];
      } else {
        array[i2] = removeFormattingTokens(array[i2]);
      }
    }
    return function(mom) {
      var output = "", i3;
      for (i3 = 0; i3 < length; i3++) {
        output += isFunction(array[i3]) ? array[i3].call(mom, format2) : array[i3];
      }
      return output;
    };
  }
  function formatMoment(m, format2) {
    if (!m.isValid()) {
      return m.localeData().invalidDate();
    }
    format2 = expandFormat(format2, m.localeData());
    formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
    return formatFunctions[format2](m);
  }
  function expandFormat(format2, locale2) {
    var i2 = 5;
    function replaceLongDateFormatTokens(input) {
      return locale2.longDateFormat(input) || input;
    }
    localFormattingTokens.lastIndex = 0;
    while (i2 >= 0 && localFormattingTokens.test(format2)) {
      format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
      localFormattingTokens.lastIndex = 0;
      i2 -= 1;
    }
    return format2;
  }
  var defaultLongDateFormat = {
    LTS: "h:mm:ss A",
    LT: "h:mm A",
    L: "MM/DD/YYYY",
    LL: "MMMM D, YYYY",
    LLL: "MMMM D, YYYY h:mm A",
    LLLL: "dddd, MMMM D, YYYY h:mm A"
  };
  function longDateFormat(key) {
    var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
    if (format2 || !formatUpper) {
      return format2;
    }
    this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
      if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
        return tok.slice(1);
      }
      return tok;
    }).join("");
    return this._longDateFormat[key];
  }
  var defaultInvalidDate = "Invalid date";
  function invalidDate() {
    return this._invalidDate;
  }
  var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
  function ordinal(number) {
    return this._ordinal.replace("%d", number);
  }
  var defaultRelativeTime = {
    future: "in %s",
    past: "%s ago",
    s: "a few seconds",
    ss: "%d seconds",
    m: "a minute",
    mm: "%d minutes",
    h: "an hour",
    hh: "%d hours",
    d: "a day",
    dd: "%d days",
    w: "a week",
    ww: "%d weeks",
    M: "a month",
    MM: "%d months",
    y: "a year",
    yy: "%d years"
  };
  function relativeTime(number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
  }
  function pastFuture(diff2, output) {
    var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
    return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
  }
  var aliases = {};
  function addUnitAlias(unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
  }
  function normalizeUnits(units) {
    return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
  }
  function normalizeObjectUnits(inputObject) {
    var normalizedInput = {}, normalizedProp, prop;
    for (prop in inputObject) {
      if (hasOwnProp(inputObject, prop)) {
        normalizedProp = normalizeUnits(prop);
        if (normalizedProp) {
          normalizedInput[normalizedProp] = inputObject[prop];
        }
      }
    }
    return normalizedInput;
  }
  var priorities = {};
  function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
  }
  function getPrioritizedUnits(unitsObj) {
    var units = [], u;
    for (u in unitsObj) {
      if (hasOwnProp(unitsObj, u)) {
        units.push({ unit: u, priority: priorities[u] });
      }
    }
    units.sort(function(a, b) {
      return a.priority - b.priority;
    });
    return units;
  }
  function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  }
  function absFloor(number) {
    if (number < 0) {
      return Math.ceil(number) || 0;
    } else {
      return Math.floor(number);
    }
  }
  function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion, value = 0;
    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
      value = absFloor(coercedNumber);
    }
    return value;
  }
  function makeGetSet(unit, keepTime) {
    return function(value) {
      if (value != null) {
        set$1(this, unit, value);
        hooks.updateOffset(this, keepTime);
        return this;
      } else {
        return get(this, unit);
      }
    };
  }
  function get(mom, unit) {
    return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
  }
  function set$1(mom, unit, value) {
    if (mom.isValid() && !isNaN(value)) {
      if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
        value = toInt(value);
        mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
      } else {
        mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
      }
    }
  }
  function stringGet(units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units]();
    }
    return this;
  }
  function stringSet(units, value) {
    if (typeof units === "object") {
      units = normalizeObjectUnits(units);
      var prioritized = getPrioritizedUnits(units), i2, prioritizedLen = prioritized.length;
      for (i2 = 0; i2 < prioritizedLen; i2++) {
        this[prioritized[i2].unit](units[prioritized[i2].unit]);
      }
    } else {
      units = normalizeUnits(units);
      if (isFunction(this[units])) {
        return this[units](value);
      }
    }
    return this;
  }
  var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
  regexes = {};
  function addRegexToken(token2, regex, strictRegex) {
    regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
      return isStrict && strictRegex ? strictRegex : regex;
    };
  }
  function getParseRegexForToken(token2, config) {
    if (!hasOwnProp(regexes, token2)) {
      return new RegExp(unescapeFormat(token2));
    }
    return regexes[token2](config._strict, config._locale);
  }
  function unescapeFormat(s) {
    return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
      return p1 || p2 || p3 || p4;
    }));
  }
  function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
  }
  var tokens = {};
  function addParseToken(token2, callback) {
    var i2, func = callback, tokenLen;
    if (typeof token2 === "string") {
      token2 = [token2];
    }
    if (isNumber(callback)) {
      func = function(input, array) {
        array[callback] = toInt(input);
      };
    }
    tokenLen = token2.length;
    for (i2 = 0; i2 < tokenLen; i2++) {
      tokens[token2[i2]] = func;
    }
  }
  function addWeekParseToken(token2, callback) {
    addParseToken(token2, function(input, array, config, token3) {
      config._w = config._w || {};
      callback(input, config._w, config, token3);
    });
  }
  function addTimeToArrayFromToken(token2, input, config) {
    if (input != null && hasOwnProp(tokens, token2)) {
      tokens[token2](input, config._a, config, token2);
    }
  }
  var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
  function mod(n2, x) {
    return (n2 % x + x) % x;
  }
  var indexOf;
  if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
  } else {
    indexOf = function(o2) {
      var i2;
      for (i2 = 0; i2 < this.length; ++i2) {
        if (this[i2] === o2) {
          return i2;
        }
      }
      return -1;
    };
  }
  function daysInMonth(year, month) {
    if (isNaN(year) || isNaN(month)) {
      return NaN;
    }
    var modMonth = mod(month, 12);
    year += (month - modMonth) / 12;
    return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
  }
  addFormatToken("M", ["MM", 2], "Mo", function() {
    return this.month() + 1;
  });
  addFormatToken("MMM", 0, 0, function(format2) {
    return this.localeData().monthsShort(this, format2);
  });
  addFormatToken("MMMM", 0, 0, function(format2) {
    return this.localeData().months(this, format2);
  });
  addUnitAlias("month", "M");
  addUnitPriority("month", 8);
  addRegexToken("M", match1to2);
  addRegexToken("MM", match1to2, match2);
  addRegexToken("MMM", function(isStrict, locale2) {
    return locale2.monthsShortRegex(isStrict);
  });
  addRegexToken("MMMM", function(isStrict, locale2) {
    return locale2.monthsRegex(isStrict);
  });
  addParseToken(["M", "MM"], function(input, array) {
    array[MONTH] = toInt(input) - 1;
  });
  addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
    var month = config._locale.monthsParse(input, token2, config._strict);
    if (month != null) {
      array[MONTH] = month;
    } else {
      getParsingFlags(config).invalidMonth = input;
    }
  });
  var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
  function localeMonths(m, format2) {
    if (!m) {
      return isArray$1(this._months) ? this._months : this._months["standalone"];
    }
    return isArray$1(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
  }
  function localeMonthsShort(m, format2) {
    if (!m) {
      return isArray$1(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
    }
    return isArray$1(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
  }
  function handleStrictParse(monthName, format2, strict) {
    var i2, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];
      for (i2 = 0; i2 < 12; ++i2) {
        mom = createUTC([2e3, i2]);
        this._shortMonthsParse[i2] = this.monthsShort(mom, "").toLocaleLowerCase();
        this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
      }
    }
    if (strict) {
      if (format2 === "MMM") {
        ii = indexOf.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._longMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
    } else {
      if (format2 === "MMM") {
        ii = indexOf.call(this._shortMonthsParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf.call(this._longMonthsParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._longMonthsParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
    }
  }
  function localeMonthsParse(monthName, format2, strict) {
    var i2, mom, regex;
    if (this._monthsParseExact) {
      return handleStrictParse.call(this, monthName, format2, strict);
    }
    if (!this._monthsParse) {
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];
    }
    for (i2 = 0; i2 < 12; i2++) {
      mom = createUTC([2e3, i2]);
      if (strict && !this._longMonthsParse[i2]) {
        this._longMonthsParse[i2] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
        this._shortMonthsParse[i2] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
      }
      if (!strict && !this._monthsParse[i2]) {
        regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
        this._monthsParse[i2] = new RegExp(regex.replace(".", ""), "i");
      }
      if (strict && format2 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
        return i2;
      } else if (strict && format2 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
        return i2;
      } else if (!strict && this._monthsParse[i2].test(monthName)) {
        return i2;
      }
    }
  }
  function setMonth(mom, value) {
    var dayOfMonth;
    if (!mom.isValid()) {
      return mom;
    }
    if (typeof value === "string") {
      if (/^\d+$/.test(value)) {
        value = toInt(value);
      } else {
        value = mom.localeData().monthsParse(value);
        if (!isNumber(value)) {
          return mom;
        }
      }
    }
    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
    return mom;
  }
  function getSetMonth(value) {
    if (value != null) {
      setMonth(this, value);
      hooks.updateOffset(this, true);
      return this;
    } else {
      return get(this, "Month");
    }
  }
  function getDaysInMonth() {
    return daysInMonth(this.year(), this.month());
  }
  function monthsShortRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!hasOwnProp(this, "_monthsRegex")) {
        computeMonthsParse.call(this);
      }
      if (isStrict) {
        return this._monthsShortStrictRegex;
      } else {
        return this._monthsShortRegex;
      }
    } else {
      if (!hasOwnProp(this, "_monthsShortRegex")) {
        this._monthsShortRegex = defaultMonthsShortRegex;
      }
      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
    }
  }
  function monthsRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!hasOwnProp(this, "_monthsRegex")) {
        computeMonthsParse.call(this);
      }
      if (isStrict) {
        return this._monthsStrictRegex;
      } else {
        return this._monthsRegex;
      }
    } else {
      if (!hasOwnProp(this, "_monthsRegex")) {
        this._monthsRegex = defaultMonthsRegex;
      }
      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
    }
  }
  function computeMonthsParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }
    var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom;
    for (i2 = 0; i2 < 12; i2++) {
      mom = createUTC([2e3, i2]);
      shortPieces.push(this.monthsShort(mom, ""));
      longPieces.push(this.months(mom, ""));
      mixedPieces.push(this.months(mom, ""));
      mixedPieces.push(this.monthsShort(mom, ""));
    }
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i2 = 0; i2 < 12; i2++) {
      shortPieces[i2] = regexEscape(shortPieces[i2]);
      longPieces[i2] = regexEscape(longPieces[i2]);
    }
    for (i2 = 0; i2 < 24; i2++) {
      mixedPieces[i2] = regexEscape(mixedPieces[i2]);
    }
    this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
    this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
  }
  addFormatToken("Y", 0, 0, function() {
    var y = this.year();
    return y <= 9999 ? zeroFill(y, 4) : "+" + y;
  });
  addFormatToken(0, ["YY", 2], 0, function() {
    return this.year() % 100;
  });
  addFormatToken(0, ["YYYY", 4], 0, "year");
  addFormatToken(0, ["YYYYY", 5], 0, "year");
  addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
  addUnitAlias("year", "y");
  addUnitPriority("year", 1);
  addRegexToken("Y", matchSigned);
  addRegexToken("YY", match1to2, match2);
  addRegexToken("YYYY", match1to4, match4);
  addRegexToken("YYYYY", match1to6, match6);
  addRegexToken("YYYYYY", match1to6, match6);
  addParseToken(["YYYYY", "YYYYYY"], YEAR);
  addParseToken("YYYY", function(input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
  });
  addParseToken("YY", function(input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
  });
  addParseToken("Y", function(input, array) {
    array[YEAR] = parseInt(input, 10);
  });
  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }
  hooks.parseTwoDigitYear = function(input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
  };
  var getSetYear = makeGetSet("FullYear", true);
  function getIsLeapYear() {
    return isLeapYear(this.year());
  }
  function createDate(y, m, d, h, M, s, ms) {
    var date;
    if (y < 100 && y >= 0) {
      date = new Date(y + 400, m, d, h, M, s, ms);
      if (isFinite(date.getFullYear())) {
        date.setFullYear(y);
      }
    } else {
      date = new Date(y, m, d, h, M, s, ms);
    }
    return date;
  }
  function createUTCDate(y) {
    var date, args;
    if (y < 100 && y >= 0) {
      args = Array.prototype.slice.call(arguments);
      args[0] = y + 400;
      date = new Date(Date.UTC.apply(null, args));
      if (isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
      }
    } else {
      date = new Date(Date.UTC.apply(null, arguments));
    }
    return date;
  }
  function firstWeekOffset(year, dow, doy) {
    var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
    return -fwdlw + fwd - 1;
  }
  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
    if (dayOfYear <= 0) {
      resYear = year - 1;
      resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
      resYear = year + 1;
      resDayOfYear = dayOfYear - daysInYear(year);
    } else {
      resYear = year;
      resDayOfYear = dayOfYear;
    }
    return {
      year: resYear,
      dayOfYear: resDayOfYear
    };
  }
  function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
    if (week < 1) {
      resYear = mom.year() - 1;
      resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
      resWeek = week - weeksInYear(mom.year(), dow, doy);
      resYear = mom.year() + 1;
    } else {
      resYear = mom.year();
      resWeek = week;
    }
    return {
      week: resWeek,
      year: resYear
    };
  }
  function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
  }
  addFormatToken("w", ["ww", 2], "wo", "week");
  addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
  addUnitAlias("week", "w");
  addUnitAlias("isoWeek", "W");
  addUnitPriority("week", 5);
  addUnitPriority("isoWeek", 5);
  addRegexToken("w", match1to2);
  addRegexToken("ww", match1to2, match2);
  addRegexToken("W", match1to2);
  addRegexToken("WW", match1to2, match2);
  addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token2) {
    week[token2.substr(0, 1)] = toInt(input);
  });
  function localeWeek(mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
  }
  var defaultLocaleWeek = {
    dow: 0,
    doy: 6
  };
  function localeFirstDayOfWeek() {
    return this._week.dow;
  }
  function localeFirstDayOfYear() {
    return this._week.doy;
  }
  function getSetWeek(input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, "d");
  }
  function getSetISOWeek(input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, "d");
  }
  addFormatToken("d", 0, "do", "day");
  addFormatToken("dd", 0, 0, function(format2) {
    return this.localeData().weekdaysMin(this, format2);
  });
  addFormatToken("ddd", 0, 0, function(format2) {
    return this.localeData().weekdaysShort(this, format2);
  });
  addFormatToken("dddd", 0, 0, function(format2) {
    return this.localeData().weekdays(this, format2);
  });
  addFormatToken("e", 0, 0, "weekday");
  addFormatToken("E", 0, 0, "isoWeekday");
  addUnitAlias("day", "d");
  addUnitAlias("weekday", "e");
  addUnitAlias("isoWeekday", "E");
  addUnitPriority("day", 11);
  addUnitPriority("weekday", 11);
  addUnitPriority("isoWeekday", 11);
  addRegexToken("d", match1to2);
  addRegexToken("e", match1to2);
  addRegexToken("E", match1to2);
  addRegexToken("dd", function(isStrict, locale2) {
    return locale2.weekdaysMinRegex(isStrict);
  });
  addRegexToken("ddd", function(isStrict, locale2) {
    return locale2.weekdaysShortRegex(isStrict);
  });
  addRegexToken("dddd", function(isStrict, locale2) {
    return locale2.weekdaysRegex(isStrict);
  });
  addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
    var weekday = config._locale.weekdaysParse(input, token2, config._strict);
    if (weekday != null) {
      week.d = weekday;
    } else {
      getParsingFlags(config).invalidWeekday = input;
    }
  });
  addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
    week[token2] = toInt(input);
  });
  function parseWeekday(input, locale2) {
    if (typeof input !== "string") {
      return input;
    }
    if (!isNaN(input)) {
      return parseInt(input, 10);
    }
    input = locale2.weekdaysParse(input);
    if (typeof input === "number") {
      return input;
    }
    return null;
  }
  function parseIsoWeekday(input, locale2) {
    if (typeof input === "string") {
      return locale2.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
  }
  function shiftWeekdays(ws, n2) {
    return ws.slice(n2, 7).concat(ws.slice(0, n2));
  }
  var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
  function localeWeekdays(m, format2) {
    var weekdays = isArray$1(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
    return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
  }
  function localeWeekdaysShort(m) {
    return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
  }
  function localeWeekdaysMin(m) {
    return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
  }
  function handleStrictParse$1(weekdayName, format2, strict) {
    var i2, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
      this._weekdaysParse = [];
      this._shortWeekdaysParse = [];
      this._minWeekdaysParse = [];
      for (i2 = 0; i2 < 7; ++i2) {
        mom = createUTC([2e3, 1]).day(i2);
        this._minWeekdaysParse[i2] = this.weekdaysMin(mom, "").toLocaleLowerCase();
        this._shortWeekdaysParse[i2] = this.weekdaysShort(mom, "").toLocaleLowerCase();
        this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
      }
    }
    if (strict) {
      if (format2 === "dddd") {
        ii = indexOf.call(this._weekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else if (format2 === "ddd") {
        ii = indexOf.call(this._shortWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      }
    } else {
      if (format2 === "dddd") {
        ii = indexOf.call(this._weekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf.call(this._shortWeekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else if (format2 === "ddd") {
        ii = indexOf.call(this._shortWeekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf.call(this._weekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._minWeekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf.call(this._weekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf.call(this._shortWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      }
    }
  }
  function localeWeekdaysParse(weekdayName, format2, strict) {
    var i2, mom, regex;
    if (this._weekdaysParseExact) {
      return handleStrictParse$1.call(this, weekdayName, format2, strict);
    }
    if (!this._weekdaysParse) {
      this._weekdaysParse = [];
      this._minWeekdaysParse = [];
      this._shortWeekdaysParse = [];
      this._fullWeekdaysParse = [];
    }
    for (i2 = 0; i2 < 7; i2++) {
      mom = createUTC([2e3, 1]).day(i2);
      if (strict && !this._fullWeekdaysParse[i2]) {
        this._fullWeekdaysParse[i2] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
        this._shortWeekdaysParse[i2] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
        this._minWeekdaysParse[i2] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
      }
      if (!this._weekdaysParse[i2]) {
        regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
        this._weekdaysParse[i2] = new RegExp(regex.replace(".", ""), "i");
      }
      if (strict && format2 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
        return i2;
      } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
        return i2;
      } else if (strict && format2 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
        return i2;
      } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
        return i2;
      }
    }
  }
  function getSetDayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
      input = parseWeekday(input, this.localeData());
      return this.add(input - day, "d");
    } else {
      return day;
    }
  }
  function getSetLocaleDayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, "d");
  }
  function getSetISODayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    if (input != null) {
      var weekday = parseIsoWeekday(input, this.localeData());
      return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
      return this.day() || 7;
    }
  }
  function weekdaysRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, "_weekdaysRegex")) {
        computeWeekdaysParse.call(this);
      }
      if (isStrict) {
        return this._weekdaysStrictRegex;
      } else {
        return this._weekdaysRegex;
      }
    } else {
      if (!hasOwnProp(this, "_weekdaysRegex")) {
        this._weekdaysRegex = defaultWeekdaysRegex;
      }
      return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
    }
  }
  function weekdaysShortRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, "_weekdaysRegex")) {
        computeWeekdaysParse.call(this);
      }
      if (isStrict) {
        return this._weekdaysShortStrictRegex;
      } else {
        return this._weekdaysShortRegex;
      }
    } else {
      if (!hasOwnProp(this, "_weekdaysShortRegex")) {
        this._weekdaysShortRegex = defaultWeekdaysShortRegex;
      }
      return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
  }
  function weekdaysMinRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, "_weekdaysRegex")) {
        computeWeekdaysParse.call(this);
      }
      if (isStrict) {
        return this._weekdaysMinStrictRegex;
      } else {
        return this._weekdaysMinRegex;
      }
    } else {
      if (!hasOwnProp(this, "_weekdaysMinRegex")) {
        this._weekdaysMinRegex = defaultWeekdaysMinRegex;
      }
      return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
  }
  function computeWeekdaysParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }
    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
    for (i2 = 0; i2 < 7; i2++) {
      mom = createUTC([2e3, 1]).day(i2);
      minp = regexEscape(this.weekdaysMin(mom, ""));
      shortp = regexEscape(this.weekdaysShort(mom, ""));
      longp = regexEscape(this.weekdays(mom, ""));
      minPieces.push(minp);
      shortPieces.push(shortp);
      longPieces.push(longp);
      mixedPieces.push(minp);
      mixedPieces.push(shortp);
      mixedPieces.push(longp);
    }
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;
    this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
    this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
    this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
  }
  function hFormat() {
    return this.hours() % 12 || 12;
  }
  function kFormat() {
    return this.hours() || 24;
  }
  addFormatToken("H", ["HH", 2], 0, "hour");
  addFormatToken("h", ["hh", 2], 0, hFormat);
  addFormatToken("k", ["kk", 2], 0, kFormat);
  addFormatToken("hmm", 0, 0, function() {
    return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
  });
  addFormatToken("hmmss", 0, 0, function() {
    return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
  });
  addFormatToken("Hmm", 0, 0, function() {
    return "" + this.hours() + zeroFill(this.minutes(), 2);
  });
  addFormatToken("Hmmss", 0, 0, function() {
    return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
  });
  function meridiem(token2, lowercase) {
    addFormatToken(token2, 0, 0, function() {
      return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
  }
  meridiem("a", true);
  meridiem("A", false);
  addUnitAlias("hour", "h");
  addUnitPriority("hour", 13);
  function matchMeridiem(isStrict, locale2) {
    return locale2._meridiemParse;
  }
  addRegexToken("a", matchMeridiem);
  addRegexToken("A", matchMeridiem);
  addRegexToken("H", match1to2);
  addRegexToken("h", match1to2);
  addRegexToken("k", match1to2);
  addRegexToken("HH", match1to2, match2);
  addRegexToken("hh", match1to2, match2);
  addRegexToken("kk", match1to2, match2);
  addRegexToken("hmm", match3to4);
  addRegexToken("hmmss", match5to6);
  addRegexToken("Hmm", match3to4);
  addRegexToken("Hmmss", match5to6);
  addParseToken(["H", "HH"], HOUR);
  addParseToken(["k", "kk"], function(input, array, config) {
    var kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
  });
  addParseToken(["a", "A"], function(input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
  });
  addParseToken(["h", "hh"], function(input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
  });
  addParseToken("hmm", function(input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
  });
  addParseToken("hmmss", function(input, array, config) {
    var pos1 = input.length - 4, pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
  });
  addParseToken("Hmm", function(input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
  });
  addParseToken("Hmmss", function(input, array, config) {
    var pos1 = input.length - 4, pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
  });
  function localeIsPM(input) {
    return (input + "").toLowerCase().charAt(0) === "p";
  }
  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
  function localeMeridiem(hours2, minutes2, isLower) {
    if (hours2 > 11) {
      return isLower ? "pm" : "PM";
    } else {
      return isLower ? "am" : "AM";
    }
  }
  var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,
    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,
    week: defaultLocaleWeek,
    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,
    meridiemParse: defaultLocaleMeridiemParse
  };
  var locales = {}, localeFamilies = {}, globalLocale;
  function commonPrefix(arr1, arr2) {
    var i2, minl = Math.min(arr1.length, arr2.length);
    for (i2 = 0; i2 < minl; i2 += 1) {
      if (arr1[i2] !== arr2[i2]) {
        return i2;
      }
    }
    return minl;
  }
  function normalizeLocale$1(key) {
    return key ? key.toLowerCase().replace("_", "-") : key;
  }
  function chooseLocale(names) {
    var i2 = 0, j, next, locale2, split2;
    while (i2 < names.length) {
      split2 = normalizeLocale$1(names[i2]).split("-");
      j = split2.length;
      next = normalizeLocale$1(names[i2 + 1]);
      next = next ? next.split("-") : null;
      while (j > 0) {
        locale2 = loadLocale(split2.slice(0, j).join("-"));
        if (locale2) {
          return locale2;
        }
        if (next && next.length >= j && commonPrefix(split2, next) >= j - 1) {
          break;
        }
        j--;
      }
      i2++;
    }
    return globalLocale;
  }
  function isLocaleNameSane(name) {
    return name.match("^[^/\\\\]*$") != null;
  }
  function loadLocale(name) {
    var oldLocale = null, aliasedRequire;
    if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
      try {
        oldLocale = globalLocale._abbr;
        aliasedRequire = require;
        aliasedRequire("./locale/" + name);
        getSetGlobalLocale(oldLocale);
      } catch (e2) {
        locales[name] = null;
      }
    }
    return locales[name];
  }
  function getSetGlobalLocale(key, values) {
    var data;
    if (key) {
      if (isUndefined(values)) {
        data = getLocale(key);
      } else {
        data = defineLocale(key, values);
      }
      if (data) {
        globalLocale = data;
      } else {
        if (typeof console !== "undefined" && console.warn) {
          console.warn("Locale " + key + " not found. Did you forget to load it?");
        }
      }
    }
    return globalLocale._abbr;
  }
  function defineLocale(name, config) {
    if (config !== null) {
      var locale2, parentConfig = baseConfig;
      config.abbr = name;
      if (locales[name] != null) {
        deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
        parentConfig = locales[name]._config;
      } else if (config.parentLocale != null) {
        if (locales[config.parentLocale] != null) {
          parentConfig = locales[config.parentLocale]._config;
        } else {
          locale2 = loadLocale(config.parentLocale);
          if (locale2 != null) {
            parentConfig = locale2._config;
          } else {
            if (!localeFamilies[config.parentLocale]) {
              localeFamilies[config.parentLocale] = [];
            }
            localeFamilies[config.parentLocale].push({
              name,
              config
            });
            return null;
          }
        }
      }
      locales[name] = new Locale(mergeConfigs(parentConfig, config));
      if (localeFamilies[name]) {
        localeFamilies[name].forEach(function(x) {
          defineLocale(x.name, x.config);
        });
      }
      getSetGlobalLocale(name);
      return locales[name];
    } else {
      delete locales[name];
      return null;
    }
  }
  function updateLocale(name, config) {
    if (config != null) {
      var locale2, tmpLocale, parentConfig = baseConfig;
      if (locales[name] != null && locales[name].parentLocale != null) {
        locales[name].set(mergeConfigs(locales[name]._config, config));
      } else {
        tmpLocale = loadLocale(name);
        if (tmpLocale != null) {
          parentConfig = tmpLocale._config;
        }
        config = mergeConfigs(parentConfig, config);
        if (tmpLocale == null) {
          config.abbr = name;
        }
        locale2 = new Locale(config);
        locale2.parentLocale = locales[name];
        locales[name] = locale2;
      }
      getSetGlobalLocale(name);
    } else {
      if (locales[name] != null) {
        if (locales[name].parentLocale != null) {
          locales[name] = locales[name].parentLocale;
          if (name === getSetGlobalLocale()) {
            getSetGlobalLocale(name);
          }
        } else if (locales[name] != null) {
          delete locales[name];
        }
      }
    }
    return locales[name];
  }
  function getLocale(key) {
    var locale2;
    if (key && key._locale && key._locale._abbr) {
      key = key._locale._abbr;
    }
    if (!key) {
      return globalLocale;
    }
    if (!isArray$1(key)) {
      locale2 = loadLocale(key);
      if (locale2) {
        return locale2;
      }
      key = [key];
    }
    return chooseLocale(key);
  }
  function listLocales() {
    return keys(locales);
  }
  function checkOverflow(m) {
    var overflow, a = m._a;
    if (a && getParsingFlags(m).overflow === -2) {
      overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
      if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
        overflow = DATE;
      }
      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
        overflow = WEEK;
      }
      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
        overflow = WEEKDAY;
      }
      getParsingFlags(m).overflow = overflow;
    }
    return m;
  }
  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
    ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
    ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
    ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
    ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
    ["YYYY-DDD", /\d{4}-\d{3}/],
    ["YYYY-MM", /\d{4}-\d\d/, false],
    ["YYYYYYMMDD", /[+-]\d{10}/],
    ["YYYYMMDD", /\d{8}/],
    ["GGGG[W]WWE", /\d{4}W\d{3}/],
    ["GGGG[W]WW", /\d{4}W\d{2}/, false],
    ["YYYYDDD", /\d{7}/],
    ["YYYYMM", /\d{6}/, false],
    ["YYYY", /\d{4}/, false]
  ], isoTimes = [
    ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
    ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
    ["HH:mm:ss", /\d\d:\d\d:\d\d/],
    ["HH:mm", /\d\d:\d\d/],
    ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
    ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
    ["HHmmss", /\d\d\d\d\d\d/],
    ["HHmm", /\d\d\d\d/],
    ["HH", /\d\d/]
  ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
    UT: 0,
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
  };
  function configFromISO(config) {
    var i2, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
    if (match) {
      getParsingFlags(config).iso = true;
      for (i2 = 0, l = isoDatesLen; i2 < l; i2++) {
        if (isoDates[i2][1].exec(match[1])) {
          dateFormat = isoDates[i2][0];
          allowTime = isoDates[i2][2] !== false;
          break;
        }
      }
      if (dateFormat == null) {
        config._isValid = false;
        return;
      }
      if (match[3]) {
        for (i2 = 0, l = isoTimesLen; i2 < l; i2++) {
          if (isoTimes[i2][1].exec(match[3])) {
            timeFormat = (match[2] || " ") + isoTimes[i2][0];
            break;
          }
        }
        if (timeFormat == null) {
          config._isValid = false;
          return;
        }
      }
      if (!allowTime && timeFormat != null) {
        config._isValid = false;
        return;
      }
      if (match[4]) {
        if (tzRegex.exec(match[4])) {
          tzFormat = "Z";
        } else {
          config._isValid = false;
          return;
        }
      }
      config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
      configFromStringAndFormat(config);
    } else {
      config._isValid = false;
    }
  }
  function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    var result = [
      untruncateYear(yearStr),
      defaultLocaleMonthsShort.indexOf(monthStr),
      parseInt(dayStr, 10),
      parseInt(hourStr, 10),
      parseInt(minuteStr, 10)
    ];
    if (secondStr) {
      result.push(parseInt(secondStr, 10));
    }
    return result;
  }
  function untruncateYear(yearStr) {
    var year = parseInt(yearStr, 10);
    if (year <= 49) {
      return 2e3 + year;
    } else if (year <= 999) {
      return 1900 + year;
    }
    return year;
  }
  function preprocessRFC2822(s) {
    return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
  }
  function checkWeekday(weekdayStr, parsedInput, config) {
    if (weekdayStr) {
      var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
      if (weekdayProvided !== weekdayActual) {
        getParsingFlags(config).weekdayMismatch = true;
        config._isValid = false;
        return false;
      }
    }
    return true;
  }
  function calculateOffset(obsOffset, militaryOffset, numOffset) {
    if (obsOffset) {
      return obsOffsets[obsOffset];
    } else if (militaryOffset) {
      return 0;
    } else {
      var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
      return h * 60 + m;
    }
  }
  function configFromRFC2822(config) {
    var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
    if (match) {
      parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
      if (!checkWeekday(match[1], parsedArray, config)) {
        return;
      }
      config._a = parsedArray;
      config._tzm = calculateOffset(match[8], match[9], match[10]);
      config._d = createUTCDate.apply(null, config._a);
      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
      getParsingFlags(config).rfc2822 = true;
    } else {
      config._isValid = false;
    }
  }
  function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);
    if (matched !== null) {
      config._d = new Date(+matched[1]);
      return;
    }
    configFromISO(config);
    if (config._isValid === false) {
      delete config._isValid;
    } else {
      return;
    }
    configFromRFC2822(config);
    if (config._isValid === false) {
      delete config._isValid;
    } else {
      return;
    }
    if (config._strict) {
      config._isValid = false;
    } else {
      hooks.createFromInputFallback(config);
    }
  }
  hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
    config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
  });
  function defaults(a, b, c) {
    if (a != null) {
      return a;
    }
    if (b != null) {
      return b;
    }
    return c;
  }
  function currentDateArray(config) {
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
      return [
        nowValue.getUTCFullYear(),
        nowValue.getUTCMonth(),
        nowValue.getUTCDate()
      ];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
  }
  function configFromArray(config) {
    var i2, date, input = [], currentDate, expectedWeekday, yearToUse;
    if (config._d) {
      return;
    }
    currentDate = currentDateArray(config);
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
      dayOfYearFromWeekInfo(config);
    }
    if (config._dayOfYear != null) {
      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
      if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
        getParsingFlags(config)._overflowDayOfYear = true;
      }
      date = createUTCDate(yearToUse, 0, config._dayOfYear);
      config._a[MONTH] = date.getUTCMonth();
      config._a[DATE] = date.getUTCDate();
    }
    for (i2 = 0; i2 < 3 && config._a[i2] == null; ++i2) {
      config._a[i2] = input[i2] = currentDate[i2];
    }
    for (; i2 < 7; i2++) {
      config._a[i2] = input[i2] = config._a[i2] == null ? i2 === 2 ? 1 : 0 : config._a[i2];
    }
    if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
      config._nextDay = true;
      config._a[HOUR] = 0;
    }
    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
    if (config._tzm != null) {
      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }
    if (config._nextDay) {
      config._a[HOUR] = 24;
    }
    if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
      getParsingFlags(config).weekdayMismatch = true;
    }
  }
  function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
      dow = 1;
      doy = 4;
      weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
      week = defaults(w.W, 1);
      weekday = defaults(w.E, 1);
      if (weekday < 1 || weekday > 7) {
        weekdayOverflow = true;
      }
    } else {
      dow = config._locale._week.dow;
      doy = config._locale._week.doy;
      curWeek = weekOfYear(createLocal(), dow, doy);
      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
      week = defaults(w.w, curWeek.week);
      if (w.d != null) {
        weekday = w.d;
        if (weekday < 0 || weekday > 6) {
          weekdayOverflow = true;
        }
      } else if (w.e != null) {
        weekday = w.e + dow;
        if (w.e < 0 || w.e > 6) {
          weekdayOverflow = true;
        }
      } else {
        weekday = dow;
      }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
      getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
      getParsingFlags(config)._overflowWeekday = true;
    } else {
      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
      config._a[YEAR] = temp.year;
      config._dayOfYear = temp.dayOfYear;
    }
  }
  hooks.ISO_8601 = function() {
  };
  hooks.RFC_2822 = function() {
  };
  function configFromStringAndFormat(config) {
    if (config._f === hooks.ISO_8601) {
      configFromISO(config);
      return;
    }
    if (config._f === hooks.RFC_2822) {
      configFromRFC2822(config);
      return;
    }
    config._a = [];
    getParsingFlags(config).empty = true;
    var string = "" + config._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
    tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
    tokenLen = tokens2.length;
    for (i2 = 0; i2 < tokenLen; i2++) {
      token2 = tokens2[i2];
      parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
      if (parsedInput) {
        skipped = string.substr(0, string.indexOf(parsedInput));
        if (skipped.length > 0) {
          getParsingFlags(config).unusedInput.push(skipped);
        }
        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
        totalParsedInputLength += parsedInput.length;
      }
      if (formatTokenFunctions[token2]) {
        if (parsedInput) {
          getParsingFlags(config).empty = false;
        } else {
          getParsingFlags(config).unusedTokens.push(token2);
        }
        addTimeToArrayFromToken(token2, parsedInput, config);
      } else if (config._strict && !parsedInput) {
        getParsingFlags(config).unusedTokens.push(token2);
      }
    }
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
      getParsingFlags(config).unusedInput.push(string);
    }
    if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
      getParsingFlags(config).bigHour = void 0;
    }
    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
    era = getParsingFlags(config).era;
    if (era !== null) {
      config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
    }
    configFromArray(config);
    checkOverflow(config);
  }
  function meridiemFixWrap(locale2, hour, meridiem2) {
    var isPm;
    if (meridiem2 == null) {
      return hour;
    }
    if (locale2.meridiemHour != null) {
      return locale2.meridiemHour(hour, meridiem2);
    } else if (locale2.isPM != null) {
      isPm = locale2.isPM(meridiem2);
      if (isPm && hour < 12) {
        hour += 12;
      }
      if (!isPm && hour === 12) {
        hour = 0;
      }
      return hour;
    } else {
      return hour;
    }
  }
  function configFromStringAndArray(config) {
    var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
    if (configfLen === 0) {
      getParsingFlags(config).invalidFormat = true;
      config._d = new Date(NaN);
      return;
    }
    for (i2 = 0; i2 < configfLen; i2++) {
      currentScore = 0;
      validFormatFound = false;
      tempConfig = copyConfig({}, config);
      if (config._useUTC != null) {
        tempConfig._useUTC = config._useUTC;
      }
      tempConfig._f = config._f[i2];
      configFromStringAndFormat(tempConfig);
      if (isValid(tempConfig)) {
        validFormatFound = true;
      }
      currentScore += getParsingFlags(tempConfig).charsLeftOver;
      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
      getParsingFlags(tempConfig).score = currentScore;
      if (!bestFormatIsValid) {
        if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
          scoreToBeat = currentScore;
          bestMoment = tempConfig;
          if (validFormatFound) {
            bestFormatIsValid = true;
          }
        }
      } else {
        if (currentScore < scoreToBeat) {
          scoreToBeat = currentScore;
          bestMoment = tempConfig;
        }
      }
    }
    extend(config, bestMoment || tempConfig);
  }
  function configFromObject(config) {
    if (config._d) {
      return;
    }
    var i2 = normalizeObjectUnits(config._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
    config._a = map([i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond], function(obj) {
      return obj && parseInt(obj, 10);
    });
    configFromArray(config);
  }
  function createFromConfig(config) {
    var res2 = new Moment(checkOverflow(prepareConfig(config)));
    if (res2._nextDay) {
      res2.add(1, "d");
      res2._nextDay = void 0;
    }
    return res2;
  }
  function prepareConfig(config) {
    var input = config._i, format2 = config._f;
    config._locale = config._locale || getLocale(config._l);
    if (input === null || format2 === void 0 && input === "") {
      return createInvalid({ nullInput: true });
    }
    if (typeof input === "string") {
      config._i = input = config._locale.preparse(input);
    }
    if (isMoment(input)) {
      return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
      config._d = input;
    } else if (isArray$1(format2)) {
      configFromStringAndArray(config);
    } else if (format2) {
      configFromStringAndFormat(config);
    } else {
      configFromInput(config);
    }
    if (!isValid(config)) {
      config._d = null;
    }
    return config;
  }
  function configFromInput(config) {
    var input = config._i;
    if (isUndefined(input)) {
      config._d = new Date(hooks.now());
    } else if (isDate(input)) {
      config._d = new Date(input.valueOf());
    } else if (typeof input === "string") {
      configFromString(config);
    } else if (isArray$1(input)) {
      config._a = map(input.slice(0), function(obj) {
        return parseInt(obj, 10);
      });
      configFromArray(config);
    } else if (isObject$1(input)) {
      configFromObject(config);
    } else if (isNumber(input)) {
      config._d = new Date(input);
    } else {
      hooks.createFromInputFallback(config);
    }
  }
  function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
    var c = {};
    if (format2 === true || format2 === false) {
      strict = format2;
      format2 = void 0;
    }
    if (locale2 === true || locale2 === false) {
      strict = locale2;
      locale2 = void 0;
    }
    if (isObject$1(input) && isObjectEmpty(input) || isArray$1(input) && input.length === 0) {
      input = void 0;
    }
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale2;
    c._i = input;
    c._f = format2;
    c._strict = strict;
    return createFromConfig(c);
  }
  function createLocal(input, format2, locale2, strict) {
    return createLocalOrUTC(input, format2, locale2, strict, false);
  }
  var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
    var other = createLocal.apply(null, arguments);
    if (this.isValid() && other.isValid()) {
      return other < this ? this : other;
    } else {
      return createInvalid();
    }
  }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
    var other = createLocal.apply(null, arguments);
    if (this.isValid() && other.isValid()) {
      return other > this ? this : other;
    } else {
      return createInvalid();
    }
  });
  function pickBy(fn, moments) {
    var res2, i2;
    if (moments.length === 1 && isArray$1(moments[0])) {
      moments = moments[0];
    }
    if (!moments.length) {
      return createLocal();
    }
    res2 = moments[0];
    for (i2 = 1; i2 < moments.length; ++i2) {
      if (!moments[i2].isValid() || moments[i2][fn](res2)) {
        res2 = moments[i2];
      }
    }
    return res2;
  }
  function min() {
    var args = [].slice.call(arguments, 0);
    return pickBy("isBefore", args);
  }
  function max() {
    var args = [].slice.call(arguments, 0);
    return pickBy("isAfter", args);
  }
  var now = function() {
    return Date.now ? Date.now() : +new Date();
  };
  var ordering = [
    "year",
    "quarter",
    "month",
    "week",
    "day",
    "hour",
    "minute",
    "second",
    "millisecond"
  ];
  function isDurationValid(m) {
    var key, unitHasDecimal = false, i2, orderLen = ordering.length;
    for (key in m) {
      if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
        return false;
      }
    }
    for (i2 = 0; i2 < orderLen; ++i2) {
      if (m[ordering[i2]]) {
        if (unitHasDecimal) {
          return false;
        }
        if (parseFloat(m[ordering[i2]]) !== toInt(m[ordering[i2]])) {
          unitHasDecimal = true;
        }
      }
    }
    return true;
  }
  function isValid$1() {
    return this._isValid;
  }
  function createInvalid$1() {
    return createDuration(NaN);
  }
  function Duration(duration) {
    var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
    this._isValid = isDurationValid(normalizedInput);
    this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
    this._days = +days2 + weeks2 * 7;
    this._months = +months2 + quarters * 3 + years2 * 12;
    this._data = {};
    this._locale = getLocale();
    this._bubble();
  }
  function isDuration(obj) {
    return obj instanceof Duration;
  }
  function absRound(number) {
    if (number < 0) {
      return Math.round(-1 * number) * -1;
    } else {
      return Math.round(number);
    }
  }
  function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i2;
    for (i2 = 0; i2 < len; i2++) {
      if (dontConvert && array1[i2] !== array2[i2] || !dontConvert && toInt(array1[i2]) !== toInt(array2[i2])) {
        diffs++;
      }
    }
    return diffs + lengthDiff;
  }
  function offset(token2, separator) {
    addFormatToken(token2, 0, 0, function() {
      var offset2 = this.utcOffset(), sign2 = "+";
      if (offset2 < 0) {
        offset2 = -offset2;
        sign2 = "-";
      }
      return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
    });
  }
  offset("Z", ":");
  offset("ZZ", "");
  addRegexToken("Z", matchShortOffset);
  addRegexToken("ZZ", matchShortOffset);
  addParseToken(["Z", "ZZ"], function(input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
  });
  var chunkOffset = /([\+\-]|\d\d)/gi;
  function offsetFromString(matcher, string) {
    var matches = (string || "").match(matcher), chunk, parts, minutes2;
    if (matches === null) {
      return null;
    }
    chunk = matches[matches.length - 1] || [];
    parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
    minutes2 = +(parts[1] * 60) + toInt(parts[2]);
    return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
  }
  function cloneWithOffset(input, model) {
    var res2, diff2;
    if (model._isUTC) {
      res2 = model.clone();
      diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res2.valueOf();
      res2._d.setTime(res2._d.valueOf() + diff2);
      hooks.updateOffset(res2, false);
      return res2;
    } else {
      return createLocal(input).local();
    }
  }
  function getDateOffset(m) {
    return -Math.round(m._d.getTimezoneOffset());
  }
  hooks.updateOffset = function() {
  };
  function getSetOffset(input, keepLocalTime, keepMinutes) {
    var offset2 = this._offset || 0, localAdjust;
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    if (input != null) {
      if (typeof input === "string") {
        input = offsetFromString(matchShortOffset, input);
        if (input === null) {
          return this;
        }
      } else if (Math.abs(input) < 16 && !keepMinutes) {
        input = input * 60;
      }
      if (!this._isUTC && keepLocalTime) {
        localAdjust = getDateOffset(this);
      }
      this._offset = input;
      this._isUTC = true;
      if (localAdjust != null) {
        this.add(localAdjust, "m");
      }
      if (offset2 !== input) {
        if (!keepLocalTime || this._changeInProgress) {
          addSubtract(this, createDuration(input - offset2, "m"), 1, false);
        } else if (!this._changeInProgress) {
          this._changeInProgress = true;
          hooks.updateOffset(this, true);
          this._changeInProgress = null;
        }
      }
      return this;
    } else {
      return this._isUTC ? offset2 : getDateOffset(this);
    }
  }
  function getSetZone(input, keepLocalTime) {
    if (input != null) {
      if (typeof input !== "string") {
        input = -input;
      }
      this.utcOffset(input, keepLocalTime);
      return this;
    } else {
      return -this.utcOffset();
    }
  }
  function setOffsetToUTC(keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
  }
  function setOffsetToLocal(keepLocalTime) {
    if (this._isUTC) {
      this.utcOffset(0, keepLocalTime);
      this._isUTC = false;
      if (keepLocalTime) {
        this.subtract(getDateOffset(this), "m");
      }
    }
    return this;
  }
  function setOffsetToParsedOffset() {
    if (this._tzm != null) {
      this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === "string") {
      var tZone = offsetFromString(matchOffset, this._i);
      if (tZone != null) {
        this.utcOffset(tZone);
      } else {
        this.utcOffset(0, true);
      }
    }
    return this;
  }
  function hasAlignedHourOffset(input) {
    if (!this.isValid()) {
      return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;
    return (this.utcOffset() - input) % 60 === 0;
  }
  function isDaylightSavingTime() {
    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
  }
  function isDaylightSavingTimeShifted() {
    if (!isUndefined(this._isDSTShifted)) {
      return this._isDSTShifted;
    }
    var c = {}, other;
    copyConfig(c, this);
    c = prepareConfig(c);
    if (c._a) {
      other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
      this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
    } else {
      this._isDSTShifted = false;
    }
    return this._isDSTShifted;
  }
  function isLocal() {
    return this.isValid() ? !this._isUTC : false;
  }
  function isUtcOffset() {
    return this.isValid() ? this._isUTC : false;
  }
  function isUtc() {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
  }
  var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
  function createDuration(input, key) {
    var duration = input, match = null, sign2, ret, diffRes;
    if (isDuration(input)) {
      duration = {
        ms: input._milliseconds,
        d: input._days,
        M: input._months
      };
    } else if (isNumber(input) || !isNaN(+input)) {
      duration = {};
      if (key) {
        duration[key] = +input;
      } else {
        duration.milliseconds = +input;
      }
    } else if (match = aspNetRegex.exec(input)) {
      sign2 = match[1] === "-" ? -1 : 1;
      duration = {
        y: 0,
        d: toInt(match[DATE]) * sign2,
        h: toInt(match[HOUR]) * sign2,
        m: toInt(match[MINUTE]) * sign2,
        s: toInt(match[SECOND]) * sign2,
        ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
      };
    } else if (match = isoRegex.exec(input)) {
      sign2 = match[1] === "-" ? -1 : 1;
      duration = {
        y: parseIso(match[2], sign2),
        M: parseIso(match[3], sign2),
        w: parseIso(match[4], sign2),
        d: parseIso(match[5], sign2),
        h: parseIso(match[6], sign2),
        m: parseIso(match[7], sign2),
        s: parseIso(match[8], sign2)
      };
    } else if (duration == null) {
      duration = {};
    } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
      diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
      duration = {};
      duration.ms = diffRes.milliseconds;
      duration.M = diffRes.months;
    }
    ret = new Duration(duration);
    if (isDuration(input) && hasOwnProp(input, "_locale")) {
      ret._locale = input._locale;
    }
    if (isDuration(input) && hasOwnProp(input, "_isValid")) {
      ret._isValid = input._isValid;
    }
    return ret;
  }
  createDuration.fn = Duration.prototype;
  createDuration.invalid = createInvalid$1;
  function parseIso(inp, sign2) {
    var res2 = inp && parseFloat(inp.replace(",", "."));
    return (isNaN(res2) ? 0 : res2) * sign2;
  }
  function positiveMomentsDifference(base, other) {
    var res2 = {};
    res2.months = other.month() - base.month() + (other.year() - base.year()) * 12;
    if (base.clone().add(res2.months, "M").isAfter(other)) {
      --res2.months;
    }
    res2.milliseconds = +other - +base.clone().add(res2.months, "M");
    return res2;
  }
  function momentsDifference(base, other) {
    var res2;
    if (!(base.isValid() && other.isValid())) {
      return { milliseconds: 0, months: 0 };
    }
    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
      res2 = positiveMomentsDifference(base, other);
    } else {
      res2 = positiveMomentsDifference(other, base);
      res2.milliseconds = -res2.milliseconds;
      res2.months = -res2.months;
    }
    return res2;
  }
  function createAdder(direction, name) {
    return function(val, period) {
      var dur, tmp;
      if (period !== null && !isNaN(+period)) {
        deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
        tmp = val;
        val = period;
        period = tmp;
      }
      dur = createDuration(val, period);
      addSubtract(this, dur, direction);
      return this;
    };
  }
  function addSubtract(mom, duration, isAdding, updateOffset) {
    var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
    if (!mom.isValid()) {
      return;
    }
    updateOffset = updateOffset == null ? true : updateOffset;
    if (months2) {
      setMonth(mom, get(mom, "Month") + months2 * isAdding);
    }
    if (days2) {
      set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
    }
    if (milliseconds2) {
      mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
    }
    if (updateOffset) {
      hooks.updateOffset(mom, days2 || months2);
    }
  }
  var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
  function isString(input) {
    return typeof input === "string" || input instanceof String;
  }
  function isMomentInput(input) {
    return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
  }
  function isMomentInputObject(input) {
    var objectTest = isObject$1(input) && !isObjectEmpty(input), propertyTest = false, properties = [
      "years",
      "year",
      "y",
      "months",
      "month",
      "M",
      "days",
      "day",
      "d",
      "dates",
      "date",
      "D",
      "hours",
      "hour",
      "h",
      "minutes",
      "minute",
      "m",
      "seconds",
      "second",
      "s",
      "milliseconds",
      "millisecond",
      "ms"
    ], i2, property, propertyLen = properties.length;
    for (i2 = 0; i2 < propertyLen; i2 += 1) {
      property = properties[i2];
      propertyTest = propertyTest || hasOwnProp(input, property);
    }
    return objectTest && propertyTest;
  }
  function isNumberOrStringArray(input) {
    var arrayTest = isArray$1(input), dataTypeTest = false;
    if (arrayTest) {
      dataTypeTest = input.filter(function(item) {
        return !isNumber(item) && isString(input);
      }).length === 0;
    }
    return arrayTest && dataTypeTest;
  }
  function isCalendarSpec(input) {
    var objectTest = isObject$1(input) && !isObjectEmpty(input), propertyTest = false, properties = [
      "sameDay",
      "nextDay",
      "lastDay",
      "nextWeek",
      "lastWeek",
      "sameElse"
    ], i2, property;
    for (i2 = 0; i2 < properties.length; i2 += 1) {
      property = properties[i2];
      propertyTest = propertyTest || hasOwnProp(input, property);
    }
    return objectTest && propertyTest;
  }
  function getCalendarFormat(myMoment, now2) {
    var diff2 = myMoment.diff(now2, "days", true);
    return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
  }
  function calendar$1(time, formats2) {
    if (arguments.length === 1) {
      if (!arguments[0]) {
        time = void 0;
        formats2 = void 0;
      } else if (isMomentInput(arguments[0])) {
        time = arguments[0];
        formats2 = void 0;
      } else if (isCalendarSpec(arguments[0])) {
        formats2 = arguments[0];
        time = void 0;
      }
    }
    var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats2 && (isFunction(formats2[format2]) ? formats2[format2].call(this, now2) : formats2[format2]);
    return this.format(output || this.localeData().calendar(format2, this, createLocal(now2)));
  }
  function clone() {
    return new Moment(this);
  }
  function isAfter(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }
    units = normalizeUnits(units) || "millisecond";
    if (units === "millisecond") {
      return this.valueOf() > localInput.valueOf();
    } else {
      return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
  }
  function isBefore(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }
    units = normalizeUnits(units) || "millisecond";
    if (units === "millisecond") {
      return this.valueOf() < localInput.valueOf();
    } else {
      return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
  }
  function isBetween(from2, to2, units, inclusivity) {
    var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
    if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
      return false;
    }
    inclusivity = inclusivity || "()";
    return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
  }
  function isSame(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input), inputMs;
    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }
    units = normalizeUnits(units) || "millisecond";
    if (units === "millisecond") {
      return this.valueOf() === localInput.valueOf();
    } else {
      inputMs = localInput.valueOf();
      return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
  }
  function isSameOrAfter(input, units) {
    return this.isSame(input, units) || this.isAfter(input, units);
  }
  function isSameOrBefore(input, units) {
    return this.isSame(input, units) || this.isBefore(input, units);
  }
  function diff(input, units, asFloat) {
    var that, zoneDelta, output;
    if (!this.isValid()) {
      return NaN;
    }
    that = cloneWithOffset(input, this);
    if (!that.isValid()) {
      return NaN;
    }
    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
    units = normalizeUnits(units);
    switch (units) {
      case "year":
        output = monthDiff(this, that) / 12;
        break;
      case "month":
        output = monthDiff(this, that);
        break;
      case "quarter":
        output = monthDiff(this, that) / 3;
        break;
      case "second":
        output = (this - that) / 1e3;
        break;
      case "minute":
        output = (this - that) / 6e4;
        break;
      case "hour":
        output = (this - that) / 36e5;
        break;
      case "day":
        output = (this - that - zoneDelta) / 864e5;
        break;
      case "week":
        output = (this - that - zoneDelta) / 6048e5;
        break;
      default:
        output = this - that;
    }
    return asFloat ? output : absFloor(output);
  }
  function monthDiff(a, b) {
    if (a.date() < b.date()) {
      return -monthDiff(b, a);
    }
    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
    if (b - anchor < 0) {
      anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
      adjust = (b - anchor) / (anchor - anchor2);
    } else {
      anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
      adjust = (b - anchor) / (anchor2 - anchor);
    }
    return -(wholeMonthDiff + adjust) || 0;
  }
  hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
  hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
  function toString() {
    return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
  }
  function toISOString(keepOffset) {
    if (!this.isValid()) {
      return null;
    }
    var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
    if (m.year() < 0 || m.year() > 9999) {
      return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
    }
    if (isFunction(Date.prototype.toISOString)) {
      if (utc) {
        return this.toDate().toISOString();
      } else {
        return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
      }
    }
    return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
  }
  function inspect() {
    if (!this.isValid()) {
      return "moment.invalid(/* " + this._i + " */)";
    }
    var func = "moment", zone = "", prefix, year, datetime, suffix;
    if (!this.isLocal()) {
      func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
      zone = "Z";
    }
    prefix = "[" + func + '("]';
    year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
    datetime = "-MM-DD[T]HH:mm:ss.SSS";
    suffix = zone + '[")]';
    return this.format(prefix + year + datetime + suffix);
  }
  function format(inputString) {
    if (!inputString) {
      inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
  }
  function from(time, withoutSuffix) {
    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
      return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
    } else {
      return this.localeData().invalidDate();
    }
  }
  function fromNow(withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
  }
  function to(time, withoutSuffix) {
    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
      return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
    } else {
      return this.localeData().invalidDate();
    }
  }
  function toNow(withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
  }
  function locale(key) {
    var newLocaleData;
    if (key === void 0) {
      return this._locale._abbr;
    } else {
      newLocaleData = getLocale(key);
      if (newLocaleData != null) {
        this._locale = newLocaleData;
      }
      return this;
    }
  }
  var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
    if (key === void 0) {
      return this.localeData();
    } else {
      return this.locale(key);
    }
  });
  function localeData() {
    return this._locale;
  }
  var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
  function mod$1(dividend, divisor) {
    return (dividend % divisor + divisor) % divisor;
  }
  function localStartOfDate(y, m, d) {
    if (y < 100 && y >= 0) {
      return new Date(y + 400, m, d) - MS_PER_400_YEARS;
    } else {
      return new Date(y, m, d).valueOf();
    }
  }
  function utcStartOfDate(y, m, d) {
    if (y < 100 && y >= 0) {
      return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
    } else {
      return Date.UTC(y, m, d);
    }
  }
  function startOf(units) {
    var time, startOfDate;
    units = normalizeUnits(units);
    if (units === void 0 || units === "millisecond" || !this.isValid()) {
      return this;
    }
    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
    switch (units) {
      case "year":
        time = startOfDate(this.year(), 0, 1);
        break;
      case "quarter":
        time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
        break;
      case "month":
        time = startOfDate(this.year(), this.month(), 1);
        break;
      case "week":
        time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
        break;
      case "isoWeek":
        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
        break;
      case "day":
      case "date":
        time = startOfDate(this.year(), this.month(), this.date());
        break;
      case "hour":
        time = this._d.valueOf();
        time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
        break;
      case "minute":
        time = this._d.valueOf();
        time -= mod$1(time, MS_PER_MINUTE);
        break;
      case "second":
        time = this._d.valueOf();
        time -= mod$1(time, MS_PER_SECOND);
        break;
    }
    this._d.setTime(time);
    hooks.updateOffset(this, true);
    return this;
  }
  function endOf(units) {
    var time, startOfDate;
    units = normalizeUnits(units);
    if (units === void 0 || units === "millisecond" || !this.isValid()) {
      return this;
    }
    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
    switch (units) {
      case "year":
        time = startOfDate(this.year() + 1, 0, 1) - 1;
        break;
      case "quarter":
        time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
        break;
      case "month":
        time = startOfDate(this.year(), this.month() + 1, 1) - 1;
        break;
      case "week":
        time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
        break;
      case "isoWeek":
        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
        break;
      case "day":
      case "date":
        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
        break;
      case "hour":
        time = this._d.valueOf();
        time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
        break;
      case "minute":
        time = this._d.valueOf();
        time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
        break;
      case "second":
        time = this._d.valueOf();
        time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
        break;
    }
    this._d.setTime(time);
    hooks.updateOffset(this, true);
    return this;
  }
  function valueOf() {
    return this._d.valueOf() - (this._offset || 0) * 6e4;
  }
  function unix() {
    return Math.floor(this.valueOf() / 1e3);
  }
  function toDate() {
    return new Date(this.valueOf());
  }
  function toArray() {
    var m = this;
    return [
      m.year(),
      m.month(),
      m.date(),
      m.hour(),
      m.minute(),
      m.second(),
      m.millisecond()
    ];
  }
  function toObject() {
    var m = this;
    return {
      years: m.year(),
      months: m.month(),
      date: m.date(),
      hours: m.hours(),
      minutes: m.minutes(),
      seconds: m.seconds(),
      milliseconds: m.milliseconds()
    };
  }
  function toJSON() {
    return this.isValid() ? this.toISOString() : null;
  }
  function isValid$2() {
    return isValid(this);
  }
  function parsingFlags() {
    return extend({}, getParsingFlags(this));
  }
  function invalidAt() {
    return getParsingFlags(this).overflow;
  }
  function creationData() {
    return {
      input: this._i,
      format: this._f,
      locale: this._locale,
      isUTC: this._isUTC,
      strict: this._strict
    };
  }
  addFormatToken("N", 0, 0, "eraAbbr");
  addFormatToken("NN", 0, 0, "eraAbbr");
  addFormatToken("NNN", 0, 0, "eraAbbr");
  addFormatToken("NNNN", 0, 0, "eraName");
  addFormatToken("NNNNN", 0, 0, "eraNarrow");
  addFormatToken("y", ["y", 1], "yo", "eraYear");
  addFormatToken("y", ["yy", 2], 0, "eraYear");
  addFormatToken("y", ["yyy", 3], 0, "eraYear");
  addFormatToken("y", ["yyyy", 4], 0, "eraYear");
  addRegexToken("N", matchEraAbbr);
  addRegexToken("NN", matchEraAbbr);
  addRegexToken("NNN", matchEraAbbr);
  addRegexToken("NNNN", matchEraName);
  addRegexToken("NNNNN", matchEraNarrow);
  addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config, token2) {
    var era = config._locale.erasParse(input, token2, config._strict);
    if (era) {
      getParsingFlags(config).era = era;
    } else {
      getParsingFlags(config).invalidEra = input;
    }
  });
  addRegexToken("y", matchUnsigned);
  addRegexToken("yy", matchUnsigned);
  addRegexToken("yyy", matchUnsigned);
  addRegexToken("yyyy", matchUnsigned);
  addRegexToken("yo", matchEraYearOrdinal);
  addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
  addParseToken(["yo"], function(input, array, config, token2) {
    var match;
    if (config._locale._eraYearOrdinalRegex) {
      match = input.match(config._locale._eraYearOrdinalRegex);
    }
    if (config._locale.eraYearOrdinalParse) {
      array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
    } else {
      array[YEAR] = parseInt(input, 10);
    }
  });
  function localeEras(m, format2) {
    var i2, l, date, eras = this._eras || getLocale("en")._eras;
    for (i2 = 0, l = eras.length; i2 < l; ++i2) {
      switch (typeof eras[i2].since) {
        case "string":
          date = hooks(eras[i2].since).startOf("day");
          eras[i2].since = date.valueOf();
          break;
      }
      switch (typeof eras[i2].until) {
        case "undefined":
          eras[i2].until = Infinity;
          break;
        case "string":
          date = hooks(eras[i2].until).startOf("day").valueOf();
          eras[i2].until = date.valueOf();
          break;
      }
    }
    return eras;
  }
  function localeErasParse(eraName, format2, strict) {
    var i2, l, eras = this.eras(), name, abbr, narrow;
    eraName = eraName.toUpperCase();
    for (i2 = 0, l = eras.length; i2 < l; ++i2) {
      name = eras[i2].name.toUpperCase();
      abbr = eras[i2].abbr.toUpperCase();
      narrow = eras[i2].narrow.toUpperCase();
      if (strict) {
        switch (format2) {
          case "N":
          case "NN":
          case "NNN":
            if (abbr === eraName) {
              return eras[i2];
            }
            break;
          case "NNNN":
            if (name === eraName) {
              return eras[i2];
            }
            break;
          case "NNNNN":
            if (narrow === eraName) {
              return eras[i2];
            }
            break;
        }
      } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
        return eras[i2];
      }
    }
  }
  function localeErasConvertYear(era, year) {
    var dir = era.since <= era.until ? 1 : -1;
    if (year === void 0) {
      return hooks(era.since).year();
    } else {
      return hooks(era.since).year() + (year - era.offset) * dir;
    }
  }
  function getEraName() {
    var i2, l, val, eras = this.localeData().eras();
    for (i2 = 0, l = eras.length; i2 < l; ++i2) {
      val = this.clone().startOf("day").valueOf();
      if (eras[i2].since <= val && val <= eras[i2].until) {
        return eras[i2].name;
      }
      if (eras[i2].until <= val && val <= eras[i2].since) {
        return eras[i2].name;
      }
    }
    return "";
  }
  function getEraNarrow() {
    var i2, l, val, eras = this.localeData().eras();
    for (i2 = 0, l = eras.length; i2 < l; ++i2) {
      val = this.clone().startOf("day").valueOf();
      if (eras[i2].since <= val && val <= eras[i2].until) {
        return eras[i2].narrow;
      }
      if (eras[i2].until <= val && val <= eras[i2].since) {
        return eras[i2].narrow;
      }
    }
    return "";
  }
  function getEraAbbr() {
    var i2, l, val, eras = this.localeData().eras();
    for (i2 = 0, l = eras.length; i2 < l; ++i2) {
      val = this.clone().startOf("day").valueOf();
      if (eras[i2].since <= val && val <= eras[i2].until) {
        return eras[i2].abbr;
      }
      if (eras[i2].until <= val && val <= eras[i2].since) {
        return eras[i2].abbr;
      }
    }
    return "";
  }
  function getEraYear() {
    var i2, l, dir, val, eras = this.localeData().eras();
    for (i2 = 0, l = eras.length; i2 < l; ++i2) {
      dir = eras[i2].since <= eras[i2].until ? 1 : -1;
      val = this.clone().startOf("day").valueOf();
      if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
        return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
      }
    }
    return this.year();
  }
  function erasNameRegex(isStrict) {
    if (!hasOwnProp(this, "_erasNameRegex")) {
      computeErasParse.call(this);
    }
    return isStrict ? this._erasNameRegex : this._erasRegex;
  }
  function erasAbbrRegex(isStrict) {
    if (!hasOwnProp(this, "_erasAbbrRegex")) {
      computeErasParse.call(this);
    }
    return isStrict ? this._erasAbbrRegex : this._erasRegex;
  }
  function erasNarrowRegex(isStrict) {
    if (!hasOwnProp(this, "_erasNarrowRegex")) {
      computeErasParse.call(this);
    }
    return isStrict ? this._erasNarrowRegex : this._erasRegex;
  }
  function matchEraAbbr(isStrict, locale2) {
    return locale2.erasAbbrRegex(isStrict);
  }
  function matchEraName(isStrict, locale2) {
    return locale2.erasNameRegex(isStrict);
  }
  function matchEraNarrow(isStrict, locale2) {
    return locale2.erasNarrowRegex(isStrict);
  }
  function matchEraYearOrdinal(isStrict, locale2) {
    return locale2._eraYearOrdinalRegex || matchUnsigned;
  }
  function computeErasParse() {
    var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l, eras = this.eras();
    for (i2 = 0, l = eras.length; i2 < l; ++i2) {
      namePieces.push(regexEscape(eras[i2].name));
      abbrPieces.push(regexEscape(eras[i2].abbr));
      narrowPieces.push(regexEscape(eras[i2].narrow));
      mixedPieces.push(regexEscape(eras[i2].name));
      mixedPieces.push(regexEscape(eras[i2].abbr));
      mixedPieces.push(regexEscape(eras[i2].narrow));
    }
    this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
    this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
    this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
    this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
  }
  addFormatToken(0, ["gg", 2], 0, function() {
    return this.weekYear() % 100;
  });
  addFormatToken(0, ["GG", 2], 0, function() {
    return this.isoWeekYear() % 100;
  });
  function addWeekYearFormatToken(token2, getter) {
    addFormatToken(0, [token2, token2.length], 0, getter);
  }
  addWeekYearFormatToken("gggg", "weekYear");
  addWeekYearFormatToken("ggggg", "weekYear");
  addWeekYearFormatToken("GGGG", "isoWeekYear");
  addWeekYearFormatToken("GGGGG", "isoWeekYear");
  addUnitAlias("weekYear", "gg");
  addUnitAlias("isoWeekYear", "GG");
  addUnitPriority("weekYear", 1);
  addUnitPriority("isoWeekYear", 1);
  addRegexToken("G", matchSigned);
  addRegexToken("g", matchSigned);
  addRegexToken("GG", match1to2, match2);
  addRegexToken("gg", match1to2, match2);
  addRegexToken("GGGG", match1to4, match4);
  addRegexToken("gggg", match1to4, match4);
  addRegexToken("GGGGG", match1to6, match6);
  addRegexToken("ggggg", match1to6, match6);
  addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token2) {
    week[token2.substr(0, 2)] = toInt(input);
  });
  addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
    week[token2] = hooks.parseTwoDigitYear(input);
  });
  function getSetWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
  }
  function getSetISOWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
  }
  function getISOWeeksInYear() {
    return weeksInYear(this.year(), 1, 4);
  }
  function getISOWeeksInISOWeekYear() {
    return weeksInYear(this.isoWeekYear(), 1, 4);
  }
  function getWeeksInYear() {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
  }
  function getWeeksInWeekYear() {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
  }
  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
      return weekOfYear(this, dow, doy).year;
    } else {
      weeksTarget = weeksInYear(input, dow, doy);
      if (week > weeksTarget) {
        week = weeksTarget;
      }
      return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
  }
  function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
  }
  addFormatToken("Q", 0, "Qo", "quarter");
  addUnitAlias("quarter", "Q");
  addUnitPriority("quarter", 7);
  addRegexToken("Q", match1);
  addParseToken("Q", function(input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
  });
  function getSetQuarter(input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
  }
  addFormatToken("D", ["DD", 2], "Do", "date");
  addUnitAlias("date", "D");
  addUnitPriority("date", 9);
  addRegexToken("D", match1to2);
  addRegexToken("DD", match1to2, match2);
  addRegexToken("Do", function(isStrict, locale2) {
    return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
  });
  addParseToken(["D", "DD"], DATE);
  addParseToken("Do", function(input, array) {
    array[DATE] = toInt(input.match(match1to2)[0]);
  });
  var getSetDayOfMonth = makeGetSet("Date", true);
  addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
  addUnitAlias("dayOfYear", "DDD");
  addUnitPriority("dayOfYear", 4);
  addRegexToken("DDD", match1to3);
  addRegexToken("DDDD", match3);
  addParseToken(["DDD", "DDDD"], function(input, array, config) {
    config._dayOfYear = toInt(input);
  });
  function getSetDayOfYear(input) {
    var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
    return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
  }
  addFormatToken("m", ["mm", 2], 0, "minute");
  addUnitAlias("minute", "m");
  addUnitPriority("minute", 14);
  addRegexToken("m", match1to2);
  addRegexToken("mm", match1to2, match2);
  addParseToken(["m", "mm"], MINUTE);
  var getSetMinute = makeGetSet("Minutes", false);
  addFormatToken("s", ["ss", 2], 0, "second");
  addUnitAlias("second", "s");
  addUnitPriority("second", 15);
  addRegexToken("s", match1to2);
  addRegexToken("ss", match1to2, match2);
  addParseToken(["s", "ss"], SECOND);
  var getSetSecond = makeGetSet("Seconds", false);
  addFormatToken("S", 0, 0, function() {
    return ~~(this.millisecond() / 100);
  });
  addFormatToken(0, ["SS", 2], 0, function() {
    return ~~(this.millisecond() / 10);
  });
  addFormatToken(0, ["SSS", 3], 0, "millisecond");
  addFormatToken(0, ["SSSS", 4], 0, function() {
    return this.millisecond() * 10;
  });
  addFormatToken(0, ["SSSSS", 5], 0, function() {
    return this.millisecond() * 100;
  });
  addFormatToken(0, ["SSSSSS", 6], 0, function() {
    return this.millisecond() * 1e3;
  });
  addFormatToken(0, ["SSSSSSS", 7], 0, function() {
    return this.millisecond() * 1e4;
  });
  addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
    return this.millisecond() * 1e5;
  });
  addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
    return this.millisecond() * 1e6;
  });
  addUnitAlias("millisecond", "ms");
  addUnitPriority("millisecond", 16);
  addRegexToken("S", match1to3, match1);
  addRegexToken("SS", match1to3, match2);
  addRegexToken("SSS", match1to3, match3);
  var token, getSetMillisecond;
  for (token = "SSSS"; token.length <= 9; token += "S") {
    addRegexToken(token, matchUnsigned);
  }
  function parseMs(input, array) {
    array[MILLISECOND] = toInt(("0." + input) * 1e3);
  }
  for (token = "S"; token.length <= 9; token += "S") {
    addParseToken(token, parseMs);
  }
  getSetMillisecond = makeGetSet("Milliseconds", false);
  addFormatToken("z", 0, 0, "zoneAbbr");
  addFormatToken("zz", 0, 0, "zoneName");
  function getZoneAbbr() {
    return this._isUTC ? "UTC" : "";
  }
  function getZoneName() {
    return this._isUTC ? "Coordinated Universal Time" : "";
  }
  var proto = Moment.prototype;
  proto.add = add;
  proto.calendar = calendar$1;
  proto.clone = clone;
  proto.diff = diff;
  proto.endOf = endOf;
  proto.format = format;
  proto.from = from;
  proto.fromNow = fromNow;
  proto.to = to;
  proto.toNow = toNow;
  proto.get = stringGet;
  proto.invalidAt = invalidAt;
  proto.isAfter = isAfter;
  proto.isBefore = isBefore;
  proto.isBetween = isBetween;
  proto.isSame = isSame;
  proto.isSameOrAfter = isSameOrAfter;
  proto.isSameOrBefore = isSameOrBefore;
  proto.isValid = isValid$2;
  proto.lang = lang;
  proto.locale = locale;
  proto.localeData = localeData;
  proto.max = prototypeMax;
  proto.min = prototypeMin;
  proto.parsingFlags = parsingFlags;
  proto.set = stringSet;
  proto.startOf = startOf;
  proto.subtract = subtract;
  proto.toArray = toArray;
  proto.toObject = toObject;
  proto.toDate = toDate;
  proto.toISOString = toISOString;
  proto.inspect = inspect;
  if (typeof Symbol !== "undefined" && Symbol.for != null) {
    proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
      return "Moment<" + this.format() + ">";
    };
  }
  proto.toJSON = toJSON;
  proto.toString = toString;
  proto.unix = unix;
  proto.valueOf = valueOf;
  proto.creationData = creationData;
  proto.eraName = getEraName;
  proto.eraNarrow = getEraNarrow;
  proto.eraAbbr = getEraAbbr;
  proto.eraYear = getEraYear;
  proto.year = getSetYear;
  proto.isLeapYear = getIsLeapYear;
  proto.weekYear = getSetWeekYear;
  proto.isoWeekYear = getSetISOWeekYear;
  proto.quarter = proto.quarters = getSetQuarter;
  proto.month = getSetMonth;
  proto.daysInMonth = getDaysInMonth;
  proto.week = proto.weeks = getSetWeek;
  proto.isoWeek = proto.isoWeeks = getSetISOWeek;
  proto.weeksInYear = getWeeksInYear;
  proto.weeksInWeekYear = getWeeksInWeekYear;
  proto.isoWeeksInYear = getISOWeeksInYear;
  proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
  proto.date = getSetDayOfMonth;
  proto.day = proto.days = getSetDayOfWeek;
  proto.weekday = getSetLocaleDayOfWeek;
  proto.isoWeekday = getSetISODayOfWeek;
  proto.dayOfYear = getSetDayOfYear;
  proto.hour = proto.hours = getSetHour;
  proto.minute = proto.minutes = getSetMinute;
  proto.second = proto.seconds = getSetSecond;
  proto.millisecond = proto.milliseconds = getSetMillisecond;
  proto.utcOffset = getSetOffset;
  proto.utc = setOffsetToUTC;
  proto.local = setOffsetToLocal;
  proto.parseZone = setOffsetToParsedOffset;
  proto.hasAlignedHourOffset = hasAlignedHourOffset;
  proto.isDST = isDaylightSavingTime;
  proto.isLocal = isLocal;
  proto.isUtcOffset = isUtcOffset;
  proto.isUtc = isUtc;
  proto.isUTC = isUtc;
  proto.zoneAbbr = getZoneAbbr;
  proto.zoneName = getZoneName;
  proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
  proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
  proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
  proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
  proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
  function createUnix(input) {
    return createLocal(input * 1e3);
  }
  function createInZone() {
    return createLocal.apply(null, arguments).parseZone();
  }
  function preParsePostFormat(string) {
    return string;
  }
  var proto$1 = Locale.prototype;
  proto$1.calendar = calendar;
  proto$1.longDateFormat = longDateFormat;
  proto$1.invalidDate = invalidDate;
  proto$1.ordinal = ordinal;
  proto$1.preparse = preParsePostFormat;
  proto$1.postformat = preParsePostFormat;
  proto$1.relativeTime = relativeTime;
  proto$1.pastFuture = pastFuture;
  proto$1.set = set;
  proto$1.eras = localeEras;
  proto$1.erasParse = localeErasParse;
  proto$1.erasConvertYear = localeErasConvertYear;
  proto$1.erasAbbrRegex = erasAbbrRegex;
  proto$1.erasNameRegex = erasNameRegex;
  proto$1.erasNarrowRegex = erasNarrowRegex;
  proto$1.months = localeMonths;
  proto$1.monthsShort = localeMonthsShort;
  proto$1.monthsParse = localeMonthsParse;
  proto$1.monthsRegex = monthsRegex;
  proto$1.monthsShortRegex = monthsShortRegex;
  proto$1.week = localeWeek;
  proto$1.firstDayOfYear = localeFirstDayOfYear;
  proto$1.firstDayOfWeek = localeFirstDayOfWeek;
  proto$1.weekdays = localeWeekdays;
  proto$1.weekdaysMin = localeWeekdaysMin;
  proto$1.weekdaysShort = localeWeekdaysShort;
  proto$1.weekdaysParse = localeWeekdaysParse;
  proto$1.weekdaysRegex = weekdaysRegex;
  proto$1.weekdaysShortRegex = weekdaysShortRegex;
  proto$1.weekdaysMinRegex = weekdaysMinRegex;
  proto$1.isPM = localeIsPM;
  proto$1.meridiem = localeMeridiem;
  function get$1(format2, index, field, setter) {
    var locale2 = getLocale(), utc = createUTC().set(setter, index);
    return locale2[field](utc, format2);
  }
  function listMonthsImpl(format2, index, field) {
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
    if (index != null) {
      return get$1(format2, index, field, "month");
    }
    var i2, out = [];
    for (i2 = 0; i2 < 12; i2++) {
      out[i2] = get$1(format2, i2, field, "month");
    }
    return out;
  }
  function listWeekdaysImpl(localeSorted, format2, index, field) {
    if (typeof localeSorted === "boolean") {
      if (isNumber(format2)) {
        index = format2;
        format2 = void 0;
      }
      format2 = format2 || "";
    } else {
      format2 = localeSorted;
      index = format2;
      localeSorted = false;
      if (isNumber(format2)) {
        index = format2;
        format2 = void 0;
      }
      format2 = format2 || "";
    }
    var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i2, out = [];
    if (index != null) {
      return get$1(format2, (index + shift) % 7, field, "day");
    }
    for (i2 = 0; i2 < 7; i2++) {
      out[i2] = get$1(format2, (i2 + shift) % 7, field, "day");
    }
    return out;
  }
  function listMonths(format2, index) {
    return listMonthsImpl(format2, index, "months");
  }
  function listMonthsShort(format2, index) {
    return listMonthsImpl(format2, index, "monthsShort");
  }
  function listWeekdays(localeSorted, format2, index) {
    return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
  }
  function listWeekdaysShort(localeSorted, format2, index) {
    return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
  }
  function listWeekdaysMin(localeSorted, format2, index) {
    return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
  }
  getSetGlobalLocale("en", {
    eras: [
      {
        since: "0001-01-01",
        until: Infinity,
        offset: 1,
        name: "Anno Domini",
        narrow: "AD",
        abbr: "AD"
      },
      {
        since: "0000-12-31",
        until: -Infinity,
        offset: 1,
        name: "Before Christ",
        narrow: "BC",
        abbr: "BC"
      }
    ],
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal: function(number) {
      var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
      return number + output;
    }
  });
  hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
  hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
  var mathAbs = Math.abs;
  function abs() {
    var data = this._data;
    this._milliseconds = mathAbs(this._milliseconds);
    this._days = mathAbs(this._days);
    this._months = mathAbs(this._months);
    data.milliseconds = mathAbs(data.milliseconds);
    data.seconds = mathAbs(data.seconds);
    data.minutes = mathAbs(data.minutes);
    data.hours = mathAbs(data.hours);
    data.months = mathAbs(data.months);
    data.years = mathAbs(data.years);
    return this;
  }
  function addSubtract$1(duration, input, value, direction) {
    var other = createDuration(input, value);
    duration._milliseconds += direction * other._milliseconds;
    duration._days += direction * other._days;
    duration._months += direction * other._months;
    return duration._bubble();
  }
  function add$1(input, value) {
    return addSubtract$1(this, input, value, 1);
  }
  function subtract$1(input, value) {
    return addSubtract$1(this, input, value, -1);
  }
  function absCeil(number) {
    if (number < 0) {
      return Math.floor(number);
    } else {
      return Math.ceil(number);
    }
  }
  function bubble() {
    var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
    if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
      milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
      days2 = 0;
      months2 = 0;
    }
    data.milliseconds = milliseconds2 % 1e3;
    seconds2 = absFloor(milliseconds2 / 1e3);
    data.seconds = seconds2 % 60;
    minutes2 = absFloor(seconds2 / 60);
    data.minutes = minutes2 % 60;
    hours2 = absFloor(minutes2 / 60);
    data.hours = hours2 % 24;
    days2 += absFloor(hours2 / 24);
    monthsFromDays = absFloor(daysToMonths(days2));
    months2 += monthsFromDays;
    days2 -= absCeil(monthsToDays(monthsFromDays));
    years2 = absFloor(months2 / 12);
    months2 %= 12;
    data.days = days2;
    data.months = months2;
    data.years = years2;
    return this;
  }
  function daysToMonths(days2) {
    return days2 * 4800 / 146097;
  }
  function monthsToDays(months2) {
    return months2 * 146097 / 4800;
  }
  function as(units) {
    if (!this.isValid()) {
      return NaN;
    }
    var days2, months2, milliseconds2 = this._milliseconds;
    units = normalizeUnits(units);
    if (units === "month" || units === "quarter" || units === "year") {
      days2 = this._days + milliseconds2 / 864e5;
      months2 = this._months + daysToMonths(days2);
      switch (units) {
        case "month":
          return months2;
        case "quarter":
          return months2 / 3;
        case "year":
          return months2 / 12;
      }
    } else {
      days2 = this._days + Math.round(monthsToDays(this._months));
      switch (units) {
        case "week":
          return days2 / 7 + milliseconds2 / 6048e5;
        case "day":
          return days2 + milliseconds2 / 864e5;
        case "hour":
          return days2 * 24 + milliseconds2 / 36e5;
        case "minute":
          return days2 * 1440 + milliseconds2 / 6e4;
        case "second":
          return days2 * 86400 + milliseconds2 / 1e3;
        case "millisecond":
          return Math.floor(days2 * 864e5) + milliseconds2;
        default:
          throw new Error("Unknown unit " + units);
      }
    }
  }
  function valueOf$1() {
    if (!this.isValid()) {
      return NaN;
    }
    return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
  }
  function makeAs(alias) {
    return function() {
      return this.as(alias);
    };
  }
  var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
  function clone$1() {
    return createDuration(this);
  }
  function get$2(units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[units + "s"]() : NaN;
  }
  function makeGetter(name) {
    return function() {
      return this.isValid() ? this._data[name] : NaN;
    };
  }
  var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
  function weeks() {
    return absFloor(this.days() / 7);
  }
  var round = Math.round, thresholds = {
    ss: 44,
    s: 45,
    m: 45,
    h: 22,
    d: 26,
    w: null,
    M: 11
  };
  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
    return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
  }
  function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
    var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
    if (thresholds2.w != null) {
      a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
    }
    a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale2;
    return substituteTimeAgo.apply(null, a);
  }
  function getSetRelativeTimeRounding(roundingFunction) {
    if (roundingFunction === void 0) {
      return round;
    }
    if (typeof roundingFunction === "function") {
      round = roundingFunction;
      return true;
    }
    return false;
  }
  function getSetRelativeTimeThreshold(threshold, limit) {
    if (thresholds[threshold] === void 0) {
      return false;
    }
    if (limit === void 0) {
      return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    if (threshold === "s") {
      thresholds.ss = limit - 1;
    }
    return true;
  }
  function humanize(argWithSuffix, argThresholds) {
    if (!this.isValid()) {
      return this.localeData().invalidDate();
    }
    var withSuffix = false, th = thresholds, locale2, output;
    if (typeof argWithSuffix === "object") {
      argThresholds = argWithSuffix;
      argWithSuffix = false;
    }
    if (typeof argWithSuffix === "boolean") {
      withSuffix = argWithSuffix;
    }
    if (typeof argThresholds === "object") {
      th = Object.assign({}, thresholds, argThresholds);
      if (argThresholds.s != null && argThresholds.ss == null) {
        th.ss = argThresholds.s - 1;
      }
    }
    locale2 = this.localeData();
    output = relativeTime$1(this, !withSuffix, th, locale2);
    if (withSuffix) {
      output = locale2.pastFuture(+this, output);
    }
    return locale2.postformat(output);
  }
  var abs$1 = Math.abs;
  function sign(x) {
    return (x > 0) - (x < 0) || +x;
  }
  function toISOString$1() {
    if (!this.isValid()) {
      return this.localeData().invalidDate();
    }
    var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
    if (!total) {
      return "P0D";
    }
    minutes2 = absFloor(seconds2 / 60);
    hours2 = absFloor(minutes2 / 60);
    seconds2 %= 60;
    minutes2 %= 60;
    years2 = absFloor(months2 / 12);
    months2 %= 12;
    s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
    totalSign = total < 0 ? "-" : "";
    ymSign = sign(this._months) !== sign(total) ? "-" : "";
    daysSign = sign(this._days) !== sign(total) ? "-" : "";
    hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
    return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
  }
  var proto$2 = Duration.prototype;
  proto$2.isValid = isValid$1;
  proto$2.abs = abs;
  proto$2.add = add$1;
  proto$2.subtract = subtract$1;
  proto$2.as = as;
  proto$2.asMilliseconds = asMilliseconds;
  proto$2.asSeconds = asSeconds;
  proto$2.asMinutes = asMinutes;
  proto$2.asHours = asHours;
  proto$2.asDays = asDays;
  proto$2.asWeeks = asWeeks;
  proto$2.asMonths = asMonths;
  proto$2.asQuarters = asQuarters;
  proto$2.asYears = asYears;
  proto$2.valueOf = valueOf$1;
  proto$2._bubble = bubble;
  proto$2.clone = clone$1;
  proto$2.get = get$2;
  proto$2.milliseconds = milliseconds;
  proto$2.seconds = seconds;
  proto$2.minutes = minutes;
  proto$2.hours = hours;
  proto$2.days = days;
  proto$2.weeks = weeks;
  proto$2.months = months;
  proto$2.years = years;
  proto$2.humanize = humanize;
  proto$2.toISOString = toISOString$1;
  proto$2.toString = toISOString$1;
  proto$2.toJSON = toISOString$1;
  proto$2.locale = locale;
  proto$2.localeData = localeData;
  proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
  proto$2.lang = lang;
  addFormatToken("X", 0, 0, "unix");
  addFormatToken("x", 0, 0, "valueOf");
  addRegexToken("x", matchSigned);
  addRegexToken("X", matchTimestamp);
  addParseToken("X", function(input, array, config) {
    config._d = new Date(parseFloat(input) * 1e3);
  });
  addParseToken("x", function(input, array, config) {
    config._d = new Date(toInt(input));
  });
  //! moment.js
  hooks.version = "2.29.3";
  setHookCallback(createLocal);
  hooks.fn = proto;
  hooks.min = min;
  hooks.max = max;
  hooks.now = now;
  hooks.utc = createUTC;
  hooks.unix = createUnix;
  hooks.months = listMonths;
  hooks.isDate = isDate;
  hooks.locale = getSetGlobalLocale;
  hooks.invalid = createInvalid;
  hooks.duration = createDuration;
  hooks.isMoment = isMoment;
  hooks.weekdays = listWeekdays;
  hooks.parseZone = createInZone;
  hooks.localeData = getLocale;
  hooks.isDuration = isDuration;
  hooks.monthsShort = listMonthsShort;
  hooks.weekdaysMin = listWeekdaysMin;
  hooks.defineLocale = defineLocale;
  hooks.updateLocale = updateLocale;
  hooks.locales = listLocales;
  hooks.weekdaysShort = listWeekdaysShort;
  hooks.normalizeUnits = normalizeUnits;
  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
  hooks.calendarFormat = getCalendarFormat;
  hooks.prototype = proto;
  hooks.HTML5_FMT = {
    DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
    DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
    DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
    DATE: "YYYY-MM-DD",
    TIME: "HH:mm",
    TIME_SECONDS: "HH:mm:ss",
    TIME_MS: "HH:mm:ss.SSS",
    WEEK: "GGGG-[W]WW",
    MONTH: "YYYY-MM"
  };
  hooks.updateLocale("en", {
    relativeTime: {
      s: "%d\u79D2\u524D",
      m: "1\u5206\u949F\u524D",
      mm: "%d\u5206\u949F\u524D",
      h: "1\u5C0F\u65F6\u524D",
      hh: "%d\u5C0F\u65F6\u524D",
      d: "1\u5929\u524D",
      dd: "%d\u5929\u524D",
      M: "1\u4E2A\u6708\u524D",
      MM: "%d\u4E2A\u6708\u524D",
      y: "1\u5E74\u524D",
      yy: "%d\u5E74\u524D"
    }
  });
  function fileParse(file, type = "base64") {
    return new Promise((resolve) => {
      const fileRead = new FileReader();
      if (type === "base64") {
        fileRead.readAsDataURL(file);
      } else if (type === "buffer") {
        fileRead.readAsArrayBuffer(file);
      }
      fileRead.onload = (event) => resolve(event.target.result);
    });
  }
  function formatDate(createTime) {
    return hooks(createTime).toNow(true);
  }
  const formatMsgDate = (timestamp) => {
    const week = (w) => {
      switch (w) {
        case "1":
          return "\u4E00";
        case "2":
          return "\u4E8C";
        case "3":
          return "\u4E09";
        case "4":
          return "\u56DB";
        case "5":
          return "\u4E94";
        case "6":
          return "\u516D";
        case "7":
          return "\u65E5";
      }
    };
    if (hooks(timestamp).isSameOrAfter(hooks(), "day")) {
      return hooks(timestamp).format("H:mm");
    } else if (hooks(timestamp).isSameOrAfter(hooks().subtract(1, "day"), "day")) {
      return `\u6628\u5929${hooks(timestamp).format("H:mm")}`;
    } else if (hooks(timestamp).isSameOrAfter(hooks().subtract(7, "day"), "day")) {
      return `\u661F\u671F${week(hooks(timestamp).format("E"))} ${hooks(timestamp).format("H:mm")}`;
    } else {
      return hooks(timestamp).format("YYYY\u5E74M\u6708D\u65E5 H:mm");
    }
  };
  const uploadImage = (params) => {
    return request(`/files/uploadImage`, "POST", params, "application/x-www-form-urlencoded");
  };
  const mergeFile = (params) => {
    return request(`/files/mergeFile`, "POST", params);
  };
  const __default__$6 = {
    onShow: function() {
      if (getTotalIM() > 0) {
        uni.setTabBarBadge({
          index: 2,
          text: "\xB7\xB7\xB7"
        });
      } else {
        uni.removeTabBarBadge({
          index: 2
        });
      }
    }
  };
  const _sfc_main$n = /* @__PURE__ */ Object.assign(__default__$6, {
    setup(__props) {
      const store2 = useStore();
      const userInfo = vue.computed(() => store2.state.user.userInfo).value;
      let src2 = vue.ref("");
      let progressPercent = vue.ref(0);
      let partListLength = vue.ref(0);
      let cutParts = vue.ref([]);
      let uploadText = vue.ref("\u6682\u505C");
      let uploadFlag = vue.ref(false);
      let uploadBtn = vue.ref(false);
      let abort = vue.ref(false);
      let uploadLoading = vue.ref(false);
      let hash = vue.ref("");
      let partList = vue.ref([]);
      let requestList = vue.ref([]);
      vue.ref(0);
      vue.ref(0);
      const complete = () => {
        formatAppLog("log", "at pages/find/index.vue:252", "\u53BB\u8C03\u7528\u63A5\u53E3\u5408\u5E76\u6587\u4EF6");
        const { avatar, username } = userInfo;
        const params = {
          hash: hash.value,
          title: formData.title,
          hobby: formData.hobby,
          fileType: formData.fileType,
          content: formData.content,
          avatar,
          username
        };
        mergeFile(params).then((data) => {
          formatAppLog("log", "at pages/find/index.vue:264", "data===", data);
          uploadFlag.value = false;
          uploadLoading.value = false;
        });
      };
      const promiseSend = (item, index) => {
        return new Promise((resolve, reject) => {
          const blobUrl = URL.createObjectURL(item.chunk);
          formatAppLog("log", "at pages/find/index.vue:274", "blobUrl===", blobUrl);
          uni.uploadFile({
            url: "/prod/files/uploadLargeFile",
            filePath: blobUrl,
            name: "file",
            fileType: "video",
            formData: {
              filename: item.filename
            },
            success: (uploadFileRes) => {
              formatAppLog("log", "at pages/find/index.vue:286", "uploadFileRes===", uploadFileRes);
              const { statusCode } = uploadFileRes;
              formatAppLog("log", "at pages/find/index.vue:289", "index================================", index);
              if (statusCode === 200) {
                let parts = partList.value;
                const part = parts.splice(0, 1);
                cutParts.value.push(part);
                partList.value = [...parts];
                formatAppLog("log", "at pages/find/index.vue:296", "partList=", partList);
                formatAppLog("log", "at pages/find/index.vue:297", "cutPartslength=", cutParts.value.length);
                formatAppLog("log", "at pages/find/index.vue:298", "partListLength=", partListLength.value);
                progressPercent.value = (cutParts.value.length / partListLength.value * 100).toFixed(2);
                resolve(true);
              } else {
                resolve(false);
              }
            },
            fail: (err) => {
              formatAppLog("log", "at pages/find/index.vue:309", "err=", err);
            }
          });
        });
      };
      const sendRequest = async () => {
        uploadFlag.value = true;
        requestList.value = [];
        formatAppLog("log", "at pages/find/index.vue:352", "partList.value=", partList.value);
        partList.value.forEach((item, index) => {
          const fn = () => promiseSend(item, index);
          requestList.value.push(fn);
        });
        let i2 = 0;
        const send = async () => {
          if (abort.value) {
            return;
          }
          formatAppLog("log", "at pages/find/index.vue:363", "abort", abort.value);
          formatAppLog("log", "at pages/find/index.vue:364", "requestList.value===", requestList.value);
          if (i2 >= requestList.value.length) {
            complete();
            return;
          }
          try {
            const isStep = await requestList.value[i2]();
            formatAppLog("log", "at pages/find/index.vue:371", "isStep=", isStep);
            if (isStep) {
              i2++;
            }
            send();
          } catch (error) {
            throw new Error("err happened");
          }
        };
        send();
      };
      const sends = async (tempFile) => {
        formatAppLog("log", "at pages/find/index.vue:398", "tempFiles===", tempFile);
        uploadLoading.value = true;
        const buffer = await fileParse(tempFile, "buffer");
        const spark = new SparkMD5.ArrayBuffer();
        let suffix;
        spark.append(buffer);
        hash.value = spark.end();
        suffix = /\.([0-9a-zA-Z]+)$/i.exec(tempFile.name)[1];
        const partSize = 524288;
        let cut = 0;
        partListLength.value = Math.ceil(tempFile.size / partSize);
        formatAppLog("log", "at pages/find/index.vue:420", "partListLength=", partListLength.value);
        for (let i2 = 0; i2 < partListLength.value; i2++) {
          let item = {
            chunk: tempFile.slice(cut, cut + partSize),
            filename: `${hash.value}_${i2}_.${suffix}`
          };
          cut += partSize;
          partList.value.push(item);
        }
        sendRequest();
      };
      const uploadVideo = () => {
        uni.chooseVideo({
          sourceType: ["camera", "album"],
          success: function(res2) {
            formatAppLog("log", "at pages/find/index.vue:436", "res===", res2);
            src2.value = res2.tempFilePath;
            uploadBtn.value = true;
            sends(res2.tempFile);
          }
        });
      };
      const onPause = () => {
        if (uploadBtn.value) {
          uploadText.value = "\u7EE7\u7EED";
          uploadBtn.value = false;
          abort.value = true;
        } else {
          uploadText.value = "\u6682\u505C";
          uploadBtn.value = true;
          abort.value = false;
          sendRequest();
        }
      };
      vue.ref("");
      vue.ref(0);
      const onSelectImage = async (e2) => {
        formatAppLog("log", "at pages/find/index.vue:513", "image=", e2);
        if (!e2)
          return;
        const { tempFilePaths, tempFiles } = e2;
        uploadLoading.value = true;
        const files = Object.assign([], tempFiles);
        const fileAll = [];
        for (let item of files) {
          const chunk = await fileParse(item, "base64");
          fileAll.push({
            filename: item.name,
            chunk
          });
        }
        const buffer = await fileParse(tempFiles[0], "buffer");
        const spark = new SparkMD5.ArrayBuffer();
        spark.append(buffer);
        const hash2 = spark.end();
        const { avatar, username } = userInfo;
        uploadImage(lib.stringify({
          fileAll,
          hash: hash2,
          title: formData.title,
          hobby: parseInt(formData.hobby),
          fileType: formData.fileType,
          content: formData.content,
          avatar,
          username
        })).then((data) => {
          formatAppLog("log", "at pages/find/index.vue:543", "data===", data);
          const {
            data: { code }
          } = data;
          if (code === 200) {
            progressPercent.value = 100;
            uploadLoading.value = false;
          }
        });
      };
      const onUploadImage = async () => {
        uni.chooseImage({
          count: 6,
          sizeType: ["original", "compressed"],
          sourceType: ["album"],
          success: function(res2) {
            onSelectImage(res2);
          }
        });
      };
      const form = vue.ref(null);
      let formData = vue.reactive({
        title: "",
        hobby: "",
        fileType: "",
        content: ""
      });
      let rules = {
        title: {
          rules: [
            {
              required: true,
              errorMessage: "\u8BF7\u8F93\u5165\u6807\u9898"
            }
          ]
        },
        hobby: {
          rules: [
            {
              required: true,
              errorMessage: "\u8BF7\u9009\u62E9\u5174\u8DA3"
            }
          ]
        },
        fileType: {
          rules: [
            {
              required: true,
              errorMessage: "\u8BF7\u9009\u62E9\u6587\u4EF6\u7C7B\u578B"
            }
          ]
        },
        content: {
          rules: [
            {
              required: true,
              errorMessage: "\u8BF7\u8F93\u5165\u6B63\u6587\u5185\u5BB9"
            }
          ]
        }
      };
      let title = vue.ref("");
      let content = vue.ref("");
      let hobby = vue.ref("");
      let fileType = vue.ref("");
      let hobbys = vue.reactive([
        { value: 0, text: "\u72FC\u4EBA\u6740", disable: false },
        { value: 1, text: "\u5267\u672C\u6740", disable: false },
        { value: 2, text: "\u767B\u5C71", disable: false },
        { value: 3, text: "\u65C5\u6E38", disable: false },
        { value: 4, text: "\u89C6\u9891", disable: false }
      ]);
      let fileTypes = vue.ref([
        { value: 0, text: "\u56FE\u7247", disable: false },
        { value: 1, text: "\u89C6\u9891", disable: false }
      ]);
      const hobbyChange = (e2) => {
        formatAppLog("log", "at pages/find/index.vue:627", "e=", e2);
        const {
          detail: { value }
        } = e2;
        hobby.value = value;
        form.value.setValue("hobby", value);
      };
      const typeChange = (e2) => {
        const {
          detail: { value }
        } = e2;
        fileType.value = value;
        form.value.setValue("fileType", value);
      };
      const submit = () => {
        form.value.validate().then((res2) => {
          formatAppLog("log", "at pages/find/index.vue:645", "\u8868\u5355\u6570\u636E\u4FE1\u606F\uFF1A", res2);
          const { fileType: fileType2, title: title2, content: content2, hobby: hobby2 } = res2;
          formData.content = content2;
          formData.title = title2;
          formData.fileType = fileType2;
          formData.hobby = hobby2;
          if (fileType2 === 0) {
            onUploadImage();
          } else {
            uploadVideo();
          }
        }).catch((err) => {
          formatAppLog("log", "at pages/find/index.vue:658", "\u8868\u5355\u9519\u8BEF\u4FE1\u606F\uFF1A", err);
        });
      };
      vue.watch(() => {
        return hobby.value;
      }, (state) => {
        formatAppLog("log", "at pages/find/index.vue:668", "state=", state);
        switch (state) {
          case 0:
          case 1:
            fileTypes.value = [{ value: 0, text: "\u56FE\u7247", disable: false }];
            break;
          case 2:
          case 3:
            fileTypes.value = [
              { value: 0, text: "\u56FE\u7247", disable: false },
              { value: 1, text: "\u89C6\u9891", disable: false }
            ];
            break;
          case 4:
            fileTypes.value = [{ value: 1, text: "\u89C6\u9891", disable: false }];
            break;
        }
      }, {
        deep: true
      });
      return (_ctx, _cache) => {
        const _component_uni_easyinput = resolveEasycom(vue.resolveDynamicComponent("uni-easyinput"), __easycom_0$3);
        const _component_uni_forms_item = resolveEasycom(vue.resolveDynamicComponent("uni-forms-item"), __easycom_0$2);
        const _component_uni_forms = resolveEasycom(vue.resolveDynamicComponent("uni-forms"), __easycom_1);
        return vue.openBlock(), vue.createElementBlock("view", { class: "share-wraper" }, [
          vue.createCommentVNode(' <uni-file-picker\r\n      file-mediatype="all"\r\n      @select="onSelect"\r\n      @progress="onProgress"\r\n      @success="success"\r\n      @fail="fail"\r\n    >\r\n      <button>\u9009\u62E9\u6587\u4EF6</button>\r\n    </uni-file-picker> '),
          vue.createCommentVNode(' <view class="progress-large-file"> '),
          vue.createCommentVNode(" </view> "),
          vue.createCommentVNode(' <progress :percent="80" active :fontSize="24" activeColor="#00f" show-info stroke-width="3"/> '),
          vue.createCommentVNode(' <view>\r\n      <button @tap="uploadVideo">\u4E0A\u4F20\u89C6\u9891</button>\r\n      <video :src="src"></video>\r\n    </view> '),
          vue.createCommentVNode(' <view>\r\n      <uni-file-picker\r\n        file-mediatype="image"\r\n        @select="onSelectImage"\r\n        @progress="progressImages"\r\n        @success="successImage"\r\n        @fail="failImage"\r\n      >\r\n        <button>\u9009\u62E9\u56FE\u7247</button>\r\n      </uni-file-picker>\r\n      <progress\r\n        :percent="progressImage"\r\n        active\r\n        :fontSize="24"\r\n        activeColor="#00f"\r\n        show-info\r\n        stroke-width="3"\r\n      />\r\n    </view> '),
          vue.createVNode(_component_uni_forms, {
            ref_key: "form",
            ref: form,
            modelValue: vue.unref(formData),
            rules: vue.unref(rules)
          }, {
            default: vue.withCtx(() => [
              vue.createElementVNode("view", { class: "info-item" }, [
                vue.createVNode(_component_uni_forms_item, {
                  required: "",
                  label: "\u6807    \u9898\uFF1A",
                  name: "title",
                  "label-width": "80"
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("view", { style: { "width": "100%" } }, [
                      vue.createVNode(_component_uni_easyinput, {
                        modelValue: vue.unref(title),
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => vue.isRef(title) ? title.value = $event : title = $event),
                        placeholder: "\u8BF7\u8F93\u5165\u6807\u9898"
                      }, null, 8, ["modelValue"])
                    ])
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("view", { class: "info-item" }, [
                vue.createCommentVNode(' <view class="title-wraper">\r\n          <text class="title">\u4E2A\u4EBA\u7B7E\u540D</text>\r\n        </view> '),
                vue.createVNode(_component_uni_forms_item, {
                  required: "",
                  label: "\u5174    \u8DA3\uFF1A",
                  name: "hobby",
                  "label-width": "80"
                }, {
                  default: vue.withCtx(() => [
                    vue.createCommentVNode(' <uni-data-checkbox\r\n            :value="hobby"\r\n            :multiple="false"\r\n            :localdata="hobbys"\r\n            @change="hobbyChange"\r\n          ></uni-data-checkbox> '),
                    vue.createElementVNode("radio-group", {
                      class: "uni-list",
                      onChange: hobbyChange
                    }, [
                      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(hobbys), (item, index) => {
                        return vue.openBlock(), vue.createElementBlock("label", {
                          class: "uni-list-cell uni-list-cell-pd",
                          key: index
                        }, [
                          vue.createElementVNode("view", null, [
                            vue.createElementVNode("radio", {
                              id: item.value,
                              value: item.value
                            }, null, 8, ["id", "value"])
                          ]),
                          vue.createElementVNode("view", null, [
                            vue.createElementVNode("label", {
                              class: "label-2-text",
                              for: item.value
                            }, [
                              vue.createElementVNode("text", null, vue.toDisplayString(item.text), 1)
                            ], 8, ["for"])
                          ])
                        ]);
                      }), 128))
                    ], 32)
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("view", { class: "info-item" }, [
                vue.createVNode(_component_uni_forms_item, {
                  required: "",
                  label: "\u6587\u4EF6\u7C7B\u578B\uFF1A",
                  name: "fileType",
                  "label-width": "80"
                }, {
                  default: vue.withCtx(() => [
                    vue.createCommentVNode(' <uni-data-checkbox\r\n            :multiple="false"\r\n            :value="fileType"\r\n            :localdata="fileTypes"\r\n            @change="typeChange"\r\n          ></uni-data-checkbox> '),
                    vue.createElementVNode("radio-group", {
                      class: "uni-list",
                      onChange: typeChange
                    }, [
                      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(fileTypes), (item) => {
                        return vue.openBlock(), vue.createElementBlock("label", {
                          class: "uni-list-cell uni-list-cell-pd",
                          key: item.value
                        }, [
                          vue.createElementVNode("view", null, [
                            vue.createElementVNode("radio", {
                              id: item.value,
                              value: item.value
                            }, null, 8, ["id", "value"])
                          ]),
                          vue.createElementVNode("view", null, [
                            vue.createElementVNode("label", {
                              class: "label-2-text",
                              for: item.value
                            }, [
                              vue.createElementVNode("text", null, vue.toDisplayString(item.text), 1)
                            ], 8, ["for"])
                          ])
                        ]);
                      }), 128))
                    ], 32)
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("view", { class: "info-item" }, [
                vue.createVNode(_component_uni_forms_item, {
                  required: "",
                  label: "\u5185    \u5BB9\uFF1A",
                  name: "content",
                  "label-width": "80"
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("view", { style: { "width": "100%" } }, [
                      vue.createVNode(_component_uni_easyinput, {
                        type: "textarea",
                        maxlength: -1,
                        autoHeight: "",
                        modelValue: vue.unref(content),
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => vue.isRef(content) ? content.value = $event : content = $event),
                        placeholder: "\u8BF7\u8F93\u5165\u6B63\u6587\u5185\u5BB9"
                      }, null, 8, ["modelValue"])
                    ])
                  ]),
                  _: 1
                })
              ])
            ]),
            _: 1
          }, 8, ["modelValue", "rules"]),
          vue.createElementVNode("button", {
            onClick: submit,
            type: "primary"
          }, "\u4E0A\u4F20\u5206\u4EAB"),
          vue.unref(uploadLoading) ? (vue.openBlock(), vue.createElementBlock("progress", {
            key: 0,
            percent: vue.unref(progressPercent),
            fontSize: 24,
            activeColor: "#00f",
            "show-info": "",
            "stroke-width": "12"
          }, null, 8, ["percent"])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "upload-text" }, [
            vue.unref(uploadFlag) ? (vue.openBlock(), vue.createElementBlock("text", {
              key: 0,
              onClick: onPause
            }, vue.toDisplayString(vue.unref(uploadText)), 1)) : vue.createCommentVNode("v-if", true)
          ])
        ]);
      };
    }
  });
  var PagesFindIndex = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["__scopeId", "data-v-73679080"], ["__file", "C:/myself/social/social/src/pages/find/index.vue"]]);
  const _sfc_main$m = {
    props: ["msg", "selfID"],
    setup(props) {
      const defaultAvatar = "/static/images/default_avatar.png";
      const myMsg = vue.computed(() => props.selfID === props.msg.sendID).value;
      formatAppLog("log", "at pages/message/MsgItem.vue:34", "mySmg", myMsg);
      formatAppLog("log", "at pages/message/MsgItem.vue:35", "props===", props);
      return {
        defaultAvatar,
        myMsg
      };
    }
  };
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", {
      class: vue.normalizeClass({ "chat_bg_msg": true, "chat_bg_omsg": $setup.myMsg })
    }, [
      vue.createElementVNode("image", {
        src: $props.msg.senderFaceUrl && $props.msg.senderFaceUrl.includes("https://") ? $props.msg.senderFaceUrl : $setup.defaultAvatar,
        class: "chat_bg_msg_icon"
      }, null, 8, ["src"]),
      vue.createElementVNode("view", {
        class: vue.normalizeClass(["content-wraper", { "chat_bg_msg_content_text": $props.msg.sendID === $props.selfID }])
      }, [
        vue.createElementVNode("text", null, vue.toDisplayString($props.msg.content), 1),
        vue.createElementVNode("text", null, vue.toDisplayString(_ctx.$filters.formatMsgDate($props.msg.sendTime)), 1)
      ], 2),
      $props.msg.sendID === $props.selfID ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        style: vue.normalizeStyle({ color: $props.msg.isRead ? "#999" : "#428BE5" })
      }, vue.toDisplayString($props.msg.isRead ? "\u5DF2\u8BFB" : "\u672A\u8BFB"), 5)) : vue.createCommentVNode("v-if", true)
    ], 2);
  }
  var MsgItem = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$c], ["__scopeId", "data-v-27324538"], ["__file", "C:/myself/social/social/src/pages/message/MsgItem.vue"]]);
  const _sfc_main$l = {
    props: ["msgList"],
    components: {
      MsgItem
    },
    onShow: function() {
      this.currentDate = new Date() + Math.random();
      formatAppLog("log", "at pages/message/ChatContent.vue:29", "this.currentDate===============================", this.currentDate);
      formatAppLog("log", "at pages/message/ChatContent.vue:30", "msgList============", this.msgList);
    },
    setup() {
      const store2 = useStore();
      const userInfo = vue.computed(() => store2.state.user.userInfo).value;
      let currentDate = vue.ref("");
      vue.onMounted(() => {
      });
      return {
        userInfo,
        currentDate
      };
    }
  };
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_MsgItem = vue.resolveComponent("MsgItem");
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createCommentVNode(' <scroll-view scroll-y class="con"></scroll-view> '),
      vue.createElementVNode("view", { class: "con" }, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.msgList, (item) => {
          return vue.openBlock(), vue.createBlock(_component_MsgItem, {
            key: item.clientMsgID + $setup.currentDate,
            msg: item,
            selfID: $setup.userInfo.phone
          }, null, 8, ["msg", "selfID"]);
        }), 128))
      ])
    ]);
  }
  var ChatContent = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$b], ["__scopeId", "data-v-02e4d885"], ["__file", "C:/myself/social/social/src/pages/message/ChatContent.vue"]]);
  const _sfc_main$k = {
    components: {
      ChatContent
    },
    onShow() {
      formatAppLog("log", "at pages/message/index.vue:58", "show======");
      this.getAllConversationList();
    },
    setup() {
      const defaultAvatar = "/static/images/default_avatar.png";
      const store2 = useStore();
      const userInfo = vue.computed(() => store2.state.user.userInfo).value;
      const convers = vue.ref([]);
      const goChat = (item) => {
        formatAppLog("log", "at pages/message/index.vue:67", "item=", item);
        uni.navigateTo({
          url: `/pages/message/Chat?userID=${item.userID}&title=${item.showName}`
        });
      };
      const getAllConversationList = () => {
        openIM.getAllConversationList().then(({ data }) => {
          formatAppLog("log", "at pages/message/index.vue:76", "\u4F1A\u8BDD\u603B\u6570data====", JSON.parse(data));
          convers.value = JSON.parse(data);
          unReadMessage2();
        }).catch((err) => {
          formatAppLog("log", "at pages/message/index.vue:81", "err=", err);
        });
      };
      const connectIM2 = (userID, token2) => {
        formatAppLog("log", "at pages/message/index.vue:85", "userID, token=====================", userID, token2);
        const config = {
          userID,
          token: token2,
          url: "wss://mancao.social:20038",
          platformID: 5
        };
        openIM.login(config).then((res2) => {
          formatAppLog("log", "at pages/message/index.vue:96", "login suc...", res2);
          if (res2.errCode === 0) {
            getAllConversationList();
          }
        }).catch((err) => {
          formatAppLog("log", "at pages/message/index.vue:102", "login failed...", err);
        });
      };
      const showLastMessage = (lastData) => {
        return JSON.parse(lastData).content;
      };
      const unReadMessage2 = () => {
        openIM.getTotalUnreadMsgCount().then(({ data }) => {
          formatAppLog("log", "at pages/message/index.vue:114", "data===", data);
          formatAppLog("log", "at pages/message/index.vue:115", "Number(data)=", Number(data));
          if (Number(data) > 0) {
            uni.setTabBarBadge({
              index: 2,
              text: "\xB7\xB7\xB7"
            });
          } else {
            uni.removeTabBarBadge({
              index: 2
            });
          }
        }).catch((err) => {
          formatAppLog("log", "at pages/message/index.vue:128", "err=", err);
        });
      };
      const monitorOnRecv2 = () => {
        openIM.on("OnRecvNewMessage", (data) => {
          const RecvMessage = JSON.parse(data.data);
          if (RecvMessage.contentType === 101) {
            getAllConversationList();
          }
        });
      };
      vue.onMounted(() => {
        connectIM2(userInfo.phone, getIMToken());
        monitorOnRecv2();
      });
      return {
        defaultAvatar,
        convers,
        goChat,
        showLastMessage,
        getAllConversationList
      };
    }
  };
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "message-wrapper" }, [
      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($setup.convers, (item) => {
        return vue.openBlock(), vue.createElementBlock("view", {
          key: item.userID,
          class: "conver",
          onClick: ($event) => $setup.goChat(item)
        }, [
          vue.createElementVNode("view", { class: "conver-msg" }, [
            vue.createElementVNode("view", { class: "chat_bg_msg_icon-wraper" }, [
              vue.createElementVNode("image", {
                src: item.faceURL && item.faceURL.includes("https://") ? item.faceURL : $setup.defaultAvatar,
                class: "chat_bg_msg_icon"
              }, null, 8, ["src"]),
              item.unreadCount ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "unread-total"
              }, [
                vue.createElementVNode("text", null, vue.toDisplayString(item.unreadCount), 1)
              ])) : vue.createCommentVNode("v-if", true)
            ]),
            vue.createElementVNode("view", { class: "content-wraper" }, [
              vue.createElementVNode("text", null, vue.toDisplayString(item.showName), 1),
              vue.createElementVNode("text", null, vue.toDisplayString($setup.showLastMessage(item.latestMsg)), 1)
            ])
          ]),
          vue.createElementVNode("text", { class: "conver-time" }, vue.toDisplayString(_ctx.$filters.formatMsgDate(item.latestMsgSendTime)), 1)
        ], 8, ["onClick"]);
      }), 128)),
      $setup.convers.length <= 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "empty"
      }, [
        vue.createElementVNode("view", null, "\u60A8\u8FD8\u672A\u53D1\u8D77\u804A\u5929"),
        vue.createElementVNode("view", null, "\u5FEB\u53BB\u5173\u6CE8\u5174\u8DA3\u7231\u597D\u53D1\u5E03\u8005\u4E00\u8D77\u804A\u5929\u5427~\uFF01")
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  var PagesMessageIndex = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$a], ["__scopeId", "data-v-716a8bf6"], ["__file", "C:/myself/social/social/src/pages/message/index.vue"]]);
  const _sfc_main$j = {
    name: "uniLink",
    props: {
      href: {
        type: String,
        default: ""
      },
      text: {
        type: String,
        default: ""
      },
      download: {
        type: String,
        default: ""
      },
      showUnderLine: {
        type: [Boolean, String],
        default: true
      },
      copyTips: {
        type: String,
        default: "\u5DF2\u81EA\u52A8\u590D\u5236\u7F51\u5740\uFF0C\u8BF7\u5728\u624B\u673A\u6D4F\u89C8\u5668\u91CC\u7C98\u8D34\u8BE5\u7F51\u5740"
      },
      color: {
        type: String,
        default: "#999999"
      },
      fontSize: {
        type: [Number, String],
        default: 14
      }
    },
    computed: {
      isShowA() {
        if ((this.isMail() || this.isTel()) && this._isH5 === true) {
          return true;
        }
        return false;
      }
    },
    created() {
      this._isH5 = null;
    },
    methods: {
      isMail() {
        return this.href.startsWith("mailto:");
      },
      isTel() {
        return this.href.startsWith("tel:");
      },
      openURL() {
        if (this.isTel()) {
          this.makePhoneCall(this.href.replace("tel:", ""));
        } else {
          plus.runtime.openURL(this.href);
        }
      },
      makePhoneCall(phoneNumber) {
        uni.makePhoneCall({
          phoneNumber
        });
      }
    }
  };
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    return $options.isShowA ? (vue.openBlock(), vue.createElementBlock("a", {
      key: 0,
      class: vue.normalizeClass(["uni-link", { "uni-link--withline": $props.showUnderLine === true || $props.showUnderLine === "true" }]),
      href: $props.href,
      style: vue.normalizeStyle({ color: $props.color, fontSize: $props.fontSize + "px" }),
      download: $props.download
    }, [
      vue.renderSlot(_ctx.$slots, "default", {}, () => [
        vue.createTextVNode(vue.toDisplayString($props.text), 1)
      ], true)
    ], 14, ["href", "download"])) : (vue.openBlock(), vue.createElementBlock("text", {
      key: 1,
      class: vue.normalizeClass(["uni-link", { "uni-link--withline": $props.showUnderLine === true || $props.showUnderLine === "true" }]),
      style: vue.normalizeStyle({ color: $props.color, fontSize: $props.fontSize + "px" }),
      onClick: _cache[0] || (_cache[0] = (...args) => $options.openURL && $options.openURL(...args))
    }, [
      vue.renderSlot(_ctx.$slots, "default", {}, () => [
        vue.createTextVNode(vue.toDisplayString($props.text), 1)
      ], true)
    ], 6));
  }
  var __easycom_0$1 = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$9], ["__scopeId", "data-v-25242d0e"], ["__file", "C:/myself/social/social/src/uni_modules/uni-link/components/uni-link/uni-link.vue"]]);
  const sendCode = (params) => {
    formatAppLog("log", "at api/user.js:17", "send params=", params);
    return request(`/users/sendCodeTencent`, "POST", params);
  };
  const codePhoneLogin = (params) => {
    return request(`/users/codePhoneLogin`, "POST", params);
  };
  const setGender = (params) => {
    return request(`/users/setGender`, "POST", params);
  };
  const getUserInfo = () => {
    return request(`/users/userInfo`, "GET");
  };
  const getFrendInfo = (params) => {
    return request(`/users/frendInfo`, "GET", params);
  };
  const getSchool = (params) => {
    return request("/users/getSchool", "GET", params);
  };
  const editUserInfo = (params) => {
    formatAppLog("log", "at api/user.js:42", "params=e==", params);
    return request(`/users/editUserInfo`, "POST", JSON.stringify(params.form));
  };
  const exampleLogin = (params) => {
    return request(`/users/exampleLogin`, "POST", params);
  };
  const __default__$5 = {
    name: "showModal"
  };
  const _sfc_main$i = /* @__PURE__ */ Object.assign(__default__$5, {
    props: {
      title: {
        type: String,
        default: ""
      },
      content: {
        type: String,
        default: ""
      }
    },
    emits: ["close"],
    setup(__props, { emit }) {
      const props = __props;
      const store2 = useStore();
      const form = vue.ref(null);
      let formData = vue.reactive({
        username: "Aiden"
      });
      const radioChange = (e2) => {
        const {
          detail: { value }
        } = e2;
        form.value.setValue("username", value);
      };
      const onClose = () => {
        emit("close");
      };
      const submitForm = () => {
        form.value.validate().then((res2) => {
          const params = {
            username: res2.username,
            password: "111111"
          };
          formatAppLog("log", "at pages/components/ShowModal.vue:88", "params=======", params);
          exampleLogin(params).then((res3) => {
            formatAppLog("log", "at pages/components/ShowModal.vue:90", "res========", res3);
            const { code, token: token2 } = res3.data;
            if (code === 200) {
              emit("close");
              formatAppLog("log", "at pages/components/ShowModal.vue:94", "\u6210\u529F");
              setToken(token2);
              store2.dispatch("user/GetUserInfo");
              uni.reLaunch({
                url: "/pages/index/index"
              });
            }
          });
        }).catch((err) => {
          formatAppLog("log", "at pages/components/ShowModal.vue:108", "\u8868\u5355\u9519\u8BEF\u4FE1\u606F\uFF1A", err);
        });
      };
      return (_ctx, _cache) => {
        const _component_uni_forms_item = resolveEasycom(vue.resolveDynamicComponent("uni-forms-item"), __easycom_0$2);
        const _component_uni_forms = resolveEasycom(vue.resolveDynamicComponent("uni-forms"), __easycom_1);
        return vue.openBlock(), vue.createElementBlock("view", { class: "_showModal" }, [
          vue.createElementVNode("view", { class: "_shade" }),
          vue.createElementVNode("view", { class: "_modalBox" }, [
            vue.createElementVNode("view", { class: "_modal" }, [
              vue.createCommentVNode(' <slot name="title"> '),
              vue.createElementVNode("view", { class: "title-wraper" }, [
                vue.createElementVNode("view", { class: "title" }, [
                  vue.createElementVNode("text", null, vue.toDisplayString(props.title), 1)
                ]),
                vue.createCommentVNode(' <svg class="close-icon" aria-hidden="true" @click.stop="onClose">\r\n              <use xlink:href="#icon-guanbi1"></use>\r\n              </svg> '),
                vue.createElementVNode("span", {
                  class: "iconfont close-icon",
                  onClick: vue.withModifiers(onClose, ["stop"])
                }, "\uE723", 8, ["onClick"])
              ]),
              vue.createCommentVNode(" </slot> "),
              vue.createElementVNode("view", { class: "content-hint" }, vue.toDisplayString(props.content), 1),
              vue.createVNode(_component_uni_forms, {
                ref_key: "form",
                ref: form,
                modelValue: vue.unref(formData)
              }, {
                default: vue.withCtx(() => [
                  vue.createCommentVNode(' <slot name="content"> '),
                  vue.createVNode(_component_uni_forms_item, { name: "username" }, {
                    default: vue.withCtx(() => [
                      vue.createElementVNode("radio-group", {
                        name: "radio",
                        onChange: radioChange
                      }, [
                        vue.createElementVNode("label", null, [
                          vue.createElementVNode("radio", {
                            value: "Aiden",
                            checked: vue.unref(formData).username === "Aiden"
                          }, null, 8, ["checked"]),
                          vue.createElementVNode("text", null, "Aiden")
                        ]),
                        vue.createElementVNode("label", null, [
                          vue.createElementVNode("radio", { value: "Lucy" }),
                          vue.createElementVNode("text", null, "Lucy")
                        ])
                      ], 32)
                    ]),
                    _: 1
                  }),
                  vue.createCommentVNode(" </slot> ")
                ]),
                _: 1
              }, 8, ["modelValue"]),
              vue.createCommentVNode(' <slot name="btn"> '),
              vue.createElementVNode("view", { class: "btnbox" }, [
                vue.createElementVNode("button", {
                  onClick: submitForm,
                  type: "primary",
                  class: "btn"
                }, "\u786E\u5B9A")
              ]),
              vue.createCommentVNode(" </slot> ")
            ])
          ])
        ]);
      };
    }
  });
  var ShowModal = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["__scopeId", "data-v-699c88db"], ["__file", "C:/myself/social/social/src/pages/components/ShowModal.vue"]]);
  const _sfc_main$h = {
    components: {
      ShowModal
    },
    data() {
      return {
        codeVisible: true,
        loginVisible: true,
        demoVisible: false,
        sendCaptchaEnabled: true,
        codeMessage: "\u83B7\u53D6\u9A8C\u8BC1\u7801",
        counterTimer: 60,
        phoneNumber: null
      };
    },
    methods: {
      onInput: function(e2) {
        formatAppLog("log", "at pages/login/index.vue:139", "input e=", e2);
        if (/^1[3456789]\d{9}$/.test(e2.detail.value)) {
          this.codeVisible = false;
          this.phoneNumber = e2.detail.value;
        } else {
          this.codeVisible = true;
        }
      },
      onInputCode: function(e2) {
        formatAppLog("log", "at pages/login/index.vue:148", "code=", e2);
        if (/^\d{6}$/.test(e2.detail.value)) {
          this.loginVisible = false;
        } else {
          this.loginVisible = true;
        }
      },
      sendCaptcha: function(e2) {
        formatAppLog("log", "at pages/login/index.vue:156", "button e=", e2);
        if (!this.sendCaptchaEnabled) {
          return;
        }
        this.sendCaptchaEnabled = false;
        const params = {
          phone: this.phoneNumber
        };
        formatAppLog("log", "at pages/login/index.vue:164", "params===", params);
        sendCode(params).then((res2) => {
          formatAppLog("log", "at pages/login/index.vue:166", "res=", res2);
        });
        this.codeMessage = "\u91CD\u65B0\u53D1\u9001";
        const timer = setInterval(() => {
          if (this.counterTimer <= 0) {
            this.counterTimer = 60;
            this.sendCaptchaEnabled = true;
            clearInterval(timer);
            this.codeMessage = "\u83B7\u53D6\u9A8C\u8BC1\u7801";
            return;
          }
          this.counterTimer--;
        }, 1e3);
      },
      formSubmit: function(e2) {
        formatAppLog("log", "at pages/login/index.vue:181", "e=", e2);
        formatAppLog("log", "at pages/login/index.vue:182", "form\u53D1\u751F\u4E86submit\u4E8B\u4EF6\uFF0C\u643A\u5E26\u6570\u636E\u4E3A\uFF1A" + JSON.stringify(e2.detail.value));
        const params = e2.detail.value;
        const that = this;
        codePhoneLogin(params).then((res2) => {
          formatAppLog("log", "at pages/login/index.vue:193", "res========", res2);
          const { code, token: token2 } = res2.data;
          if (code === 200) {
            formatAppLog("log", "at pages/login/index.vue:196", "\u6210\u529F");
            setToken(token2);
            that.$store.dispatch("user/GetUserInfo");
            uni.reLaunch({
              url: "/pages/index/index"
            });
          }
        });
      },
      miniProLogin: function(e2) {
        formatAppLog("log", "at pages/login/index.vue:206", "e===", e2);
        uni.login({
          provider: "weixin",
          success: function(loginRes) {
            formatAppLog("log", "at pages/login/index.vue:210", "loginRes=", loginRes.authResult);
          }
        });
      },
      wechatLogin: function() {
        uni.showToast({
          title: "\u5F85\u4E0A\u7EBF",
          duration: 2e3
        });
      },
      qqLogin: function() {
        uni.showToast({
          title: "\u5F85\u4E0A\u7EBF",
          duration: 2e3
        });
      },
      weiboLogin: function() {
        uni.showToast({
          title: "\u5F85\u4E0A\u7EBF",
          duration: 2e3
        });
      },
      getInfo: function(e2) {
        formatAppLog("log", "at pages/login/index.vue:233", "\u767B\u5F55e=", e2);
        uni.login({
          provider: "weixin",
          success: function(loginRes) {
            formatAppLog("log", "at pages/login/index.vue:237", "loginRes====", loginRes);
            const { code } = loginRes;
            loginWechat({
              code
            }).then("res===", res);
          }
        });
      },
      openDemo: function() {
        this.demoVisible = true;
      },
      onClose: function() {
        this.demoVisible = false;
      }
    }
  };
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_show_modal = vue.resolveComponent("show-modal");
    const _component_uni_link = resolveEasycom(vue.resolveDynamicComponent("uni-link"), __easycom_0$1);
    return vue.openBlock(), vue.createElementBlock("view", { class: "login-wraper" }, [
      vue.createElementVNode("view", { class: "image-wraper" }, [
        vue.createCommentVNode(' <image\r\n        style="width: 100%; height: 100%"\r\n        src="../../static/images/login-bg.gif"\r\n        mode=""\r\n      ></image> '),
        vue.createElementVNode("image", {
          class: "image",
          src: "/static/logo.png"
        }),
        vue.createElementVNode("text", { class: "logo-title" }, "\u8513\u8349\u5174\u8DA3")
      ]),
      vue.createElementVNode("view", { class: "login" }, [
        vue.createElementVNode("form", {
          onSubmit: _cache[3] || (_cache[3] = (...args) => $options.formSubmit && $options.formSubmit(...args)),
          onReset: _cache[4] || (_cache[4] = (...args) => _ctx.formReset && _ctx.formReset(...args)),
          class: "login-in"
        }, [
          vue.createElementVNode("view", { class: "row-flex uni-form-item uni-column" }, [
            vue.createElementVNode("text", { class: "title" }, "\u624B\u673A\u53F7\uFF1A"),
            vue.createElementVNode("input", {
              class: "uni-input",
              name: "phone",
              placeholder: "\u8BF7\u8F93\u5165\u624B\u673A\u53F7",
              onInput: _cache[0] || (_cache[0] = (...args) => $options.onInput && $options.onInput(...args))
            }, null, 32)
          ]),
          vue.createElementVNode("view", { class: "row-flex uni-form-item uni-column" }, [
            vue.createElementVNode("text", { class: "title" }, "\u9A8C\u8BC1\u7801\uFF1A"),
            vue.createElementVNode("input", {
              class: "uni-input",
              name: "code",
              placeholder: "\u8BF7\u8F93\u5165\u9A8C\u8BC1\u7801",
              onInput: _cache[1] || (_cache[1] = (...args) => $options.onInputCode && $options.onInputCode(...args))
            }, null, 32),
            vue.createElementVNode("button", {
              class: "code",
              disabled: !$data.sendCaptchaEnabled || $data.codeVisible,
              onClick: _cache[2] || (_cache[2] = (...args) => $options.sendCaptcha && $options.sendCaptcha(...args))
            }, [
              vue.createTextVNode(vue.toDisplayString($data.codeMessage), 1),
              !$data.sendCaptchaEnabled ? (vue.openBlock(), vue.createElementBlock("text", { key: 0 }, "(" + vue.toDisplayString($data.counterTimer) + "s)", 1)) : vue.createCommentVNode("v-if", true)
            ], 8, ["disabled"])
          ]),
          vue.createElementVNode("view", { class: "uni-btn-v" }, [
            vue.createElementVNode("button", {
              "form-type": "submit",
              type: "primary",
              class: "btn-block",
              disabled: $data.loginVisible
            }, " \u767B\u5F55 ", 8, ["disabled"])
          ])
        ], 32),
        $data.demoVisible ? (vue.openBlock(), vue.createBlock(_component_show_modal, {
          key: 0,
          title: "\u8BF7\u9009\u62E9\u8D26\u53F7",
          content: "\u8BF7\u4EFB\u610F\u9009\u62E9\u4E00\u4E2A\u8D26\u53F7\u767B\u5F55",
          onClose: $options.onClose
        }, null, 8, ["onClose"])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "cut-off-line row" }, [
          vue.createElementVNode("view", { class: "col-8 line-left" }),
          vue.createElementVNode("text", null, "\u5176\u4ED6\u767B\u5F55\u65B9\u5F0F"),
          vue.createElementVNode("view", { class: "col-8 line-right" })
        ]),
        vue.createElementVNode("view", { class: "other-login" }, [
          vue.createElementVNode("button", {
            onClick: _cache[5] || (_cache[5] = (...args) => $options.wechatLogin && $options.wechatLogin(...args)),
            withCredentials: "true",
            class: "login-way wechat"
          }, [
            vue.createElementVNode("view", { class: "m-icon m-icon-weixin" })
          ]),
          vue.createCommentVNode(" </view> "),
          vue.createElementVNode("button", {
            onClick: _cache[6] || (_cache[6] = (...args) => $options.qqLogin && $options.qqLogin(...args)),
            withCredentials: "true",
            class: "login-way wechat"
          }, [
            vue.createElementVNode("view", { class: "m-icon m-icon-QQ" })
          ]),
          vue.createElementVNode("button", {
            onClick: _cache[7] || (_cache[7] = (...args) => $options.weiboLogin && $options.weiboLogin(...args)),
            withCredentials: "true",
            class: "login-way wechat"
          }, [
            vue.createElementVNode("view", { class: "m-icon m-icon-weibo" })
          ])
        ])
      ]),
      vue.createElementVNode("view", { class: "gov-wraper" }, [
        vue.createVNode(_component_uni_link, {
          class: "gov",
          showUnderLine: false,
          href: "https://beian.miit.gov.cn/",
          text: "\u7CA4ICP\u59072021179573\u53F7"
        })
      ])
    ]);
  }
  var PagesLoginIndex = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$8], ["__scopeId", "data-v-247e7dd8"], ["__file", "C:/myself/social/social/src/pages/login/index.vue"]]);
  const __default__$4 = {
    name: "comment"
  };
  const _sfc_main$g = /* @__PURE__ */ Object.assign(__default__$4, {
    props: {
      hobbyInfo: {
        type: Object,
        default: {}
      }
    },
    setup(__props) {
      const props = __props;
      let inputString = vue.ref("");
      let total = vue.ref(0);
      let comments = vue.ref([]);
      formatAppLog("log", "at pages/components/Comment.vue:68", "props=", props);
      const confirm = (e2) => {
        formatAppLog("log", "at pages/components/Comment.vue:71", "e=", e2);
        const { detail: { value } } = e2;
        let params = {
          comment: value,
          detailUserId: props.hobbyInfo.user_id,
          hobbyId: props.hobbyInfo[`hobby_${props.hobbyInfo.hobby}_id`],
          hobby: props.hobbyInfo.hobby
        };
        setComment(params).then((data) => {
          if (data.statusCode === 200) {
            inputString.value = "";
            getCommentData();
          }
        });
      };
      const getCommentData = () => {
        formatAppLog("log", "at pages/components/Comment.vue:88", "props.hobbyInfo=======================", props.hobbyInfo);
        let params = {
          hobbyId: props.hobbyInfo[`hobby_${props.hobbyInfo.hobby}_id`],
          hobby: props.hobbyInfo.hobby
        };
        getComment(params).then((data) => {
          formatAppLog("log", "at pages/components/Comment.vue:94", "data666666===", data);
          if (data.data.code === 200) {
            comments.value = data.data.data;
            total.value = data.data.data.length;
          }
        });
      };
      vue.onMounted(() => {
        vue.nextTick(() => {
          getCommentData();
        });
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", { class: "comment" }, [
          vue.createElementVNode("view", { class: "total" }, [
            vue.createElementVNode("text", null, "\u5171"),
            vue.createElementVNode("text", null, vue.toDisplayString(vue.unref(total)), 1),
            vue.createElementVNode("text", null, "\u6761\u8BC4\u8BBA")
          ]),
          vue.createElementVNode("view", { class: "my-comment" }, [
            vue.createElementVNode("image", {
              class: "avatar",
              mode: "aspectFit",
              src: __props.hobbyInfo.avatar || ""
            }, null, 8, ["src"]),
            vue.withDirectives(vue.createElementVNode("input", {
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => vue.isRef(inputString) ? inputString.value = $event : inputString = $event),
              type: "text",
              class: "comment-input",
              placeholder: "\u559C\u6B22\u5C31\u7ED9\u4E2A\u8BC4\u8BBA\u652F\u6301\u4E00\u4E0B\u5457~",
              onConfirm: confirm
            }, null, 544), [
              [vue.vModelText, vue.unref(inputString)]
            ])
          ]),
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(comments), (item) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: "other-comment",
              key: item.id
            }, [
              vue.createElementVNode("view", null, [
                vue.createElementVNode("image", {
                  class: "avatar",
                  mode: "aspectFit",
                  src: item.avatar || ""
                }, null, 8, ["src"])
              ]),
              vue.createElementVNode("view", { class: "comment-info" }, [
                vue.createElementVNode("view", { class: "userinfo" }, [
                  vue.createElementVNode("text", null, vue.toDisplayString(item.username), 1),
                  item.isAuthor ? (vue.openBlock(), vue.createElementBlock("text", {
                    key: 0,
                    class: "is-author"
                  }, "\u4F5C\u8005")) : vue.createCommentVNode("v-if", true)
                ]),
                vue.createElementVNode("view", { class: "comment-content" }, [
                  vue.createElementVNode("text", null, vue.toDisplayString(item.comment), 1)
                ]),
                vue.createElementVNode("view", null, [
                  vue.createElementVNode("text", null, vue.toDisplayString(_ctx.$filters.commentTime(item.create_time)), 1)
                ])
              ])
            ]);
          }), 128))
        ]);
      };
    }
  });
  var Comment = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["__scopeId", "data-v-338a0aca"], ["__file", "C:/myself/social/social/src/pages/components/Comment.vue"]]);
  const _sfc_main$f = {
    props: {
      options: {
        type: Object,
        default: {}
      }
    },
    setup(__props) {
      const props = __props;
      const srcObj = vue.reactive({
        src: "",
        poster: ""
      });
      const videoInit = () => {
        formatAppLog("log", "at pages/components/VideoPlayer.vue:33", "props.options=", props.options);
        srcObj.src = props.options.src || "";
        srcObj.poster = props.options.poster || "";
      };
      vue.onMounted(() => {
        videoInit();
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("view", { class: "video-wraper" }, [
          vue.createElementVNode("video", {
            id: "video",
            ref: "refdVideo",
            src: vue.unref(srcObj).src,
            poster: vue.unref(srcObj).poster,
            class: "video"
          }, null, 8, ["src", "poster"])
        ]);
      };
    }
  };
  var VideoPlayer = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["__scopeId", "data-v-7ac097a7"], ["__file", "C:/myself/social/social/src/pages/components/VideoPlayer.vue"]]);
  const _sfc_main$e = {
    components: {
      Comment,
      VideoPlayer
    },
    onLoad: function(options) {
      formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:82", "options===", options);
      this.propsOptions = options;
    },
    onReady: function() {
    },
    setup(props, context) {
      formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:87", "props=", props);
      formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:88", "context==========", context);
      const store2 = useStore();
      const userInfo = vue.computed(() => store2.state.user.userInfo).value;
      const options = vue.reactive({
        poster: "",
        src: ""
      });
      let propsOptions = vue.ref(null);
      let info = vue.ref([
        {
          content: "https://social-1308251497.cos.ap-guangzhou.myqcloud.com/images/4.jfif"
        }
      ]);
      let hobbyInfo = vue.ref({});
      const initGetHobbyDetail = (obj) => {
        const { id, hobby } = obj;
        const params = { id, hobby };
        getHobbyDetail(params).then((data) => {
          formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:111", "data===", data);
          if (data.data.code === 200) {
            hobbyInfo.value = data.data.data;
            publishDate.value = formatDate(data.data.data.create_time);
            formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:115", "hobbyInfo.value===", hobbyInfo.value);
            formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:116", "data.data.data.url===", data.data.data.url);
            options.poster = data.data.data.url;
            options.src = data.data.data.video_url;
            initFlow();
          }
        });
      };
      let isFlollow = vue.ref(false);
      let followText = vue.ref("\u5173\u6CE8");
      const following = () => {
        if (isFlollow.value) {
          uni.showModal({
            content: "\u786E\u8BA4\u4E0D\u518D\u5173\u6CE8\uFF1F",
            success: function(res2) {
              if (res2.confirm) {
                let params2 = { followId: hobbyInfo.value.user_id };
                deleteFollow(params2).then((data) => {
                  if (data.data.code === 200) {
                    followText.value = "\u5173\u6CE8";
                    isFlollow.value = false;
                  }
                });
              } else if (res2.cancel) {
                formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:141", "\u7528\u6237\u70B9\u51FB\u53D6\u6D88");
              }
            }
          });
          return;
        }
        formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:147", "userInfo===", userInfo);
        let params = { followId: hobbyInfo.value.user_id };
        setFollow(params).then((data) => {
          formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:150", "data===", data);
          if (data.data.code === 200) {
            followText.value = "\u5DF2\u5173\u6CE8";
            isFlollow.value = true;
          } else if (data.data.code === 400) {
            uni.showToast({
              title: data.data.msg,
              icon: "none",
              duration: 2e3
            });
          }
        });
      };
      let publishDate = vue.ref(null);
      const initFlow = () => {
        let params = { followId: hobbyInfo.value.user_id };
        formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:169", "params===", params);
        getFollow(params).then((data) => {
          formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:171", "data1===", data);
          if (data.data.code === 200) {
            isFlollow.value = data.data.isFollow;
            data.data.isFollow ? followText.value = "\u5DF2\u5173\u6CE8" : followText.value = "\u5173\u6CE8";
          }
        });
      };
      const onNavTitle = (obj) => {
        formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:183", "obj===================================================================================", obj);
        const { hobby } = obj;
        switch (Number(hobby)) {
          case 2:
            uni.setNavigationBarTitle({
              title: "\u72FC\u4EBA\u6740"
            });
            break;
          case 3:
            uni.setNavigationBarTitle({
              title: "\u5267\u672C\u6740"
            });
            break;
          case 4:
            uni.setNavigationBarTitle({
              title: "\u767B\u5C71"
            });
            break;
          case 5:
            uni.setNavigationBarTitle({
              title: "\u65C5\u6E38"
            });
            break;
          case 6:
            uni.setNavigationBarTitle({
              title: "\u89C6\u9891"
            });
            break;
          case 7:
            uni.setNavigationBarTitle({
              title: "\u7535\u5F71"
            });
            break;
          default:
            uni.setNavigationBarTitle({
              title: "\u72FC\u4EBA\u6740"
            });
        }
      };
      vue.onMounted(() => {
        formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:259", "userInfo===", userInfo);
        formatAppLog("log", "at pages/index/HobbyDetailMountain.vue:260", "propsOptions===========", propsOptions);
        onNavTitle(propsOptions.value);
        initGetHobbyDetail({ id: propsOptions.value.id, hobby: propsOptions.value.hobby });
      });
      return {
        followText,
        isFlollow,
        following,
        hobbyInfo,
        info,
        publishDate,
        options,
        propsOptions
      };
    }
  };
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_VideoPlayer = vue.resolveComponent("VideoPlayer");
    const _component_Comment = vue.resolveComponent("Comment");
    return vue.openBlock(), vue.createElementBlock("div", { class: "hobby-detail" }, [
      $setup.hobbyInfo.fileType === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "swiper-box"
      }, [
        vue.createElementVNode("swiper", {
          class: "swiper-box",
          "indicator-dots": $setup.hobbyInfo.photos.length > 1
        }, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($setup.hobbyInfo.photos, (item, index) => {
            return vue.openBlock(), vue.createElementBlock("swiper-item", { key: index }, [
              vue.createElementVNode("view", { class: "swiper-item" }, [
                vue.createElementVNode("image", {
                  src: item,
                  class: "image",
                  mode: "aspectFit"
                }, null, 8, ["src"])
              ])
            ]);
          }), 128))
        ], 8, ["indicator-dots"])
      ])) : vue.createCommentVNode("v-if", true),
      $setup.hobbyInfo.fileType === 1 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "swiper-box"
      }, [
        vue.createElementVNode("view", { class: "swiper-item" }, [
          (vue.openBlock(), vue.createBlock(_component_VideoPlayer, {
            options: { src: $setup.hobbyInfo.video_url, poster: $setup.hobbyInfo.url },
            key: $setup.hobbyInfo.id
          }, null, 8, ["options"]))
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode("view", { class: "author-wraper" }, [
        vue.createElementVNode("view", { class: "author" }, [
          vue.createElementVNode("view", { class: "author-info" }, [
            vue.createElementVNode("image", {
              class: "avatar",
              mode: "aspectFit",
              src: $setup.hobbyInfo.avatar || ""
            }, null, 8, ["src"]),
            vue.createElementVNode("text", null, vue.toDisplayString($setup.hobbyInfo.username || ""), 1)
          ]),
          vue.createElementVNode("view", {
            class: vue.normalizeClass({ follow: !$setup.isFlollow, active: $setup.isFlollow }),
            onClick: _cache[0] || (_cache[0] = (...args) => $setup.following && $setup.following(...args))
          }, [
            vue.createElementVNode("text", null, vue.toDisplayString($setup.followText), 1)
          ], 2)
        ])
      ]),
      vue.createElementVNode("view", { class: "content-wraper" }, [
        vue.createElementVNode("view", { class: "content" }, [
          vue.createElementVNode("view", { class: "title" }, vue.toDisplayString($setup.hobbyInfo.title), 1),
          vue.createElementVNode("view", { class: "main" }, vue.toDisplayString($setup.hobbyInfo.content), 1),
          vue.createElementVNode("view", { class: "publish-date" }, [
            vue.createElementVNode("text", null, "\u53D1\u5E03\u4E8E: "),
            vue.createElementVNode("text", null, vue.toDisplayString($setup.publishDate), 1)
          ])
        ])
      ]),
      vue.createElementVNode("view", { class: "comment-wraper" }, [
        $setup.hobbyInfo.id ? (vue.openBlock(), vue.createBlock(_component_Comment, {
          hobbyInfo: $setup.hobbyInfo,
          key: $setup.hobbyInfo.id
        }, null, 8, ["hobbyInfo"])) : vue.createCommentVNode("v-if", true)
      ])
    ]);
  }
  var PagesIndexHobbyDetailMountain = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$7], ["__scopeId", "data-v-13b26782"], ["__file", "C:/myself/social/social/src/pages/index/HobbyDetailMountain.vue"]]);
  const unReadMessage = () => {
    openIM.getTotalUnreadMsgCount().then(({
      data
    }) => {
      formatAppLog("log", "at utils/im.js:28", "data==================================================================================", data);
      formatAppLog("log", "at utils/im.js:29", "Number(data)=", Number(data));
      setTotalIM(Number(data));
    }).catch((err) => {
      formatAppLog("log", "at utils/im.js:34", "err=", err);
    });
  };
  const monitorOnRecv = () => {
    openIM.on("OnRecvNewMessage", (data) => {
      const RecvMessage = JSON.parse(data.data);
      if (RecvMessage.contentType === 101) {
        unReadMessage();
      }
    });
  };
  const connectIM = (userID, token2) => {
    formatAppLog("log", "at utils/im.js:48", "userID, token=====================", userID, token2);
    const config = {
      userID,
      token: token2,
      url: "wss://mancao.social:20038",
      platformID: 5
    };
    openIM.login(config).then((res2) => {
      formatAppLog("log", "at utils/im.js:59", "login suc...", res2);
      if (res2.errCode === 0) {
        unReadMessage();
        monitorOnRecv();
      }
    }).catch((err) => {
      formatAppLog("log", "at utils/im.js:66", "login failed...", err);
    });
  };
  const register = () => {
    const params = {
      secret: "tuoyun",
      platform: 5,
      operationID: Date.now() + ""
    };
    imRegister(params).then((res2) => {
      formatAppLog("log", "at utils/im.js:77", "res========", res2);
      if (res2.statusCode === 200) {
        formatAppLog("log", "at utils/im.js:79", "res.data.data.token====", res2.data.data.token);
        setIMToken(res2.data.data.token);
      }
    });
  };
  const login = () => {
    const params = {
      secret: "tuoyun",
      platform: 5,
      operationID: Date.now() + ""
    };
    imLogin(params).then((res2) => {
      formatAppLog("log", "at utils/im.js:92", "res========", res2);
      if (res2.statusCode === 200) {
        if (res2.data.errCode !== 0) {
          register();
          return;
        }
        if (res2.data.data.token) {
          formatAppLog("log", "at utils/im.js:99", "res.data.data.token=", res2.data);
          setIMToken(res2.data.data.token);
          connectIM(res2.data.data.userID, res2.data.data.token);
        }
      }
    });
  };
  const _sfc_main$d = {
    components: {
      ChatContent
    },
    onShow: function(showprops) {
      this.currentDate = new Date() + Math.random();
      setTimeout(() => {
        this.getConver();
      }, 1e3);
    },
    onLoad: function(options) {
      this.propsOptions = options;
    },
    setup(props) {
      let propsOptions = vue.ref(null);
      let inputString = vue.ref("");
      const messageInfo = vue.ref([]);
      const store2 = useStore();
      formatAppLog("log", "at pages/message/Chat.vue:43", "store.state.user===========================================================================", store2.getters["user/getUserInfo"]);
      vue.computed(() => store2.getters["user/getUserInfo"]).value;
      const monitorOnRecv2 = () => {
        openIM.on("OnRecvNewMessage", (data) => {
          const RecvMessage = JSON.parse(data.data);
          if (RecvMessage.contentType === 101) {
            messageInfo.value.unshift(RecvMessage);
          }
        });
      };
      const getConver = () => {
        const options = {
          groupID: "",
          startClientMsgID: "",
          count: 1e4,
          userID: propsOptions.value.userID
        };
        openIM.getHistoryMessageList(options).then(({ data }) => {
          formatAppLog("log", "at pages/message/Chat.vue:67", "\u5386\u53F2\u6570\u636E=", JSON.parse(data));
          messageInfo.value = [...JSON.parse(data).reverse()];
        }).catch((err) => {
          formatAppLog("log", "at pages/message/Chat.vue:71", "err 000000000000000000000000000000000000000000=", err);
        });
      };
      const onConfirm = (event) => {
        const { value } = event.detail;
        inputString.value = value;
        const offlinePushInfo = {
          title: "you have a new message",
          desc: "",
          ex: "",
          iOSPushSound: "",
          iOSBadgeCount: false
        };
        openIM.createTextMessage(value).then((res2) => {
          const options = {
            recvID: propsOptions.value.userID,
            groupID: "",
            offlinePushInfo,
            message: res2.data
          };
          openIM.sendMessage(options).then(({ data, errCode }) => {
            const SendMessage = JSON.parse(data);
            messageInfo.value.unshift(SendMessage);
            inputString.value = "";
          }).catch((err) => {
            formatAppLog("log", "at pages/message/Chat.vue:102", "err=", err);
          });
        }).catch((err) => {
          formatAppLog("log", "at pages/message/Chat.vue:106", "text err=", err);
        });
      };
      const asRead = () => {
        openIM.on("OnRecvC2CReadReceipt", (data) => {
          JSON.parse(data.data).map((cr) => {
            cr.msgIDList.map((crt) => {
              messageInfo.value.find((ms) => {
                if (ms.clientMsgID === crt) {
                  ms.isRead = true;
                }
              });
            });
          });
        });
      };
      vue.watch(() => messageInfo, (count, prevCount) => {
        const selfMessages = count.value.filter((item) => item.sendID === propsOptions.value.userID);
        const msgIDList = selfMessages.map((element) => element.clientMsgID);
        const options = {
          userID: propsOptions.value.userID,
          msgIDList
        };
        openIM.markC2CMessageAsRead(options).then(({ data }) => {
          formatAppLog("log", "at pages/message/Chat.vue:145", "\u4F20\u5165\u5DF2\u8BFB=", data);
          openIM.markC2CMessageAsRead({
            userID: propsOptions.value.userID,
            msgIDList: []
          });
        }).catch((err) => {
          formatAppLog("log", "at pages/message/Chat.vue:153", "err===", err);
        });
      }, {
        deep: true
      });
      vue.onMounted(() => {
        uni.setNavigationBarTitle({
          title: propsOptions.value.title
        });
        getConver();
        monitorOnRecv2();
        asRead();
      });
      let currentDate = vue.ref("");
      return {
        inputString,
        messageInfo,
        onConfirm,
        currentDate,
        getConver,
        propsOptions
      };
    }
  };
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ChatContent = vue.resolveComponent("ChatContent");
    return vue.openBlock(), vue.createElementBlock("view", { class: "chat-wraper" }, [
      (vue.openBlock(), vue.createBlock(_component_ChatContent, {
        key: $setup.currentDate,
        msgList: $setup.messageInfo
      }, null, 8, ["msgList"])),
      vue.createElementVNode("view", { class: "send-msg" }, [
        vue.withDirectives(vue.createElementVNode("input", {
          type: "text",
          placeholder: "\u8BF7\u8F93\u5165\u6D88\u606F",
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.inputString = $event),
          class: "send",
          onConfirm: _cache[1] || (_cache[1] = (...args) => $setup.onConfirm && $setup.onConfirm(...args))
        }, null, 544), [
          [vue.vModelText, $setup.inputString]
        ])
      ])
    ]);
  }
  var PagesMessageChat = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$6], ["__scopeId", "data-v-ae0119f8"], ["__file", "C:/myself/social/social/src/pages/message/Chat.vue"]]);
  const _sfc_main$c = {
    name: "follow",
    onLoad: function(options) {
      formatAppLog("log", "at pages/user/info/Follow.vue:46", "options===", options);
      this.propsOptions = options;
    },
    setup(props) {
      let infoList = vue.ref([]);
      let propsOptions = vue.ref(null);
      let isFlollow = vue.ref(false);
      let followText = vue.ref("\u5173\u6CE8");
      const following = (info) => {
        if (isFlollow.value) {
          uni.showModal({
            content: "\u786E\u8BA4\u4E0D\u518D\u5173\u6CE8\uFF1F",
            success: function(res2) {
              if (res2.confirm) {
                let params2 = { followId: info.user_id };
                deleteFollow(params2).then((data) => {
                  if (data.data.code === 200) {
                    followText.value = "\u5173\u6CE8";
                    isFlollow.value = false;
                    getInfo(JSON.parse(decodeURIComponent(propsOptions.value.userids)));
                  }
                });
              } else if (res2.cancel) {
                formatAppLog("log", "at pages/user/info/Follow.vue:71", "\u7528\u6237\u70B9\u51FB\u53D6\u6D88");
              }
            }
          });
          return;
        }
        let params = { followId: info.user_id };
        setFollow(params).then((data) => {
          formatAppLog("log", "at pages/user/info/Follow.vue:79", "data===", data);
          if (data.data.code === 200) {
            followText.value = "\u5DF2\u5173\u6CE8";
            isFlollow.value = true;
          } else if (data.data.code === 400) {
            uni.showToast({
              title: data.data.msg,
              icon: "none",
              duration: 2e3
            });
          }
        });
      };
      const initFlow = (info) => {
        let params = { followId: info.user_id };
        formatAppLog("log", "at pages/user/info/Follow.vue:95", "params===", params);
        getFollow(params).then((data) => {
          formatAppLog("log", "at pages/user/info/Follow.vue:97", "data1===", data);
          if (data.data.code === 200) {
            isFlollow.value = data.data.isFollow;
            data.data.isFollow ? followText.value = "\u5DF2\u5173\u6CE8" : followText.value = "\u5173\u6CE8";
          }
        });
      };
      const getInfo = (userids) => {
        const params = {
          userids
        };
        if (parseInt(propsOptions.value.type) === 0) {
          uni.setNavigationBarTitle({
            title: "\u5173\u6CE8"
          }), getFollowsInfo(params).then((data) => {
            if (data.data.code === 200) {
              infoList.value = data.data.followsInfo;
              infoList.value = infoList.value.filter((element) => element);
              formatAppLog("log", "at pages/user/info/Follow.vue:119", "infoList.value====", infoList.value);
              infoList.value.forEach((item) => {
                initFlow(item);
              });
            }
          });
        } else if (parseInt(propsOptions.value.type) === 1) {
          uni.setNavigationBarTitle({
            title: "\u7C89\u4E1D"
          }), getFansInfo(params).then((data) => {
            formatAppLog("log", "at pages/user/info/Follow.vue:130", "getFansInfo===", data);
            if (data.data.code === 200) {
              infoList.value = data.data.fansInfo;
              infoList.value = infoList.value.filter((element) => element);
              infoList.value.forEach((item) => {
                initFlow(item);
              });
            }
          });
        }
      };
      const goUserDetail = (info) => {
        formatAppLog("log", "at pages/user/info/Follow.vue:144", "info======", info);
        uni.navigateTo({
          url: `/pages/user/info/User?id=${info.user_id}`
        });
      };
      vue.onMounted(() => {
        formatAppLog("log", "at pages/user/info/Follow.vue:158", "follow props=====================================================", propsOptions);
        getInfo(JSON.parse(decodeURIComponent(propsOptions.value.userids)));
      });
      return {
        propsOptions,
        infoList,
        followText,
        isFlollow,
        following,
        goUserDetail
      };
    }
  };
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "info-list" }, [
      vue.createElementVNode("view", { class: "ul" }, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($setup.infoList, (item) => {
          return vue.openBlock(), vue.createElementBlock("view", {
            class: "li",
            key: item.id,
            onClick: ($event) => $setup.goUserDetail(item)
          }, [
            vue.createElementVNode("view", { class: "userinfo-wraper" }, [
              vue.createElementVNode("view", { class: "avatar-wraper" }, [
                vue.createElementVNode("image", {
                  class: "avatar",
                  mode: "aspectFit",
                  src: item.avatar || ""
                }, null, 8, ["src"])
              ]),
              vue.createElementVNode("view", { class: "publish-info" }, [
                vue.createElementVNode("view", { class: "title" }, vue.toDisplayString(item.title), 1),
                vue.createElementVNode("view", { class: "userinfo" }, [
                  vue.createElementVNode("text", { class: "username" }, vue.toDisplayString(item.username), 1)
                ]),
                vue.createElementVNode("view", { class: "userinfo" }, [
                  vue.createElementVNode("text", { class: "username" }, vue.toDisplayString(item.motto), 1)
                ])
              ])
            ]),
            vue.createElementVNode("view", {
              class: vue.normalizeClass({ follow: !$setup.isFlollow, active: $setup.isFlollow }),
              onClick: vue.withModifiers(($event) => $setup.following(item), ["stop"])
            }, [
              vue.createElementVNode("text", null, vue.toDisplayString($setup.followText), 1)
            ], 10, ["onClick"])
          ], 8, ["onClick"]);
        }), 128))
      ])
    ]);
  }
  var PagesUserInfoFollow = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$5], ["__scopeId", "data-v-37177592"], ["__file", "C:/myself/social/social/src/pages/user/info/Follow.vue"]]);
  const _sfc_main$b = {
    setup(__props) {
      const store2 = useStore();
      let userInfo = vue.computed(() => store2.state.user.userInfo).value;
      const form = vue.ref(null);
      let show = vue.ref(true);
      let title = vue.ref("\u9009\u62E9\u6027\u522B");
      vue.ref(null);
      let formData = vue.reactive({
        gender: null
      });
      const rules = {
        gender: {
          rules: [
            {
              required: true,
              errorMessage: "\u8BF7\u8F93\u5165\u6635\u79F0"
            }
          ]
        }
      };
      vue.watchEffect(() => {
        if (userInfo.gender) {
          show.value = false;
        } else {
          show.value = true;
        }
      });
      const radioChange = (e2) => {
        const {
          detail: { value }
        } = e2;
        form.value.setValue("gender", value);
      };
      const submitForm = () => {
        form.value.validate().then((res2) => {
          const params = {
            gender: res2.gender
          };
          setGender(params).then((data) => {
            formatAppLog("log", "at pages/user/gender/index.vue:89", "data===", data);
            show.value = false;
            store2.dispatch("user/GetUserInfo");
          });
        }).catch((err) => {
          formatAppLog("log", "at pages/user/gender/index.vue:95", "\u8868\u5355\u9519\u8BEF\u4FE1\u606F\uFF1A", err);
        });
      };
      return (_ctx, _cache) => {
        const _component_uni_forms_item = resolveEasycom(vue.resolveDynamicComponent("uni-forms-item"), __easycom_0$2);
        const _component_uni_forms = resolveEasycom(vue.resolveDynamicComponent("uni-forms"), __easycom_1);
        return vue.withDirectives((vue.openBlock(), vue.createElementBlock("view", { class: "_showModal" }, [
          vue.createElementVNode("view", { class: "_shade" }),
          vue.createElementVNode("view", { class: "_modalBox" }, [
            vue.createElementVNode("view", { class: "_modal" }, [
              vue.createCommentVNode(' <slot name="title"> '),
              vue.withDirectives(vue.createElementVNode("view", { class: "title" }, vue.toDisplayString(vue.unref(title)), 513), [
                [vue.vShow, vue.unref(title)]
              ]),
              vue.createCommentVNode(" </slot> "),
              vue.createElementVNode("view", { class: "content-hint" }, "\u786E\u5B9A\u6027\u522B\u540E\u65E0\u6CD5\u4FEE\u6539\uFF01"),
              vue.createVNode(_component_uni_forms, {
                ref_key: "form",
                ref: form,
                modelValue: vue.unref(formData),
                rules
              }, {
                default: vue.withCtx(() => [
                  vue.createCommentVNode(' <slot name="content"> '),
                  vue.createVNode(_component_uni_forms_item, { name: "gender" }, {
                    default: vue.withCtx(() => [
                      vue.createElementVNode("radio-group", {
                        name: "radio",
                        onChange: radioChange
                      }, [
                        vue.createElementVNode("label", null, [
                          vue.createElementVNode("radio", { value: 1 }),
                          vue.createElementVNode("text", null, "\u7537")
                        ]),
                        vue.createElementVNode("label", null, [
                          vue.createElementVNode("radio", { value: 2 }),
                          vue.createElementVNode("text", null, "\u5973")
                        ])
                      ], 32)
                    ]),
                    _: 1
                  }),
                  vue.createCommentVNode(" </slot> ")
                ]),
                _: 1
              }, 8, ["modelValue"]),
              vue.createCommentVNode(' <slot name="btn"> '),
              vue.createElementVNode("view", { class: "btnbox" }, [
                vue.createElementVNode("button", {
                  onClick: submitForm,
                  class: "btn"
                }, "\u786E\u5B9A")
              ]),
              vue.createCommentVNode(" </slot> ")
            ])
          ])
        ], 512)), [
          [vue.vShow, vue.unref(show)]
        ]);
      };
    }
  };
  var PagesUserGenderIndex = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["__scopeId", "data-v-660079f4"], ["__file", "C:/myself/social/social/src/pages/user/gender/index.vue"]]);
  const _sfc_main$a = {
    components: {
      VideoPlayer
    },
    onLoad: function(options) {
      formatAppLog("log", "at pages/index/VideoDetail.vue:33", "options===", options);
      this.propsOptions = options;
    },
    setup(props, context) {
      let videInfo = vue.ref({});
      let propsOptions = vue.ref(null);
      const getVideoDetail = (id) => {
        const params = { id };
        videoDetail(params).then((data) => {
          formatAppLog("log", "at pages/index/VideoDetail.vue:42", "data===", data);
          if (data.data.code === 200) {
            videInfo.value = data.data.data;
          }
        });
      };
      const options = vue.reactive({
        poster: "https://img2.chinadaily.com.cn/images/202201/13/61e00901a310cdd3d826b064.jpeg",
        src: "https://social-1308251497.cos.ap-guangzhou.myqcloud.com/video/695c8c8a78f7e9a184a17db72e734a63/695c8c8a78f7e9a184a17db72e734a63.m3u8"
      });
      vue.onMounted(() => {
        getVideoDetail(propsOptions.value.id);
      });
      return {
        propsOptions,
        videInfo,
        options
      };
    }
  };
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_VideoPlayer = vue.resolveComponent("VideoPlayer");
    const _component_uni_list_item = resolveEasycom(vue.resolveDynamicComponent("uni-list-item"), __easycom_1$1);
    const _component_uni_list = resolveEasycom(vue.resolveDynamicComponent("uni-list"), __easycom_2);
    return vue.openBlock(), vue.createElementBlock("div", { class: "video-detail" }, [
      vue.createElementVNode("view", { class: "title" }, vue.toDisplayString($setup.videInfo.title), 1),
      vue.createElementVNode("text", { class: "abstract" }, vue.toDisplayString($setup.videInfo.abstract), 1),
      vue.createVNode(_component_VideoPlayer, { options: $setup.options }, null, 8, ["options"]),
      vue.createVNode(_component_uni_list, null, {
        default: vue.withCtx(() => [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($setup.videInfo.sections, (item) => {
            return vue.openBlock(), vue.createBlock(_component_uni_list_item, {
              note: item.section,
              key: item.id
            }, {
              body: vue.withCtx(() => [
                vue.createElementVNode("view", { class: "description" }, vue.toDisplayString(item.section), 1)
              ]),
              _: 2
            }, 1032, ["note"]);
          }), 128))
        ]),
        _: 1
      })
    ]);
  }
  var PagesIndexVideoDetail = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$4], ["__scopeId", "data-v-4bf59d7b"], ["__file", "C:/myself/social/social/src/pages/index/VideoDetail.vue"]]);
  var province = [
    {
      code: "110000",
      name: "\u5317\u4EAC\u5E02",
      province: "11"
    },
    {
      code: "120000",
      name: "\u5929\u6D25\u5E02",
      province: "12"
    },
    {
      code: "130000",
      name: "\u6CB3\u5317\u7701",
      province: "13"
    },
    {
      code: "140000",
      name: "\u5C71\u897F\u7701",
      province: "14"
    },
    {
      code: "150000",
      name: "\u5185\u8499\u53E4\u81EA\u6CBB\u533A",
      province: "15"
    },
    {
      code: "210000",
      name: "\u8FBD\u5B81\u7701",
      province: "21"
    },
    {
      code: "220000",
      name: "\u5409\u6797\u7701",
      province: "22"
    },
    {
      code: "230000",
      name: "\u9ED1\u9F99\u6C5F\u7701",
      province: "23"
    },
    {
      code: "310000",
      name: "\u4E0A\u6D77\u5E02",
      province: "31"
    },
    {
      code: "320000",
      name: "\u6C5F\u82CF\u7701",
      province: "32"
    },
    {
      code: "330000",
      name: "\u6D59\u6C5F\u7701",
      province: "33"
    },
    {
      code: "340000",
      name: "\u5B89\u5FBD\u7701",
      province: "34"
    },
    {
      code: "350000",
      name: "\u798F\u5EFA\u7701",
      province: "35"
    },
    {
      code: "360000",
      name: "\u6C5F\u897F\u7701",
      province: "36"
    },
    {
      code: "370000",
      name: "\u5C71\u4E1C\u7701",
      province: "37"
    },
    {
      code: "410000",
      name: "\u6CB3\u5357\u7701",
      province: "41"
    },
    {
      code: "420000",
      name: "\u6E56\u5317\u7701",
      province: "42"
    },
    {
      code: "430000",
      name: "\u6E56\u5357\u7701",
      province: "43"
    },
    {
      code: "440000",
      name: "\u5E7F\u4E1C\u7701",
      province: "44"
    },
    {
      code: "450000",
      name: "\u5E7F\u897F\u58EE\u65CF\u81EA\u6CBB\u533A",
      province: "45"
    },
    {
      code: "460000",
      name: "\u6D77\u5357\u7701",
      province: "46"
    },
    {
      code: "500000",
      name: "\u91CD\u5E86\u5E02",
      province: "50"
    },
    {
      code: "510000",
      name: "\u56DB\u5DDD\u7701",
      province: "51"
    },
    {
      code: "520000",
      name: "\u8D35\u5DDE\u7701",
      province: "52"
    },
    {
      code: "530000",
      name: "\u4E91\u5357\u7701",
      province: "53"
    },
    {
      code: "540000",
      name: "\u897F\u85CF\u81EA\u6CBB\u533A",
      province: "54"
    },
    {
      code: "610000",
      name: "\u9655\u897F\u7701",
      province: "61"
    },
    {
      code: "620000",
      name: "\u7518\u8083\u7701",
      province: "62"
    },
    {
      code: "630000",
      name: "\u9752\u6D77\u7701",
      province: "63"
    },
    {
      code: "640000",
      name: "\u5B81\u590F\u56DE\u65CF\u81EA\u6CBB\u533A",
      province: "64"
    },
    {
      code: "650000",
      name: "\u65B0\u7586\u7EF4\u543E\u5C14\u81EA\u6CBB\u533A",
      province: "65"
    },
    {
      code: "710000",
      name: "\u53F0\u6E7E\u7701",
      province: "71"
    },
    {
      code: "810000",
      name: "\u9999\u6E2F\u7279\u522B\u884C\u653F\u533A",
      province: "81"
    },
    {
      code: "820000",
      name: "\u6FB3\u95E8\u7279\u522B\u884C\u653F\u533A",
      province: "82"
    }
  ];
  var city = [
    {
      code: "130100",
      name: "\u77F3\u5BB6\u5E84\u5E02",
      province: "13",
      city: "01"
    },
    {
      code: "130200",
      name: "\u5510\u5C71\u5E02",
      province: "13",
      city: "02"
    },
    {
      code: "130300",
      name: "\u79E6\u7687\u5C9B\u5E02",
      province: "13",
      city: "03"
    },
    {
      code: "130400",
      name: "\u90AF\u90F8\u5E02",
      province: "13",
      city: "04"
    },
    {
      code: "130500",
      name: "\u90A2\u53F0\u5E02",
      province: "13",
      city: "05"
    },
    {
      code: "130600",
      name: "\u4FDD\u5B9A\u5E02",
      province: "13",
      city: "06"
    },
    {
      code: "130700",
      name: "\u5F20\u5BB6\u53E3\u5E02",
      province: "13",
      city: "07"
    },
    {
      code: "130800",
      name: "\u627F\u5FB7\u5E02",
      province: "13",
      city: "08"
    },
    {
      code: "130900",
      name: "\u6CA7\u5DDE\u5E02",
      province: "13",
      city: "09"
    },
    {
      code: "131000",
      name: "\u5ECA\u574A\u5E02",
      province: "13",
      city: "10"
    },
    {
      code: "131100",
      name: "\u8861\u6C34\u5E02",
      province: "13",
      city: "11"
    },
    {
      code: "140100",
      name: "\u592A\u539F\u5E02",
      province: "14",
      city: "01"
    },
    {
      code: "140200",
      name: "\u5927\u540C\u5E02",
      province: "14",
      city: "02"
    },
    {
      code: "140300",
      name: "\u9633\u6CC9\u5E02",
      province: "14",
      city: "03"
    },
    {
      code: "140400",
      name: "\u957F\u6CBB\u5E02",
      province: "14",
      city: "04"
    },
    {
      code: "140500",
      name: "\u664B\u57CE\u5E02",
      province: "14",
      city: "05"
    },
    {
      code: "140600",
      name: "\u6714\u5DDE\u5E02",
      province: "14",
      city: "06"
    },
    {
      code: "140700",
      name: "\u664B\u4E2D\u5E02",
      province: "14",
      city: "07"
    },
    {
      code: "140800",
      name: "\u8FD0\u57CE\u5E02",
      province: "14",
      city: "08"
    },
    {
      code: "140900",
      name: "\u5FFB\u5DDE\u5E02",
      province: "14",
      city: "09"
    },
    {
      code: "141000",
      name: "\u4E34\u6C7E\u5E02",
      province: "14",
      city: "10"
    },
    {
      code: "141100",
      name: "\u5415\u6881\u5E02",
      province: "14",
      city: "11"
    },
    {
      code: "150100",
      name: "\u547C\u548C\u6D69\u7279\u5E02",
      province: "15",
      city: "01"
    },
    {
      code: "150200",
      name: "\u5305\u5934\u5E02",
      province: "15",
      city: "02"
    },
    {
      code: "150300",
      name: "\u4E4C\u6D77\u5E02",
      province: "15",
      city: "03"
    },
    {
      code: "150400",
      name: "\u8D64\u5CF0\u5E02",
      province: "15",
      city: "04"
    },
    {
      code: "150500",
      name: "\u901A\u8FBD\u5E02",
      province: "15",
      city: "05"
    },
    {
      code: "150600",
      name: "\u9102\u5C14\u591A\u65AF\u5E02",
      province: "15",
      city: "06"
    },
    {
      code: "150700",
      name: "\u547C\u4F26\u8D1D\u5C14\u5E02",
      province: "15",
      city: "07"
    },
    {
      code: "150800",
      name: "\u5DF4\u5F66\u6DD6\u5C14\u5E02",
      province: "15",
      city: "08"
    },
    {
      code: "150900",
      name: "\u4E4C\u5170\u5BDF\u5E03\u5E02",
      province: "15",
      city: "09"
    },
    {
      code: "152200",
      name: "\u5174\u5B89\u76DF",
      province: "15",
      city: "22"
    },
    {
      code: "152500",
      name: "\u9521\u6797\u90ED\u52D2\u76DF",
      province: "15",
      city: "25"
    },
    {
      code: "152900",
      name: "\u963F\u62C9\u5584\u76DF",
      province: "15",
      city: "29"
    },
    {
      code: "210100",
      name: "\u6C88\u9633\u5E02",
      province: "21",
      city: "01"
    },
    {
      code: "210200",
      name: "\u5927\u8FDE\u5E02",
      province: "21",
      city: "02"
    },
    {
      code: "210300",
      name: "\u978D\u5C71\u5E02",
      province: "21",
      city: "03"
    },
    {
      code: "210400",
      name: "\u629A\u987A\u5E02",
      province: "21",
      city: "04"
    },
    {
      code: "210500",
      name: "\u672C\u6EAA\u5E02",
      province: "21",
      city: "05"
    },
    {
      code: "210600",
      name: "\u4E39\u4E1C\u5E02",
      province: "21",
      city: "06"
    },
    {
      code: "210700",
      name: "\u9526\u5DDE\u5E02",
      province: "21",
      city: "07"
    },
    {
      code: "210800",
      name: "\u8425\u53E3\u5E02",
      province: "21",
      city: "08"
    },
    {
      code: "210900",
      name: "\u961C\u65B0\u5E02",
      province: "21",
      city: "09"
    },
    {
      code: "211000",
      name: "\u8FBD\u9633\u5E02",
      province: "21",
      city: "10"
    },
    {
      code: "211100",
      name: "\u76D8\u9526\u5E02",
      province: "21",
      city: "11"
    },
    {
      code: "211200",
      name: "\u94C1\u5CAD\u5E02",
      province: "21",
      city: "12"
    },
    {
      code: "211300",
      name: "\u671D\u9633\u5E02",
      province: "21",
      city: "13"
    },
    {
      code: "211400",
      name: "\u846B\u82A6\u5C9B\u5E02",
      province: "21",
      city: "14"
    },
    {
      code: "220100",
      name: "\u957F\u6625\u5E02",
      province: "22",
      city: "01"
    },
    {
      code: "220200",
      name: "\u5409\u6797\u5E02",
      province: "22",
      city: "02"
    },
    {
      code: "220300",
      name: "\u56DB\u5E73\u5E02",
      province: "22",
      city: "03"
    },
    {
      code: "220400",
      name: "\u8FBD\u6E90\u5E02",
      province: "22",
      city: "04"
    },
    {
      code: "220500",
      name: "\u901A\u5316\u5E02",
      province: "22",
      city: "05"
    },
    {
      code: "220600",
      name: "\u767D\u5C71\u5E02",
      province: "22",
      city: "06"
    },
    {
      code: "220700",
      name: "\u677E\u539F\u5E02",
      province: "22",
      city: "07"
    },
    {
      code: "220800",
      name: "\u767D\u57CE\u5E02",
      province: "22",
      city: "08"
    },
    {
      code: "222400",
      name: "\u5EF6\u8FB9\u671D\u9C9C\u65CF\u81EA\u6CBB\u5DDE",
      province: "22",
      city: "24"
    },
    {
      code: "230100",
      name: "\u54C8\u5C14\u6EE8\u5E02",
      province: "23",
      city: "01"
    },
    {
      code: "230200",
      name: "\u9F50\u9F50\u54C8\u5C14\u5E02",
      province: "23",
      city: "02"
    },
    {
      code: "230300",
      name: "\u9E21\u897F\u5E02",
      province: "23",
      city: "03"
    },
    {
      code: "230400",
      name: "\u9E64\u5C97\u5E02",
      province: "23",
      city: "04"
    },
    {
      code: "230500",
      name: "\u53CC\u9E2D\u5C71\u5E02",
      province: "23",
      city: "05"
    },
    {
      code: "230600",
      name: "\u5927\u5E86\u5E02",
      province: "23",
      city: "06"
    },
    {
      code: "230700",
      name: "\u4F0A\u6625\u5E02",
      province: "23",
      city: "07"
    },
    {
      code: "230800",
      name: "\u4F73\u6728\u65AF\u5E02",
      province: "23",
      city: "08"
    },
    {
      code: "230900",
      name: "\u4E03\u53F0\u6CB3\u5E02",
      province: "23",
      city: "09"
    },
    {
      code: "231000",
      name: "\u7261\u4E39\u6C5F\u5E02",
      province: "23",
      city: "10"
    },
    {
      code: "231100",
      name: "\u9ED1\u6CB3\u5E02",
      province: "23",
      city: "11"
    },
    {
      code: "231200",
      name: "\u7EE5\u5316\u5E02",
      province: "23",
      city: "12"
    },
    {
      code: "232700",
      name: "\u5927\u5174\u5B89\u5CAD\u5730\u533A",
      province: "23",
      city: "27"
    },
    {
      code: "320100",
      name: "\u5357\u4EAC\u5E02",
      province: "32",
      city: "01"
    },
    {
      code: "320200",
      name: "\u65E0\u9521\u5E02",
      province: "32",
      city: "02"
    },
    {
      code: "320300",
      name: "\u5F90\u5DDE\u5E02",
      province: "32",
      city: "03"
    },
    {
      code: "320400",
      name: "\u5E38\u5DDE\u5E02",
      province: "32",
      city: "04"
    },
    {
      code: "320500",
      name: "\u82CF\u5DDE\u5E02",
      province: "32",
      city: "05"
    },
    {
      code: "320600",
      name: "\u5357\u901A\u5E02",
      province: "32",
      city: "06"
    },
    {
      code: "320700",
      name: "\u8FDE\u4E91\u6E2F\u5E02",
      province: "32",
      city: "07"
    },
    {
      code: "320800",
      name: "\u6DEE\u5B89\u5E02",
      province: "32",
      city: "08"
    },
    {
      code: "320900",
      name: "\u76D0\u57CE\u5E02",
      province: "32",
      city: "09"
    },
    {
      code: "321000",
      name: "\u626C\u5DDE\u5E02",
      province: "32",
      city: "10"
    },
    {
      code: "321100",
      name: "\u9547\u6C5F\u5E02",
      province: "32",
      city: "11"
    },
    {
      code: "321200",
      name: "\u6CF0\u5DDE\u5E02",
      province: "32",
      city: "12"
    },
    {
      code: "321300",
      name: "\u5BBF\u8FC1\u5E02",
      province: "32",
      city: "13"
    },
    {
      code: "330100",
      name: "\u676D\u5DDE\u5E02",
      province: "33",
      city: "01"
    },
    {
      code: "330200",
      name: "\u5B81\u6CE2\u5E02",
      province: "33",
      city: "02"
    },
    {
      code: "330300",
      name: "\u6E29\u5DDE\u5E02",
      province: "33",
      city: "03"
    },
    {
      code: "330400",
      name: "\u5609\u5174\u5E02",
      province: "33",
      city: "04"
    },
    {
      code: "330500",
      name: "\u6E56\u5DDE\u5E02",
      province: "33",
      city: "05"
    },
    {
      code: "330600",
      name: "\u7ECD\u5174\u5E02",
      province: "33",
      city: "06"
    },
    {
      code: "330700",
      name: "\u91D1\u534E\u5E02",
      province: "33",
      city: "07"
    },
    {
      code: "330800",
      name: "\u8862\u5DDE\u5E02",
      province: "33",
      city: "08"
    },
    {
      code: "330900",
      name: "\u821F\u5C71\u5E02",
      province: "33",
      city: "09"
    },
    {
      code: "331000",
      name: "\u53F0\u5DDE\u5E02",
      province: "33",
      city: "10"
    },
    {
      code: "331100",
      name: "\u4E3D\u6C34\u5E02",
      province: "33",
      city: "11"
    },
    {
      code: "340100",
      name: "\u5408\u80A5\u5E02",
      province: "34",
      city: "01"
    },
    {
      code: "340200",
      name: "\u829C\u6E56\u5E02",
      province: "34",
      city: "02"
    },
    {
      code: "340300",
      name: "\u868C\u57E0\u5E02",
      province: "34",
      city: "03"
    },
    {
      code: "340400",
      name: "\u6DEE\u5357\u5E02",
      province: "34",
      city: "04"
    },
    {
      code: "340500",
      name: "\u9A6C\u978D\u5C71\u5E02",
      province: "34",
      city: "05"
    },
    {
      code: "340600",
      name: "\u6DEE\u5317\u5E02",
      province: "34",
      city: "06"
    },
    {
      code: "340700",
      name: "\u94DC\u9675\u5E02",
      province: "34",
      city: "07"
    },
    {
      code: "340800",
      name: "\u5B89\u5E86\u5E02",
      province: "34",
      city: "08"
    },
    {
      code: "341000",
      name: "\u9EC4\u5C71\u5E02",
      province: "34",
      city: "10"
    },
    {
      code: "341100",
      name: "\u6EC1\u5DDE\u5E02",
      province: "34",
      city: "11"
    },
    {
      code: "341200",
      name: "\u961C\u9633\u5E02",
      province: "34",
      city: "12"
    },
    {
      code: "341300",
      name: "\u5BBF\u5DDE\u5E02",
      province: "34",
      city: "13"
    },
    {
      code: "341500",
      name: "\u516D\u5B89\u5E02",
      province: "34",
      city: "15"
    },
    {
      code: "341600",
      name: "\u4EB3\u5DDE\u5E02",
      province: "34",
      city: "16"
    },
    {
      code: "341700",
      name: "\u6C60\u5DDE\u5E02",
      province: "34",
      city: "17"
    },
    {
      code: "341800",
      name: "\u5BA3\u57CE\u5E02",
      province: "34",
      city: "18"
    },
    {
      code: "350100",
      name: "\u798F\u5DDE\u5E02",
      province: "35",
      city: "01"
    },
    {
      code: "350200",
      name: "\u53A6\u95E8\u5E02",
      province: "35",
      city: "02"
    },
    {
      code: "350300",
      name: "\u8386\u7530\u5E02",
      province: "35",
      city: "03"
    },
    {
      code: "350400",
      name: "\u4E09\u660E\u5E02",
      province: "35",
      city: "04"
    },
    {
      code: "350500",
      name: "\u6CC9\u5DDE\u5E02",
      province: "35",
      city: "05"
    },
    {
      code: "350600",
      name: "\u6F33\u5DDE\u5E02",
      province: "35",
      city: "06"
    },
    {
      code: "350700",
      name: "\u5357\u5E73\u5E02",
      province: "35",
      city: "07"
    },
    {
      code: "350800",
      name: "\u9F99\u5CA9\u5E02",
      province: "35",
      city: "08"
    },
    {
      code: "350900",
      name: "\u5B81\u5FB7\u5E02",
      province: "35",
      city: "09"
    },
    {
      code: "360100",
      name: "\u5357\u660C\u5E02",
      province: "36",
      city: "01"
    },
    {
      code: "360200",
      name: "\u666F\u5FB7\u9547\u5E02",
      province: "36",
      city: "02"
    },
    {
      code: "360300",
      name: "\u840D\u4E61\u5E02",
      province: "36",
      city: "03"
    },
    {
      code: "360400",
      name: "\u4E5D\u6C5F\u5E02",
      province: "36",
      city: "04"
    },
    {
      code: "360500",
      name: "\u65B0\u4F59\u5E02",
      province: "36",
      city: "05"
    },
    {
      code: "360600",
      name: "\u9E70\u6F6D\u5E02",
      province: "36",
      city: "06"
    },
    {
      code: "360700",
      name: "\u8D63\u5DDE\u5E02",
      province: "36",
      city: "07"
    },
    {
      code: "360800",
      name: "\u5409\u5B89\u5E02",
      province: "36",
      city: "08"
    },
    {
      code: "360900",
      name: "\u5B9C\u6625\u5E02",
      province: "36",
      city: "09"
    },
    {
      code: "361000",
      name: "\u629A\u5DDE\u5E02",
      province: "36",
      city: "10"
    },
    {
      code: "361100",
      name: "\u4E0A\u9976\u5E02",
      province: "36",
      city: "11"
    },
    {
      code: "370100",
      name: "\u6D4E\u5357\u5E02",
      province: "37",
      city: "01"
    },
    {
      code: "370200",
      name: "\u9752\u5C9B\u5E02",
      province: "37",
      city: "02"
    },
    {
      code: "370300",
      name: "\u6DC4\u535A\u5E02",
      province: "37",
      city: "03"
    },
    {
      code: "370400",
      name: "\u67A3\u5E84\u5E02",
      province: "37",
      city: "04"
    },
    {
      code: "370500",
      name: "\u4E1C\u8425\u5E02",
      province: "37",
      city: "05"
    },
    {
      code: "370600",
      name: "\u70DF\u53F0\u5E02",
      province: "37",
      city: "06"
    },
    {
      code: "370700",
      name: "\u6F4D\u574A\u5E02",
      province: "37",
      city: "07"
    },
    {
      code: "370800",
      name: "\u6D4E\u5B81\u5E02",
      province: "37",
      city: "08"
    },
    {
      code: "370900",
      name: "\u6CF0\u5B89\u5E02",
      province: "37",
      city: "09"
    },
    {
      code: "371000",
      name: "\u5A01\u6D77\u5E02",
      province: "37",
      city: "10"
    },
    {
      code: "371100",
      name: "\u65E5\u7167\u5E02",
      province: "37",
      city: "11"
    },
    {
      code: "371300",
      name: "\u4E34\u6C82\u5E02",
      province: "37",
      city: "13"
    },
    {
      code: "371400",
      name: "\u5FB7\u5DDE\u5E02",
      province: "37",
      city: "14"
    },
    {
      code: "371500",
      name: "\u804A\u57CE\u5E02",
      province: "37",
      city: "15"
    },
    {
      code: "371600",
      name: "\u6EE8\u5DDE\u5E02",
      province: "37",
      city: "16"
    },
    {
      code: "371700",
      name: "\u83CF\u6CFD\u5E02",
      province: "37",
      city: "17"
    },
    {
      code: "410100",
      name: "\u90D1\u5DDE\u5E02",
      province: "41",
      city: "01"
    },
    {
      code: "410200",
      name: "\u5F00\u5C01\u5E02",
      province: "41",
      city: "02"
    },
    {
      code: "410300",
      name: "\u6D1B\u9633\u5E02",
      province: "41",
      city: "03"
    },
    {
      code: "410400",
      name: "\u5E73\u9876\u5C71\u5E02",
      province: "41",
      city: "04"
    },
    {
      code: "410500",
      name: "\u5B89\u9633\u5E02",
      province: "41",
      city: "05"
    },
    {
      code: "410600",
      name: "\u9E64\u58C1\u5E02",
      province: "41",
      city: "06"
    },
    {
      code: "410700",
      name: "\u65B0\u4E61\u5E02",
      province: "41",
      city: "07"
    },
    {
      code: "410800",
      name: "\u7126\u4F5C\u5E02",
      province: "41",
      city: "08"
    },
    {
      code: "410900",
      name: "\u6FEE\u9633\u5E02",
      province: "41",
      city: "09"
    },
    {
      code: "411000",
      name: "\u8BB8\u660C\u5E02",
      province: "41",
      city: "10"
    },
    {
      code: "411100",
      name: "\u6F2F\u6CB3\u5E02",
      province: "41",
      city: "11"
    },
    {
      code: "411200",
      name: "\u4E09\u95E8\u5CE1\u5E02",
      province: "41",
      city: "12"
    },
    {
      code: "411300",
      name: "\u5357\u9633\u5E02",
      province: "41",
      city: "13"
    },
    {
      code: "411400",
      name: "\u5546\u4E18\u5E02",
      province: "41",
      city: "14"
    },
    {
      code: "411500",
      name: "\u4FE1\u9633\u5E02",
      province: "41",
      city: "15"
    },
    {
      code: "411600",
      name: "\u5468\u53E3\u5E02",
      province: "41",
      city: "16"
    },
    {
      code: "411700",
      name: "\u9A7B\u9A6C\u5E97\u5E02",
      province: "41",
      city: "17"
    },
    {
      code: "420100",
      name: "\u6B66\u6C49\u5E02",
      province: "42",
      city: "01"
    },
    {
      code: "420200",
      name: "\u9EC4\u77F3\u5E02",
      province: "42",
      city: "02"
    },
    {
      code: "420300",
      name: "\u5341\u5830\u5E02",
      province: "42",
      city: "03"
    },
    {
      code: "420500",
      name: "\u5B9C\u660C\u5E02",
      province: "42",
      city: "05"
    },
    {
      code: "420600",
      name: "\u8944\u9633\u5E02",
      province: "42",
      city: "06"
    },
    {
      code: "420700",
      name: "\u9102\u5DDE\u5E02",
      province: "42",
      city: "07"
    },
    {
      code: "420800",
      name: "\u8346\u95E8\u5E02",
      province: "42",
      city: "08"
    },
    {
      code: "420900",
      name: "\u5B5D\u611F\u5E02",
      province: "42",
      city: "09"
    },
    {
      code: "421000",
      name: "\u8346\u5DDE\u5E02",
      province: "42",
      city: "10"
    },
    {
      code: "421100",
      name: "\u9EC4\u5188\u5E02",
      province: "42",
      city: "11"
    },
    {
      code: "421200",
      name: "\u54B8\u5B81\u5E02",
      province: "42",
      city: "12"
    },
    {
      code: "421300",
      name: "\u968F\u5DDE\u5E02",
      province: "42",
      city: "13"
    },
    {
      code: "422800",
      name: "\u6069\u65BD\u571F\u5BB6\u65CF\u82D7\u65CF\u81EA\u6CBB\u5DDE",
      province: "42",
      city: "28"
    },
    {
      code: "430100",
      name: "\u957F\u6C99\u5E02",
      province: "43",
      city: "01"
    },
    {
      code: "430200",
      name: "\u682A\u6D32\u5E02",
      province: "43",
      city: "02"
    },
    {
      code: "430300",
      name: "\u6E58\u6F6D\u5E02",
      province: "43",
      city: "03"
    },
    {
      code: "430400",
      name: "\u8861\u9633\u5E02",
      province: "43",
      city: "04"
    },
    {
      code: "430500",
      name: "\u90B5\u9633\u5E02",
      province: "43",
      city: "05"
    },
    {
      code: "430600",
      name: "\u5CB3\u9633\u5E02",
      province: "43",
      city: "06"
    },
    {
      code: "430700",
      name: "\u5E38\u5FB7\u5E02",
      province: "43",
      city: "07"
    },
    {
      code: "430800",
      name: "\u5F20\u5BB6\u754C\u5E02",
      province: "43",
      city: "08"
    },
    {
      code: "430900",
      name: "\u76CA\u9633\u5E02",
      province: "43",
      city: "09"
    },
    {
      code: "431000",
      name: "\u90F4\u5DDE\u5E02",
      province: "43",
      city: "10"
    },
    {
      code: "431100",
      name: "\u6C38\u5DDE\u5E02",
      province: "43",
      city: "11"
    },
    {
      code: "431200",
      name: "\u6000\u5316\u5E02",
      province: "43",
      city: "12"
    },
    {
      code: "431300",
      name: "\u5A04\u5E95\u5E02",
      province: "43",
      city: "13"
    },
    {
      code: "433100",
      name: "\u6E58\u897F\u571F\u5BB6\u65CF\u82D7\u65CF\u81EA\u6CBB\u5DDE",
      province: "43",
      city: "31"
    },
    {
      code: "440100",
      name: "\u5E7F\u5DDE\u5E02",
      province: "44",
      city: "01"
    },
    {
      code: "440200",
      name: "\u97F6\u5173\u5E02",
      province: "44",
      city: "02"
    },
    {
      code: "440300",
      name: "\u6DF1\u5733\u5E02",
      province: "44",
      city: "03"
    },
    {
      code: "440400",
      name: "\u73E0\u6D77\u5E02",
      province: "44",
      city: "04"
    },
    {
      code: "440500",
      name: "\u6C55\u5934\u5E02",
      province: "44",
      city: "05"
    },
    {
      code: "440600",
      name: "\u4F5B\u5C71\u5E02",
      province: "44",
      city: "06"
    },
    {
      code: "440700",
      name: "\u6C5F\u95E8\u5E02",
      province: "44",
      city: "07"
    },
    {
      code: "440800",
      name: "\u6E5B\u6C5F\u5E02",
      province: "44",
      city: "08"
    },
    {
      code: "440900",
      name: "\u8302\u540D\u5E02",
      province: "44",
      city: "09"
    },
    {
      code: "441200",
      name: "\u8087\u5E86\u5E02",
      province: "44",
      city: "12"
    },
    {
      code: "441300",
      name: "\u60E0\u5DDE\u5E02",
      province: "44",
      city: "13"
    },
    {
      code: "441400",
      name: "\u6885\u5DDE\u5E02",
      province: "44",
      city: "14"
    },
    {
      code: "441500",
      name: "\u6C55\u5C3E\u5E02",
      province: "44",
      city: "15"
    },
    {
      code: "441600",
      name: "\u6CB3\u6E90\u5E02",
      province: "44",
      city: "16"
    },
    {
      code: "441700",
      name: "\u9633\u6C5F\u5E02",
      province: "44",
      city: "17"
    },
    {
      code: "441800",
      name: "\u6E05\u8FDC\u5E02",
      province: "44",
      city: "18"
    },
    {
      code: "441900",
      name: "\u4E1C\u839E\u5E02",
      province: "44",
      city: "19"
    },
    {
      code: "442000",
      name: "\u4E2D\u5C71\u5E02",
      province: "44",
      city: "20"
    },
    {
      code: "445100",
      name: "\u6F6E\u5DDE\u5E02",
      province: "44",
      city: "51"
    },
    {
      code: "445200",
      name: "\u63ED\u9633\u5E02",
      province: "44",
      city: "52"
    },
    {
      code: "445300",
      name: "\u4E91\u6D6E\u5E02",
      province: "44",
      city: "53"
    },
    {
      code: "450100",
      name: "\u5357\u5B81\u5E02",
      province: "45",
      city: "01"
    },
    {
      code: "450200",
      name: "\u67F3\u5DDE\u5E02",
      province: "45",
      city: "02"
    },
    {
      code: "450300",
      name: "\u6842\u6797\u5E02",
      province: "45",
      city: "03"
    },
    {
      code: "450400",
      name: "\u68A7\u5DDE\u5E02",
      province: "45",
      city: "04"
    },
    {
      code: "450500",
      name: "\u5317\u6D77\u5E02",
      province: "45",
      city: "05"
    },
    {
      code: "450600",
      name: "\u9632\u57CE\u6E2F\u5E02",
      province: "45",
      city: "06"
    },
    {
      code: "450700",
      name: "\u94A6\u5DDE\u5E02",
      province: "45",
      city: "07"
    },
    {
      code: "450800",
      name: "\u8D35\u6E2F\u5E02",
      province: "45",
      city: "08"
    },
    {
      code: "450900",
      name: "\u7389\u6797\u5E02",
      province: "45",
      city: "09"
    },
    {
      code: "451000",
      name: "\u767E\u8272\u5E02",
      province: "45",
      city: "10"
    },
    {
      code: "451100",
      name: "\u8D3A\u5DDE\u5E02",
      province: "45",
      city: "11"
    },
    {
      code: "451200",
      name: "\u6CB3\u6C60\u5E02",
      province: "45",
      city: "12"
    },
    {
      code: "451300",
      name: "\u6765\u5BBE\u5E02",
      province: "45",
      city: "13"
    },
    {
      code: "451400",
      name: "\u5D07\u5DE6\u5E02",
      province: "45",
      city: "14"
    },
    {
      code: "460100",
      name: "\u6D77\u53E3\u5E02",
      province: "46",
      city: "01"
    },
    {
      code: "460200",
      name: "\u4E09\u4E9A\u5E02",
      province: "46",
      city: "02"
    },
    {
      code: "460300",
      name: "\u4E09\u6C99\u5E02",
      province: "46",
      city: "03"
    },
    {
      code: "460400",
      name: "\u510B\u5DDE\u5E02",
      province: "46",
      city: "04"
    },
    {
      code: "510100",
      name: "\u6210\u90FD\u5E02",
      province: "51",
      city: "01"
    },
    {
      code: "510300",
      name: "\u81EA\u8D21\u5E02",
      province: "51",
      city: "03"
    },
    {
      code: "510400",
      name: "\u6500\u679D\u82B1\u5E02",
      province: "51",
      city: "04"
    },
    {
      code: "510500",
      name: "\u6CF8\u5DDE\u5E02",
      province: "51",
      city: "05"
    },
    {
      code: "510600",
      name: "\u5FB7\u9633\u5E02",
      province: "51",
      city: "06"
    },
    {
      code: "510700",
      name: "\u7EF5\u9633\u5E02",
      province: "51",
      city: "07"
    },
    {
      code: "510800",
      name: "\u5E7F\u5143\u5E02",
      province: "51",
      city: "08"
    },
    {
      code: "510900",
      name: "\u9042\u5B81\u5E02",
      province: "51",
      city: "09"
    },
    {
      code: "511000",
      name: "\u5185\u6C5F\u5E02",
      province: "51",
      city: "10"
    },
    {
      code: "511100",
      name: "\u4E50\u5C71\u5E02",
      province: "51",
      city: "11"
    },
    {
      code: "511300",
      name: "\u5357\u5145\u5E02",
      province: "51",
      city: "13"
    },
    {
      code: "511400",
      name: "\u7709\u5C71\u5E02",
      province: "51",
      city: "14"
    },
    {
      code: "511500",
      name: "\u5B9C\u5BBE\u5E02",
      province: "51",
      city: "15"
    },
    {
      code: "511600",
      name: "\u5E7F\u5B89\u5E02",
      province: "51",
      city: "16"
    },
    {
      code: "511700",
      name: "\u8FBE\u5DDE\u5E02",
      province: "51",
      city: "17"
    },
    {
      code: "511800",
      name: "\u96C5\u5B89\u5E02",
      province: "51",
      city: "18"
    },
    {
      code: "511900",
      name: "\u5DF4\u4E2D\u5E02",
      province: "51",
      city: "19"
    },
    {
      code: "512000",
      name: "\u8D44\u9633\u5E02",
      province: "51",
      city: "20"
    },
    {
      code: "513200",
      name: "\u963F\u575D\u85CF\u65CF\u7F8C\u65CF\u81EA\u6CBB\u5DDE",
      province: "51",
      city: "32"
    },
    {
      code: "513300",
      name: "\u7518\u5B5C\u85CF\u65CF\u81EA\u6CBB\u5DDE",
      province: "51",
      city: "33"
    },
    {
      code: "513400",
      name: "\u51C9\u5C71\u5F5D\u65CF\u81EA\u6CBB\u5DDE",
      province: "51",
      city: "34"
    },
    {
      code: "520100",
      name: "\u8D35\u9633\u5E02",
      province: "52",
      city: "01"
    },
    {
      code: "520200",
      name: "\u516D\u76D8\u6C34\u5E02",
      province: "52",
      city: "02"
    },
    {
      code: "520300",
      name: "\u9075\u4E49\u5E02",
      province: "52",
      city: "03"
    },
    {
      code: "520400",
      name: "\u5B89\u987A\u5E02",
      province: "52",
      city: "04"
    },
    {
      code: "520500",
      name: "\u6BD5\u8282\u5E02",
      province: "52",
      city: "05"
    },
    {
      code: "520600",
      name: "\u94DC\u4EC1\u5E02",
      province: "52",
      city: "06"
    },
    {
      code: "522300",
      name: "\u9ED4\u897F\u5357\u5E03\u4F9D\u65CF\u82D7\u65CF\u81EA\u6CBB\u5DDE",
      province: "52",
      city: "23"
    },
    {
      code: "522600",
      name: "\u9ED4\u4E1C\u5357\u82D7\u65CF\u4F97\u65CF\u81EA\u6CBB\u5DDE",
      province: "52",
      city: "26"
    },
    {
      code: "522700",
      name: "\u9ED4\u5357\u5E03\u4F9D\u65CF\u82D7\u65CF\u81EA\u6CBB\u5DDE",
      province: "52",
      city: "27"
    },
    {
      code: "530100",
      name: "\u6606\u660E\u5E02",
      province: "53",
      city: "01"
    },
    {
      code: "530300",
      name: "\u66F2\u9756\u5E02",
      province: "53",
      city: "03"
    },
    {
      code: "530400",
      name: "\u7389\u6EAA\u5E02",
      province: "53",
      city: "04"
    },
    {
      code: "530500",
      name: "\u4FDD\u5C71\u5E02",
      province: "53",
      city: "05"
    },
    {
      code: "530600",
      name: "\u662D\u901A\u5E02",
      province: "53",
      city: "06"
    },
    {
      code: "530700",
      name: "\u4E3D\u6C5F\u5E02",
      province: "53",
      city: "07"
    },
    {
      code: "530800",
      name: "\u666E\u6D31\u5E02",
      province: "53",
      city: "08"
    },
    {
      code: "530900",
      name: "\u4E34\u6CA7\u5E02",
      province: "53",
      city: "09"
    },
    {
      code: "532300",
      name: "\u695A\u96C4\u5F5D\u65CF\u81EA\u6CBB\u5DDE",
      province: "53",
      city: "23"
    },
    {
      code: "532500",
      name: "\u7EA2\u6CB3\u54C8\u5C3C\u65CF\u5F5D\u65CF\u81EA\u6CBB\u5DDE",
      province: "53",
      city: "25"
    },
    {
      code: "532600",
      name: "\u6587\u5C71\u58EE\u65CF\u82D7\u65CF\u81EA\u6CBB\u5DDE",
      province: "53",
      city: "26"
    },
    {
      code: "532800",
      name: "\u897F\u53CC\u7248\u7EB3\u50A3\u65CF\u81EA\u6CBB\u5DDE",
      province: "53",
      city: "28"
    },
    {
      code: "532900",
      name: "\u5927\u7406\u767D\u65CF\u81EA\u6CBB\u5DDE",
      province: "53",
      city: "29"
    },
    {
      code: "533100",
      name: "\u5FB7\u5B8F\u50A3\u65CF\u666F\u9887\u65CF\u81EA\u6CBB\u5DDE",
      province: "53",
      city: "31"
    },
    {
      code: "533300",
      name: "\u6012\u6C5F\u5088\u50F3\u65CF\u81EA\u6CBB\u5DDE",
      province: "53",
      city: "33"
    },
    {
      code: "533400",
      name: "\u8FEA\u5E86\u85CF\u65CF\u81EA\u6CBB\u5DDE",
      province: "53",
      city: "34"
    },
    {
      code: "540100",
      name: "\u62C9\u8428\u5E02",
      province: "54",
      city: "01"
    },
    {
      code: "540200",
      name: "\u65E5\u5580\u5219\u5E02",
      province: "54",
      city: "02"
    },
    {
      code: "540300",
      name: "\u660C\u90FD\u5E02",
      province: "54",
      city: "03"
    },
    {
      code: "540400",
      name: "\u6797\u829D\u5E02",
      province: "54",
      city: "04"
    },
    {
      code: "540500",
      name: "\u5C71\u5357\u5E02",
      province: "54",
      city: "05"
    },
    {
      code: "540600",
      name: "\u90A3\u66F2\u5E02",
      province: "54",
      city: "06"
    },
    {
      code: "542500",
      name: "\u963F\u91CC\u5730\u533A",
      province: "54",
      city: "25"
    },
    {
      code: "610100",
      name: "\u897F\u5B89\u5E02",
      province: "61",
      city: "01"
    },
    {
      code: "610200",
      name: "\u94DC\u5DDD\u5E02",
      province: "61",
      city: "02"
    },
    {
      code: "610300",
      name: "\u5B9D\u9E21\u5E02",
      province: "61",
      city: "03"
    },
    {
      code: "610400",
      name: "\u54B8\u9633\u5E02",
      province: "61",
      city: "04"
    },
    {
      code: "610500",
      name: "\u6E2D\u5357\u5E02",
      province: "61",
      city: "05"
    },
    {
      code: "610600",
      name: "\u5EF6\u5B89\u5E02",
      province: "61",
      city: "06"
    },
    {
      code: "610700",
      name: "\u6C49\u4E2D\u5E02",
      province: "61",
      city: "07"
    },
    {
      code: "610800",
      name: "\u6986\u6797\u5E02",
      province: "61",
      city: "08"
    },
    {
      code: "610900",
      name: "\u5B89\u5EB7\u5E02",
      province: "61",
      city: "09"
    },
    {
      code: "611000",
      name: "\u5546\u6D1B\u5E02",
      province: "61",
      city: "10"
    },
    {
      code: "620100",
      name: "\u5170\u5DDE\u5E02",
      province: "62",
      city: "01"
    },
    {
      code: "620200",
      name: "\u5609\u5CEA\u5173\u5E02",
      province: "62",
      city: "02"
    },
    {
      code: "620300",
      name: "\u91D1\u660C\u5E02",
      province: "62",
      city: "03"
    },
    {
      code: "620400",
      name: "\u767D\u94F6\u5E02",
      province: "62",
      city: "04"
    },
    {
      code: "620500",
      name: "\u5929\u6C34\u5E02",
      province: "62",
      city: "05"
    },
    {
      code: "620600",
      name: "\u6B66\u5A01\u5E02",
      province: "62",
      city: "06"
    },
    {
      code: "620700",
      name: "\u5F20\u6396\u5E02",
      province: "62",
      city: "07"
    },
    {
      code: "620800",
      name: "\u5E73\u51C9\u5E02",
      province: "62",
      city: "08"
    },
    {
      code: "620900",
      name: "\u9152\u6CC9\u5E02",
      province: "62",
      city: "09"
    },
    {
      code: "621000",
      name: "\u5E86\u9633\u5E02",
      province: "62",
      city: "10"
    },
    {
      code: "621100",
      name: "\u5B9A\u897F\u5E02",
      province: "62",
      city: "11"
    },
    {
      code: "621200",
      name: "\u9647\u5357\u5E02",
      province: "62",
      city: "12"
    },
    {
      code: "622900",
      name: "\u4E34\u590F\u56DE\u65CF\u81EA\u6CBB\u5DDE",
      province: "62",
      city: "29"
    },
    {
      code: "623000",
      name: "\u7518\u5357\u85CF\u65CF\u81EA\u6CBB\u5DDE",
      province: "62",
      city: "30"
    },
    {
      code: "630100",
      name: "\u897F\u5B81\u5E02",
      province: "63",
      city: "01"
    },
    {
      code: "630200",
      name: "\u6D77\u4E1C\u5E02",
      province: "63",
      city: "02"
    },
    {
      code: "632200",
      name: "\u6D77\u5317\u85CF\u65CF\u81EA\u6CBB\u5DDE",
      province: "63",
      city: "22"
    },
    {
      code: "632300",
      name: "\u9EC4\u5357\u85CF\u65CF\u81EA\u6CBB\u5DDE",
      province: "63",
      city: "23"
    },
    {
      code: "632500",
      name: "\u6D77\u5357\u85CF\u65CF\u81EA\u6CBB\u5DDE",
      province: "63",
      city: "25"
    },
    {
      code: "632600",
      name: "\u679C\u6D1B\u85CF\u65CF\u81EA\u6CBB\u5DDE",
      province: "63",
      city: "26"
    },
    {
      code: "632700",
      name: "\u7389\u6811\u85CF\u65CF\u81EA\u6CBB\u5DDE",
      province: "63",
      city: "27"
    },
    {
      code: "632800",
      name: "\u6D77\u897F\u8499\u53E4\u65CF\u85CF\u65CF\u81EA\u6CBB\u5DDE",
      province: "63",
      city: "28"
    },
    {
      code: "640100",
      name: "\u94F6\u5DDD\u5E02",
      province: "64",
      city: "01"
    },
    {
      code: "640200",
      name: "\u77F3\u5634\u5C71\u5E02",
      province: "64",
      city: "02"
    },
    {
      code: "640300",
      name: "\u5434\u5FE0\u5E02",
      province: "64",
      city: "03"
    },
    {
      code: "640400",
      name: "\u56FA\u539F\u5E02",
      province: "64",
      city: "04"
    },
    {
      code: "640500",
      name: "\u4E2D\u536B\u5E02",
      province: "64",
      city: "05"
    },
    {
      code: "650100",
      name: "\u4E4C\u9C81\u6728\u9F50\u5E02",
      province: "65",
      city: "01"
    },
    {
      code: "650200",
      name: "\u514B\u62C9\u739B\u4F9D\u5E02",
      province: "65",
      city: "02"
    },
    {
      code: "650400",
      name: "\u5410\u9C81\u756A\u5E02",
      province: "65",
      city: "04"
    },
    {
      code: "650500",
      name: "\u54C8\u5BC6\u5E02",
      province: "65",
      city: "05"
    },
    {
      code: "652300",
      name: "\u660C\u5409\u56DE\u65CF\u81EA\u6CBB\u5DDE",
      province: "65",
      city: "23"
    },
    {
      code: "652700",
      name: "\u535A\u5C14\u5854\u62C9\u8499\u53E4\u81EA\u6CBB\u5DDE",
      province: "65",
      city: "27"
    },
    {
      code: "652800",
      name: "\u5DF4\u97F3\u90ED\u695E\u8499\u53E4\u81EA\u6CBB\u5DDE",
      province: "65",
      city: "28"
    },
    {
      code: "652900",
      name: "\u963F\u514B\u82CF\u5730\u533A",
      province: "65",
      city: "29"
    },
    {
      code: "653000",
      name: "\u514B\u5B5C\u52D2\u82CF\u67EF\u5C14\u514B\u5B5C\u81EA\u6CBB\u5DDE",
      province: "65",
      city: "30"
    },
    {
      code: "653100",
      name: "\u5580\u4EC0\u5730\u533A",
      province: "65",
      city: "31"
    },
    {
      code: "653200",
      name: "\u548C\u7530\u5730\u533A",
      province: "65",
      city: "32"
    },
    {
      code: "654000",
      name: "\u4F0A\u7281\u54C8\u8428\u514B\u81EA\u6CBB\u5DDE",
      province: "65",
      city: "40"
    },
    {
      code: "654200",
      name: "\u5854\u57CE\u5730\u533A",
      province: "65",
      city: "42"
    },
    {
      code: "654300",
      name: "\u963F\u52D2\u6CF0\u5730\u533A",
      province: "65",
      city: "43"
    },
    {
      code: "429000",
      name: "\u7701\u76F4\u8F96\u53BF\u7EA7\u884C\u653F\u533A\u5212",
      province: "42",
      city: "90"
    }
  ];
  const __default__$3 = {
    name: "picker-region"
  };
  const _sfc_main$9 = /* @__PURE__ */ Object.assign(__default__$3, {
    props: {
      isDisabled: {
        type: Boolean,
        default: false
      },
      propsProvinceCode: {
        type: String,
        default: ""
      },
      propsCityCode: {
        type: String,
        default: ""
      }
    },
    emits: ["change"],
    setup(__props, { emit }) {
      const props = __props;
      formatAppLog("log", "at pages/components/PickerRegion.vue:59", "province================================", province);
      formatAppLog("log", "at pages/components/PickerRegion.vue:60", "city=======================================", city);
      vue.ref(0);
      let provinceCode = vue.ref(props.propsProvinceCode);
      let cityCode = vue.ref(props.propsCityCode);
      let finalCity = vue.ref(["\u5E02\u8F96\u533A"]);
      let multiArray = vue.reactive([province, finalCity.value]);
      let multiIndex = vue.reactive([0, 0]);
      const multiChange = (e2) => {
        const {
          detail: { value }
        } = e2;
        provinceCode.value = province[value[0]].code;
        cityCode.value = finalCity["value"][value[1]].code;
        emit("change", { provinceCode: provinceCode.value, cityCode: cityCode.value });
      };
      const findCity = (p) => {
        return city.filter((element) => element.province === p);
      };
      const multiColumn = (e2) => {
        const {
          detail: { column, value }
        } = e2;
        if (column === 0) {
          finalCity.value = findCity(province[value].province);
          if (finalCity["value"].length === 0) {
            finalCity.value = ["\u5E02\u8F96\u533A"];
          }
          multiArray[1] = finalCity.value;
        }
      };
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("picker", {
          mode: "multiSelector",
          range: vue.unref(multiArray),
          "range-key": "name",
          value: vue.unref(multiIndex),
          disabled: __props.isDisabled,
          onColumnchange: multiColumn,
          onChange: multiChange
        }, [
          vue.createElementVNode("view", null, vue.toDisplayString(vue.unref(provinceCode) ? `${_ctx.$filters.filterRegion(vue.unref(provinceCode), vue.unref(province))}/${_ctx.$filters.filterRegion(vue.unref(cityCode), vue.unref(city))}` : `${__props.isDisabled ? "\u6682\u672A\u586B\u5199" : "\u8BF7\u9009\u62E9\u7701"}`), 1)
        ], 40, ["range", "value", "disabled"]);
      };
    }
  });
  var PickerRegion = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["__file", "C:/myself/social/social/src/pages/components/PickerRegion.vue"]]);
  const __default__$2 = {
    onBackPress(options) {
      if (options.from === "navigateBack") {
        return false;
      }
      uni.switchTab({
        url: "/pages/user/index"
      });
      return true;
    }
  };
  const _sfc_main$8 = /* @__PURE__ */ Object.assign(__default__$2, {
    setup(__props) {
      const defaultAvatar = "/static/images/default_avatar.png";
      const store2 = useStore();
      let userInfo = vue.computed(() => store2.state.user.userInfo).value;
      let images = vue.reactive(userInfo.photos);
      formatAppLog("log", "at pages/user/info/index.vue:103", "images===", images);
      const avatar = vue.ref(userInfo.avatar);
      const age = vue.ref(hooks().diff(userInfo.birthday, "years"));
      const onUpload = (item, index) => {
        formatAppLog("log", "at pages/user/info/index.vue:136", "item, index===", item, index);
        if (item) {
          uni.previewImage({
            urls: images,
            longPressActions: {
              itemList: ["\u53D1\u9001\u7ED9\u670B\u53CB", "\u4FDD\u5B58\u56FE\u7247", "\u6536\u85CF"],
              success: function(data) {
                formatAppLog("log", "at pages/user/info/index.vue:143", "\u9009\u4E2D\u4E86\u7B2C" + (data.tapIndex + 1) + "\u4E2A\u6309\u94AE,\u7B2C" + (data.index + 1) + "\u5F20\u56FE\u7247");
              },
              fail: function(err) {
                formatAppLog("log", "at pages/user/info/index.vue:152", err.errMsg);
              }
            }
          });
          return;
        }
        uni.navigateTo({
          url: "/pages/user/info/Editor"
        });
        const getDate = (type) => {
          const date = new Date();
          let year = date.getFullYear();
          let month = date.getMonth() + 1;
          let day = date.getDate();
          if (type === "start") {
            year = year - 60;
          } else if (type === "end") {
            year = year + 2;
          }
          month = month > 9 ? month : "0" + month;
          day = day > 9 ? day : "0" + day;
          return `${year}-${month}-${day}`;
        };
        getDate({
          format: true
        });
      };
      const inEditor = () => {
        formatAppLog("log", "at pages/user/info/index.vue:196", "why");
        uni.navigateTo({
          url: "/pages/user/info/Editor"
        });
      };
      return (_ctx, _cache) => {
        const _component_uni_forms_item = resolveEasycom(vue.resolveDynamicComponent("uni-forms-item"), __easycom_0$2);
        const _component_uni_forms = resolveEasycom(vue.resolveDynamicComponent("uni-forms"), __easycom_1);
        return vue.openBlock(), vue.createElementBlock("view", { class: "userinfo-wraper" }, [
          vue.createElementVNode("view", { class: "userinfo" }, [
            vue.createElementVNode("image", {
              mode: "aspectFill",
              src: avatar.value ? avatar.value : defaultAvatar,
              class: "avatar"
            }, null, 8, ["src"]),
            vue.createElementVNode("view", { class: "basic-info" }, [
              vue.createVNode(PickerRegion, {
                isDisabled: "",
                propsProvinceCode: vue.unref(userInfo).location && vue.unref(userInfo).location.provinceCode,
                propsCityCode: vue.unref(userInfo).location && vue.unref(userInfo).location.cityCode
              }, null, 8, ["propsProvinceCode", "propsCityCode"]),
              vue.createTextVNode("/" + vue.toDisplayString(_ctx.$filters.filterGender(vue.unref(userInfo).gender) || "\u6682\u65E0") + "/", 1),
              age.value || age.value === 0 ? (vue.openBlock(), vue.createElementBlock("text", { key: 0 }, vue.toDisplayString(age.value) + "\u5C81", 1)) : vue.createCommentVNode("v-if", true),
              !age.value && age.value !== 0 ? (vue.openBlock(), vue.createElementBlock("text", { key: 1 }, "\u6682\u65E0")) : vue.createCommentVNode("v-if", true),
              vue.createCommentVNode(' <uni-tag\r\n          v-if="!age && age !== 0"\r\n          disabled\r\n          inverted\r\n          text="\u6682\u65E0"\r\n        ></uni-tag> ')
            ])
          ]),
          vue.createElementVNode("view", { class: "photos" }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(images), (item, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "photo-wraper",
                onClick: ($event) => onUpload(item, index),
                key: index
              }, [
                vue.createElementVNode("image", {
                  mode: "aspectFill",
                  src: item ? item : defaultAvatar,
                  class: "photo"
                }, null, 8, ["src"]),
                !item && vue.unref(images)[index - 1] || index === 0 && !vue.unref(images)[0] ? (vue.openBlock(), vue.createElementBlock("text", {
                  key: 0,
                  class: "photo-add"
                }, "+")) : vue.createCommentVNode("v-if", true)
              ], 8, ["onClick"]);
            }), 128))
          ]),
          vue.createVNode(_component_uni_forms, null, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_uni_forms_item, { label: "\u5BB6\u4E61" }, {
                default: vue.withCtx(() => [
                  vue.createVNode(PickerRegion, {
                    isDisabled: "",
                    propsProvinceCode: vue.unref(userInfo).hometown && vue.unref(userInfo).hometown.provinceCode,
                    propsCityCode: vue.unref(userInfo).hometown && vue.unref(userInfo).hometown.cityCode
                  }, null, 8, ["propsProvinceCode", "propsCityCode"])
                ]),
                _: 1
              }),
              vue.createVNode(_component_uni_forms_item, { label: "\u5B66\u6821" }, {
                default: vue.withCtx(() => [
                  vue.createElementVNode("view", null, vue.toDisplayString(vue.unref(userInfo).schoolName || "\u6682\u672A\u586B\u5199"), 1)
                ]),
                _: 1
              }),
              vue.createVNode(_component_uni_forms_item, { label: "\u804C\u4E1A" }, {
                default: vue.withCtx(() => [
                  vue.createElementVNode("view", null, vue.toDisplayString(vue.unref(userInfo).job || "\u6682\u672A\u586B\u5199"), 1)
                ]),
                _: 1
              })
            ]),
            _: 1
          }),
          vue.createElementVNode("button", { onClick: inEditor }, "\u7F16\u8F91\u8D44\u6599")
        ]);
      };
    }
  });
  var PagesUserInfoIndex = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["__scopeId", "data-v-0b739da1"], ["__file", "C:/myself/social/social/src/pages/user/info/index.vue"]]);
  const __default__$1 = {
    onBackPress(options) {
      formatAppLog("log", "at pages/user/info/User.vue:72", "options=", options);
    }
  };
  const _sfc_main$7 = /* @__PURE__ */ Object.assign(__default__$1, {
    props: {
      id: {
        type: String,
        default: ""
      }
    },
    setup(__props) {
      const props = __props;
      let userInfo = vue.ref({});
      let age = vue.ref("");
      const store2 = useStore();
      vue.computed(() => store2.state.user.userInfo).value;
      const getFrend = () => {
        const params = {
          userId: props.id
        };
        getFrendInfo(params).then((res2) => {
          formatAppLog("log", "at pages/user/info/User.vue:107", "\u597D\u53CB=", res2);
          if (res2.data.code === 200) {
            userInfo.value = res2.data.data;
            age.value = vue.ref(hooks().diff(userInfo.value.birthday, "years"));
          }
        });
      };
      const onPreviewImage = (item, index) => {
        uni.previewImage({
          current: index,
          urls: userInfo.value.photos
        });
      };
      const goChat = () => {
        const token2 = getIMToken();
        formatAppLog("log", "at pages/user/info/User.vue:126", "token===", token2);
        formatAppLog("log", "at pages/user/info/User.vue:127", "userInfo.value.phone===", userInfo.value.phone);
        uni.navigateTo({
          url: `/pages/message/Chat?userID=${userInfo.value.phone}&title=${userInfo.value.username}`
        });
        return;
      };
      vue.onMounted(() => {
        formatAppLog("log", "at pages/user/info/User.vue:154", "props===", props);
        getFrend();
      });
      return (_ctx, _cache) => {
        const _component_uni_forms_item = resolveEasycom(vue.resolveDynamicComponent("uni-forms-item"), __easycom_0$2);
        const _component_uni_forms = resolveEasycom(vue.resolveDynamicComponent("uni-forms"), __easycom_1);
        return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
          vue.createElementVNode("view", { class: "userinfo-wraper" }, [
            vue.createElementVNode("view", { class: "userinfo" }, [
              vue.createElementVNode("image", {
                mode: "aspectFill",
                src: vue.unref(userInfo).avatar,
                class: "avatar"
              }, null, 8, ["src"]),
              vue.createElementVNode("view", { class: "basic-info" }, [
                (vue.openBlock(), vue.createBlock(PickerRegion, {
                  isDisabled: "",
                  propsProvinceCode: vue.unref(userInfo).location && vue.unref(userInfo).location.provinceCode,
                  propsCityCode: vue.unref(userInfo).location && vue.unref(userInfo).location.cityCode,
                  key: vue.unref(userInfo).location && vue.unref(userInfo).location.cityCode
                }, null, 8, ["propsProvinceCode", "propsCityCode"])),
                vue.createTextVNode("/" + vue.toDisplayString(_ctx.$filters.filterGender(vue.unref(userInfo).gender) || "\u6682\u65E0") + "/", 1),
                vue.unref(age) || vue.unref(age) === 0 ? (vue.openBlock(), vue.createElementBlock("text", { key: 0 }, vue.toDisplayString(vue.unref(age)) + "\u5C81", 1)) : vue.createCommentVNode("v-if", true),
                !vue.unref(age) && vue.unref(age) !== 0 ? (vue.openBlock(), vue.createElementBlock("text", { key: 1 }, "\u6682\u65E0")) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode(' <uni-tag\r\n          v-if="!age && age !== 0"\r\n          disabled\r\n          inverted\r\n          text="\u6682\u65E0"\r\n        ></uni-tag> ')
              ])
            ]),
            vue.createElementVNode("view", { class: "photos" }, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(userInfo).photos, (item, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "photo-wraper",
                  onClick: ($event) => onPreviewImage(item, index),
                  key: index
                }, [
                  vue.createElementVNode("image", {
                    mode: "aspectFill",
                    src: item,
                    class: "photo"
                  }, null, 8, ["src"])
                ], 8, ["onClick"]);
              }), 128))
            ]),
            vue.createVNode(_component_uni_forms, null, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_uni_forms_item, { label: "\u7B7E\u540D" }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("view", null, vue.toDisplayString(vue.unref(userInfo).motto || "\u6682\u672A\u586B\u5199"), 1)
                  ]),
                  _: 1
                }),
                vue.createVNode(_component_uni_forms_item, { label: "\u5BB6\u4E61" }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(PickerRegion, {
                      isDisabled: "",
                      propsProvinceCode: vue.unref(userInfo).hometown && vue.unref(userInfo).hometown.provinceCode,
                      propsCityCode: vue.unref(userInfo).hometown && vue.unref(userInfo).hometown.cityCode,
                      key: vue.unref(userInfo).hometown && vue.unref(userInfo).hometown.provinceCode
                    }, null, 8, ["propsProvinceCode", "propsCityCode"]))
                  ]),
                  _: 1
                }),
                vue.createVNode(_component_uni_forms_item, { label: "\u5B66\u6821" }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("view", null, vue.toDisplayString(vue.unref(userInfo).schoolName || "\u6682\u672A\u586B\u5199"), 1)
                  ]),
                  _: 1
                }),
                vue.createVNode(_component_uni_forms_item, { label: "\u804C\u4E1A" }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("view", null, vue.toDisplayString(vue.unref(userInfo).job || "\u6682\u672A\u586B\u5199"), 1)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            })
          ]),
          vue.createElementVNode("view", { class: "send-msg" }, [
            vue.createElementVNode("view", { class: "chat" }, [
              vue.createCommentVNode(' <svg class="chat-icon" aria-hidden="true" @click.stop="goChat">\r\n        <use xlink:href="#icon-faxinxi"></use>\r\n      </svg> '),
              vue.createElementVNode("span", {
                class: "iconfont chat-icon",
                onClick: vue.withModifiers(goChat, ["stop"])
              }, "\uE6CF", 8, ["onClick"]),
              vue.createElementVNode("text", null, "\u79C1\u804A")
            ])
          ])
        ], 64);
      };
    }
  });
  var PagesUserInfoUser = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["__scopeId", "data-v-eb0e3228"], ["__file", "C:/myself/social/social/src/pages/user/info/User.vue"]]);
  const _sfc_main$6 = {
    setup(__props) {
      const store2 = useStore();
      let userInfo = vue.computed(() => store2.state.user.userInfo).value;
      let formData = vue.reactive({
        avatar: userInfo.avatar,
        username: userInfo.username,
        gender: userInfo.gender,
        birthday: hooks(userInfo.birthday).format("YYYY-MM-DD"),
        location: {
          provinceCode: userInfo.location && userInfo.location.provinceCode,
          cityCode: userInfo.location && userInfo.location.cityCode
        },
        hometown: {
          provinceCode: userInfo.hometown && userInfo.hometown.provinceCode,
          cityCode: userInfo.hometown && userInfo.hometown.cityCode
        },
        schoolName: userInfo.schoolName,
        job: userInfo.job,
        motto: userInfo.motto,
        photos: userInfo.photos
      });
      let rules = {
        username: {
          rules: [
            {
              required: true,
              errorMessage: "\u8BF7\u8F93\u5165\u6635\u79F0"
            }
          ]
        }
      };
      uni.$on("schoolUpdate", function(data) {
        formData.schoolName = data.schoolName;
      });
      const form = vue.ref(null);
      const submit = (e2) => {
        formatAppLog("log", "at pages/user/info/Editor.vue:189", "form=e==", e2);
        form.value.validate().then((res2) => {
          formatAppLog("log", "at pages/user/info/Editor.vue:193", "\u8868\u5355\u6570\u636E\u4FE1\u606F\uFF1A", res2);
          const params = {
            form: { ...res2, photos: images }
          };
          editUserInfo(params).then((data) => {
            formatAppLog("log", "at pages/user/info/Editor.vue:199", "data======", data);
            store2.dispatch("user/GetUserInfo").then(() => {
              uni.navigateTo({
                url: "/pages/user/info/index"
              });
            });
          });
        }).catch((err) => {
          formatAppLog("log", "at pages/user/info/Editor.vue:208", "\u8868\u5355\u9519\u8BEF\u4FE1\u606F\uFF1A", err);
        });
      };
      const defaultAvatar = "/static/images/default_avatar.png";
      let images = vue.reactive(userInfo.photos);
      vue.watch(images, (images2, old) => {
        formatAppLog("log", "at pages/user/info/Editor.vue:219", "images", images2);
        formData.photos = images2;
      });
      const quantity = (images2) => {
        const arr = images2.filter((item) => item);
        return arr.length;
      };
      formatAppLog("log", "at pages/user/info/Editor.vue:228", "images===", images);
      const avatar = vue.ref(userInfo.avatar);
      vue.watch(avatar, (avatar2, old) => {
        formData.avatar = avatar2;
      });
      const onUploadFile = (index, filePath) => {
        uni.uploadFile({
          url: `${{ "BASE_URL": "https://mancao.social/prod" }.BASE_URL}/users/uploadFile`,
          filePath,
          name: "file",
          formData: {
            user: "test"
          },
          success: (uploadFileRes) => {
            formatAppLog("log", "at pages/user/info/Editor.vue:256", "uploadFileRes===", uploadFileRes);
            const { data } = uploadFileRes;
            const imgData = JSON.parse(data);
            formatAppLog("log", "at pages/user/info/Editor.vue:259", "imgData=", imgData);
            images[index] = imgData.url;
            formatAppLog("log", "at pages/user/info/Editor.vue:261", "index===", index);
            if (index === 0) {
              avatar.value = imgData.url;
            }
          }
        });
      };
      const chooseImage = (index) => {
        uni.chooseImage({
          success: (chooseImageRes) => {
            formatAppLog("log", "at pages/user/info/Editor.vue:278", "chooseImageRes===", chooseImageRes);
            const { tempFilePaths, tempFiles } = chooseImageRes;
            formatAppLog("log", "at pages/user/info/Editor.vue:280", "tempFilePaths[0]===", tempFilePaths[0]);
            onUploadFile(index, tempFilePaths[0]);
          }
        });
      };
      const onUpload = (item, index) => {
        formatAppLog("log", "at pages/user/info/Editor.vue:295", "item, index===", item, index);
        if (item) {
          let itemList = ["\u7F16\u8F91"];
          if (index > 0) {
            itemList = ["\u8BBE\u4E3A\u5934\u50CF", "\u7F16\u8F91", "\u5220\u9664"];
          }
          uni.showActionSheet({
            itemList,
            success: function(res2) {
              formatAppLog("log", "at pages/user/info/Editor.vue:304", "\u9009\u4E2D\u4E86\u7B2C" + (res2.tapIndex + 1) + "\u4E2A\u6309\u94AE");
              if (res2.tapIndex === 0) {
                images[index] = images[0];
                images[0] = item;
                avatar.value = item;
                return;
              }
              if (res2.tapIndex === 1) {
                chooseImage(index);
                return;
              }
              if (res2.tapIndex === 2) {
                images.splice(index, 1);
              }
            },
            fail: function(res2) {
              formatAppLog("log", "at pages/user/info/Editor.vue:321", res2.errMsg);
            }
          });
          return;
        }
        chooseImage(index);
      };
      const getDate = (type) => {
        const date = new Date();
        let year = date.getFullYear();
        let month = date.getMonth() + 1;
        let day = date.getDate();
        if (type === "start") {
          year = year - 60;
        } else if (type === "end") {
          year = year + 2;
        }
        month = month > 9 ? month : "0" + month;
        day = day > 9 ? day : "0" + day;
        return `${year}-${month}-${day}`;
      };
      const currentDate = getDate({
        format: true
      });
      formatAppLog("log", "at pages/user/info/Editor.vue:350", "currentDate===", currentDate);
      let startDate = getDate("start");
      let endDate = getDate("end");
      const bindDateChange = (e2) => {
        formData.birthday = e2.detail.value;
      };
      const changeGender = () => {
        uni.showActionSheet({
          itemList: ["\u7537", "\u5973"],
          success: function(res2) {
            formatAppLog("log", "at pages/user/info/Editor.vue:364", "\u9009\u4E2D\u4E86\u7B2C" + (res2.tapIndex + 1) + "\u4E2A\u6309\u94AE");
          },
          fail: function(res2) {
            formatAppLog("log", "at pages/user/info/Editor.vue:367", res2.errMsg);
          }
        });
      };
      const onChange = (obj) => {
        formatAppLog("log", "at pages/user/info/Editor.vue:377", "obj=====", obj);
        const { provinceCode, cityCode } = obj;
        formData.location.provinceCode = provinceCode;
        formData.location.cityCode = cityCode;
      };
      const onChangeHome = (obj) => {
        formatAppLog("log", "at pages/user/info/Editor.vue:383", "obj.home=====", obj);
        const { provinceCode, cityCode } = obj;
        formData.hometown.provinceCode = provinceCode;
        formData.hometown.cityCode = cityCode;
      };
      const openSchool = () => {
        uni.navigateTo({
          url: "/pages/user/info/School"
        });
      };
      let professions = vue.ref([
        "IT/\u4E92\u8054\u7F51/\u901A\u4FE1",
        "\u91D1\u878D",
        "\u5DE5\u4E1A\u5236\u9020\u4E1A",
        "\u6559\u80B2/\u79D1\u7814",
        "\u516C\u5171\u4E8B\u4E1A\u5355\u4F4D",
        "\u533B\u836F/\u5065\u5EB7",
        "\u5A92\u4F53/\u516C\u5173",
        "\u5F71\u89C6/\u5A31\u4E50",
        "\u96F6\u552E",
        "\u9910\u996E/\u9152\u5E97",
        "\u5176\u4ED6"
      ]);
      let activeProfessionIndex = vue.ref(0);
      const changeProfession = (e2) => {
        const {
          detail: { value }
        } = e2;
        activeProfessionIndex.value = value;
        formData.job = professions["value"][value];
      };
      return (_ctx, _cache) => {
        const _component_uni_forms_item = resolveEasycom(vue.resolveDynamicComponent("uni-forms-item"), __easycom_0$2);
        const _component_uni_forms = resolveEasycom(vue.resolveDynamicComponent("uni-forms"), __easycom_1);
        return vue.openBlock(), vue.createElementBlock("view", { class: "userinfo-wraper" }, [
          vue.createVNode(_component_uni_forms, {
            ref_key: "form",
            ref: form,
            modelValue: vue.unref(formData),
            rules: vue.unref(rules)
          }, {
            default: vue.withCtx(() => [
              vue.createElementVNode("view", { class: "userinfo" }, [
                vue.createVNode(_component_uni_forms_item, { name: "avatar" }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("image", {
                      src: avatar.value ? avatar.value : defaultAvatar,
                      class: "avatar"
                    }, null, 8, ["src"])
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("view", { class: "info-item" }, [
                vue.createElementVNode("view", { class: "title-wraper" }, [
                  vue.createElementVNode("text", { class: "title" }, "\u4E2A\u4EBA\u7167\u7247"),
                  vue.createElementVNode("text", null, "(" + vue.toDisplayString(quantity(vue.unref(images))) + "/" + vue.toDisplayString(vue.unref(images).length) + ")", 1)
                ]),
                vue.createCommentVNode(' <uni-forms-item name="photos"> '),
                vue.createElementVNode("scroll-view", {
                  "scroll-x": "true",
                  class: "photos"
                }, [
                  vue.createElementVNode("view", { class: "photos" }, [
                    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(images), (item, index) => {
                      return vue.openBlock(), vue.createElementBlock("view", {
                        class: "photo-wraper",
                        onClick: ($event) => onUpload(item, index),
                        key: index
                      }, [
                        vue.createElementVNode("image", {
                          mode: "aspectFill",
                          src: item ? item : defaultAvatar,
                          class: "photo"
                        }, null, 8, ["src"]),
                        !item && vue.unref(images)[index - 1] || index === 0 && !vue.unref(images)[0] ? (vue.openBlock(), vue.createElementBlock("text", {
                          key: 0,
                          class: "photo-add"
                        }, "+")) : vue.createCommentVNode("v-if", true)
                      ], 8, ["onClick"]);
                    }), 128))
                  ])
                ]),
                vue.createCommentVNode(" </uni-forms-item> ")
              ]),
              vue.createElementVNode("view", { class: "info-item" }, [
                vue.createElementVNode("view", { class: "title-wraper" }, [
                  vue.createElementVNode("text", { class: "title" }, "\u4E2A\u4EBA\u7B7E\u540D")
                ]),
                vue.createVNode(_component_uni_forms_item, { name: "motto" }, {
                  default: vue.withCtx(() => [
                    vue.withDirectives(vue.createElementVNode("input", {
                      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => vue.unref(formData).motto = $event),
                      type: "text",
                      placeholder: "\u8BF7\u8F93\u5165\u4E2A\u4EBA\u7B7E\u540D"
                    }, null, 512), [
                      [vue.vModelText, vue.unref(formData).motto]
                    ])
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("view", { class: "info-item" }, [
                vue.createElementVNode("view", { class: "title-wraper" }, [
                  vue.createElementVNode("text", { class: "title" }, "\u57FA\u7840\u4FE1\u606F")
                ]),
                vue.createCommentVNode(' <view class="base-item">\r\n        <text>\u6635\u79F0</text>\r\n        <input type="text" placeholder="\u8BF7\u8F93\u5165\u6635\u79F0" />\r\n      </view> '),
                vue.createVNode(_component_uni_forms_item, {
                  label: "\u6635\u79F0",
                  name: "username"
                }, {
                  default: vue.withCtx(() => [
                    vue.withDirectives(vue.createElementVNode("input", {
                      class: "input",
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => vue.unref(formData).username = $event),
                      type: "text",
                      placeholder: "\u8BF7\u8F93\u5165\u6635\u79F0"
                    }, null, 512), [
                      [vue.vModelText, vue.unref(formData).username]
                    ])
                  ]),
                  _: 1
                }),
                vue.createVNode(_component_uni_forms_item, {
                  label: "\u6027\u522B",
                  name: "gender"
                }, {
                  default: vue.withCtx(() => [
                    vue.createCommentVNode(" <text>\u6027\u522B</text> "),
                    vue.createElementVNode("view", { onClick: changeGender }, vue.toDisplayString(_ctx.$filters.filterGender(vue.unref(userInfo).gender)), 1)
                  ]),
                  _: 1
                }),
                vue.createVNode(_component_uni_forms_item, {
                  label: "\u51FA\u751F\u65E5\u671F",
                  name: "birthday"
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("picker", {
                      mode: "date",
                      value: vue.unref(formData).birthday,
                      start: vue.unref(startDate),
                      end: vue.unref(endDate),
                      onChange: bindDateChange
                    }, [
                      vue.createElementVNode("view", { class: "uni-input" }, vue.toDisplayString(vue.unref(formData).birthday), 1)
                    ], 40, ["value", "start", "end"])
                  ]),
                  _: 1
                }),
                vue.createVNode(_component_uni_forms_item, {
                  label: "\u6240\u5728\u5730",
                  name: "location"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(PickerRegion, {
                      propsProvinceCode: vue.unref(formData).location.provinceCode,
                      propsCityCode: vue.unref(formData).location.cityCode,
                      onChange
                    }, null, 8, ["propsProvinceCode", "propsCityCode"])
                  ]),
                  _: 1
                }),
                vue.createVNode(_component_uni_forms_item, {
                  label: "\u5BB6\u4E61",
                  name: "hometown"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(PickerRegion, {
                      propsProvinceCode: vue.unref(formData).hometown.provinceCode,
                      propsCityCode: vue.unref(formData).hometown.cityCode,
                      onChange: onChangeHome
                    }, null, 8, ["propsProvinceCode", "propsCityCode"])
                  ]),
                  _: 1
                }),
                vue.createVNode(_component_uni_forms_item, {
                  label: "\u5B66\u6821",
                  name: "schoolName"
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("view", { onClick: openSchool }, vue.toDisplayString(vue.unref(formData).schoolName ? vue.unref(formData).schoolName : "\u8BF7\u9009\u62E9\u5B66\u6821"), 1)
                  ]),
                  _: 1
                }),
                vue.createVNode(_component_uni_forms_item, {
                  label: "\u804C\u4E1A",
                  name: "job"
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("picker", {
                      range: vue.unref(professions),
                      value: vue.unref(activeProfessionIndex),
                      onChange: changeProfession
                    }, [
                      vue.createElementVNode("view", { class: "uni-input" }, vue.toDisplayString(vue.unref(formData).job ? vue.unref(formData).job : `\u8BF7\u9009\u62E9\u804C\u4E1A`), 1)
                    ], 40, ["range", "value"])
                  ]),
                  _: 1
                })
              ])
            ]),
            _: 1
          }, 8, ["modelValue", "rules"]),
          vue.createElementVNode("button", { onClick: submit }, "\u4FDD\u5B58"),
          vue.createCommentVNode(" end ")
        ]);
      };
    }
  };
  var PagesUserInfoEditor = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["__scopeId", "data-v-53251d4e"], ["__file", "C:/myself/social/social/src/pages/user/info/Editor.vue"]]);
  const isArray = Array.isArray;
  const isObject = (val) => val !== null && typeof val === "object";
  const defaultDelimiters = ["{", "}"];
  class BaseFormatter {
    constructor() {
      this._caches = /* @__PURE__ */ Object.create(null);
    }
    interpolate(message, values, delimiters = defaultDelimiters) {
      if (!values) {
        return [message];
      }
      let tokens2 = this._caches[message];
      if (!tokens2) {
        tokens2 = parse(message, delimiters);
        this._caches[message] = tokens2;
      }
      return compile(tokens2, values);
    }
  }
  const RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
  const RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;
  function parse(format2, [startDelimiter, endDelimiter]) {
    const tokens2 = [];
    let position = 0;
    let text = "";
    while (position < format2.length) {
      let char = format2[position++];
      if (char === startDelimiter) {
        if (text) {
          tokens2.push({ type: "text", value: text });
        }
        text = "";
        let sub = "";
        char = format2[position++];
        while (char !== void 0 && char !== endDelimiter) {
          sub += char;
          char = format2[position++];
        }
        const isClosed = char === endDelimiter;
        const type = RE_TOKEN_LIST_VALUE.test(sub) ? "list" : isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ? "named" : "unknown";
        tokens2.push({ value: sub, type });
      } else {
        text += char;
      }
    }
    text && tokens2.push({ type: "text", value: text });
    return tokens2;
  }
  function compile(tokens2, values) {
    const compiled = [];
    let index = 0;
    const mode = isArray(values) ? "list" : isObject(values) ? "named" : "unknown";
    if (mode === "unknown") {
      return compiled;
    }
    while (index < tokens2.length) {
      const token2 = tokens2[index];
      switch (token2.type) {
        case "text":
          compiled.push(token2.value);
          break;
        case "list":
          compiled.push(values[parseInt(token2.value, 10)]);
          break;
        case "named":
          if (mode === "named") {
            compiled.push(values[token2.value]);
          } else {
            {
              console.warn(`Type of token '${token2.type}' and format of value '${mode}' don't match!`);
            }
          }
          break;
        case "unknown":
          {
            console.warn(`Detect 'unknown' type of token!`);
          }
          break;
      }
      index++;
    }
    return compiled;
  }
  const LOCALE_ZH_HANS = "zh-Hans";
  const LOCALE_ZH_HANT = "zh-Hant";
  const LOCALE_EN = "en";
  const LOCALE_FR = "fr";
  const LOCALE_ES = "es";
  const hasOwnProperty = Object.prototype.hasOwnProperty;
  const hasOwn = (val, key) => hasOwnProperty.call(val, key);
  const defaultFormatter = new BaseFormatter();
  function include(str, parts) {
    return !!parts.find((part) => str.indexOf(part) !== -1);
  }
  function startsWith(str, parts) {
    return parts.find((part) => str.indexOf(part) === 0);
  }
  function normalizeLocale(locale2, messages2) {
    if (!locale2) {
      return;
    }
    locale2 = locale2.trim().replace(/_/g, "-");
    if (messages2 && messages2[locale2]) {
      return locale2;
    }
    locale2 = locale2.toLowerCase();
    if (locale2 === "chinese") {
      return LOCALE_ZH_HANS;
    }
    if (locale2.indexOf("zh") === 0) {
      if (locale2.indexOf("-hans") > -1) {
        return LOCALE_ZH_HANS;
      }
      if (locale2.indexOf("-hant") > -1) {
        return LOCALE_ZH_HANT;
      }
      if (include(locale2, ["-tw", "-hk", "-mo", "-cht"])) {
        return LOCALE_ZH_HANT;
      }
      return LOCALE_ZH_HANS;
    }
    const lang2 = startsWith(locale2, [LOCALE_EN, LOCALE_FR, LOCALE_ES]);
    if (lang2) {
      return lang2;
    }
  }
  class I18n {
    constructor({ locale: locale2, fallbackLocale, messages: messages2, watcher, formater }) {
      this.locale = LOCALE_EN;
      this.fallbackLocale = LOCALE_EN;
      this.message = {};
      this.messages = {};
      this.watchers = [];
      if (fallbackLocale) {
        this.fallbackLocale = fallbackLocale;
      }
      this.formater = formater || defaultFormatter;
      this.messages = messages2 || {};
      this.setLocale(locale2 || LOCALE_EN);
      if (watcher) {
        this.watchLocale(watcher);
      }
    }
    setLocale(locale2) {
      const oldLocale = this.locale;
      this.locale = normalizeLocale(locale2, this.messages) || this.fallbackLocale;
      if (!this.messages[this.locale]) {
        this.messages[this.locale] = {};
      }
      this.message = this.messages[this.locale];
      if (oldLocale !== this.locale) {
        this.watchers.forEach((watcher) => {
          watcher(this.locale, oldLocale);
        });
      }
    }
    getLocale() {
      return this.locale;
    }
    watchLocale(fn) {
      const index = this.watchers.push(fn) - 1;
      return () => {
        this.watchers.splice(index, 1);
      };
    }
    add(locale2, message, override = true) {
      const curMessages = this.messages[locale2];
      if (curMessages) {
        if (override) {
          Object.assign(curMessages, message);
        } else {
          Object.keys(message).forEach((key) => {
            if (!hasOwn(curMessages, key)) {
              curMessages[key] = message[key];
            }
          });
        }
      } else {
        this.messages[locale2] = message;
      }
    }
    f(message, values, delimiters) {
      return this.formater.interpolate(message, values, delimiters).join("");
    }
    t(key, locale2, values) {
      let message = this.message;
      if (typeof locale2 === "string") {
        locale2 = normalizeLocale(locale2, this.messages);
        locale2 && (message = this.messages[locale2]);
      } else {
        values = locale2;
      }
      if (!hasOwn(message, key)) {
        console.warn(`Cannot translate the value of keypath ${key}. Use the value of keypath as default.`);
        return key;
      }
      return this.formater.interpolate(message[key], values).join("");
    }
  }
  function watchAppLocale(appVm, i18n) {
    if (appVm.$watchLocale) {
      appVm.$watchLocale((newLocale) => {
        i18n.setLocale(newLocale);
      });
    } else {
      appVm.$watch(() => appVm.$locale, (newLocale) => {
        i18n.setLocale(newLocale);
      });
    }
  }
  function getDefaultLocale() {
    if (typeof uni !== "undefined" && uni.getLocale) {
      return uni.getLocale();
    }
    if (typeof global !== "undefined" && global.getLocale) {
      return global.getLocale();
    }
    return LOCALE_EN;
  }
  function initVueI18n(locale2, messages2 = {}, fallbackLocale, watcher) {
    if (typeof locale2 !== "string") {
      [locale2, messages2] = [
        messages2,
        locale2
      ];
    }
    if (typeof locale2 !== "string") {
      locale2 = getDefaultLocale();
    }
    if (typeof fallbackLocale !== "string") {
      fallbackLocale = typeof __uniConfig !== "undefined" && __uniConfig.fallbackLocale || LOCALE_EN;
    }
    const i18n = new I18n({
      locale: locale2,
      fallbackLocale,
      messages: messages2,
      watcher
    });
    let t2 = (key, values) => {
      if (typeof getApp !== "function") {
        t2 = function(key2, values2) {
          return i18n.t(key2, values2);
        };
      } else {
        let isWatchedAppLocale = false;
        t2 = function(key2, values2) {
          const appVm = getApp().$vm;
          if (appVm) {
            appVm.$locale;
            if (!isWatchedAppLocale) {
              isWatchedAppLocale = true;
              watchAppLocale(appVm, i18n);
            }
          }
          return i18n.t(key2, values2);
        };
      }
      return t2(key, values);
    };
    return {
      i18n,
      f(message, values, delimiters) {
        return i18n.f(message, values, delimiters);
      },
      t(key, values) {
        return t2(key, values);
      },
      add(locale3, message, override = true) {
        return i18n.add(locale3, message, override);
      },
      watch(fn) {
        return i18n.watchLocale(fn);
      },
      getLocale() {
        return i18n.getLocale();
      },
      setLocale(newLocale) {
        return i18n.setLocale(newLocale);
      }
    };
  }
  var en = {
    "uni-search-bar.cancel": "cancel",
    "uni-search-bar.placeholder": "Search enter content"
  };
  var zhHans = {
    "uni-search-bar.cancel": "cancel",
    "uni-search-bar.placeholder": "\u8BF7\u8F93\u5165\u641C\u7D22\u5185\u5BB9"
  };
  var zhHant = {
    "uni-search-bar.cancel": "cancel",
    "uni-search-bar.placeholder": "\u8ACB\u8F38\u5165\u641C\u7D22\u5167\u5BB9"
  };
  var messages = {
    en,
    "zh-Hans": zhHans,
    "zh-Hant": zhHant
  };
  const { t } = initVueI18n(messages);
  const _sfc_main$5 = {
    name: "UniSearchBar",
    emits: ["input", "update:modelValue", "clear", "cancel", "confirm", "blur", "focus"],
    props: {
      placeholder: {
        type: String,
        default: ""
      },
      radius: {
        type: [Number, String],
        default: 5
      },
      clearButton: {
        type: String,
        default: "auto"
      },
      cancelButton: {
        type: String,
        default: "auto"
      },
      cancelText: {
        type: String,
        default: "\u53D6\u6D88"
      },
      bgColor: {
        type: String,
        default: "#F8F8F8"
      },
      maxlength: {
        type: [Number, String],
        default: 100
      },
      value: {
        type: [Number, String],
        default: ""
      },
      modelValue: {
        type: [Number, String],
        default: ""
      },
      focus: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        show: false,
        showSync: false,
        searchVal: ""
      };
    },
    computed: {
      cancelTextI18n() {
        return this.cancelText || t("uni-search-bar.cancel");
      },
      placeholderText() {
        return this.placeholder || t("uni-search-bar.placeholder");
      }
    },
    watch: {
      modelValue: {
        immediate: true,
        handler(newVal) {
          this.searchVal = newVal;
          if (newVal) {
            this.show = true;
          }
        }
      },
      focus: {
        immediate: true,
        handler(newVal) {
          if (newVal) {
            this.show = true;
            this.$nextTick(() => {
              this.showSync = true;
            });
          }
        }
      },
      searchVal(newVal, oldVal) {
        this.$emit("update:modelValue", newVal);
      }
    },
    methods: {
      searchClick() {
        if (this.show) {
          return;
        }
        this.show = true;
        this.$nextTick(() => {
          this.showSync = true;
        });
      },
      clear() {
        this.$emit("clear", {
          value: this.searchVal
        });
        this.searchVal = "";
      },
      cancel() {
        this.$emit("cancel", {
          value: this.searchVal
        });
        this.searchVal = "";
        this.show = false;
        this.showSync = false;
        plus.key.hideSoftKeybord();
      },
      confirm() {
        plus.key.hideSoftKeybord();
        this.$emit("confirm", {
          value: this.searchVal
        });
      },
      blur() {
        plus.key.hideSoftKeybord();
        this.$emit("blur", {
          value: this.searchVal
        });
      },
      emitFocus(e2) {
        this.$emit("focus", e2.detail);
      }
    }
  };
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$4);
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-searchbar" }, [
      vue.createElementVNode("view", {
        style: vue.normalizeStyle({ borderRadius: $props.radius + "px", backgroundColor: $props.bgColor }),
        class: "uni-searchbar__box",
        onClick: _cache[5] || (_cache[5] = (...args) => $options.searchClick && $options.searchClick(...args))
      }, [
        vue.createElementVNode("view", { class: "uni-searchbar__box-icon-search" }, [
          vue.renderSlot(_ctx.$slots, "searchIcon", {}, () => [
            vue.createVNode(_component_uni_icons, {
              color: "#c0c4cc",
              size: "18",
              type: "search"
            })
          ], true)
        ]),
        $data.show || $data.searchVal ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
          key: 0,
          focus: $data.showSync,
          placeholder: $options.placeholderText,
          maxlength: $props.maxlength,
          class: "uni-searchbar__box-search-input",
          "confirm-type": "search",
          type: "text",
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.searchVal = $event),
          onConfirm: _cache[1] || (_cache[1] = (...args) => $options.confirm && $options.confirm(...args)),
          onBlur: _cache[2] || (_cache[2] = (...args) => $options.blur && $options.blur(...args)),
          onFocus: _cache[3] || (_cache[3] = (...args) => $options.emitFocus && $options.emitFocus(...args))
        }, null, 40, ["focus", "placeholder", "maxlength"])), [
          [vue.vModelText, $data.searchVal]
        ]) : (vue.openBlock(), vue.createElementBlock("text", {
          key: 1,
          class: "uni-searchbar__text-placeholder"
        }, vue.toDisplayString($props.placeholder), 1)),
        $data.show && ($props.clearButton === "always" || $props.clearButton === "auto" && $data.searchVal !== "") ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "uni-searchbar__box-icon-clear",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.clear && $options.clear(...args))
        }, [
          vue.renderSlot(_ctx.$slots, "clearIcon", {}, () => [
            vue.createVNode(_component_uni_icons, {
              color: "#c0c4cc",
              size: "20",
              type: "clear"
            })
          ], true)
        ])) : vue.createCommentVNode("v-if", true)
      ], 4),
      $props.cancelButton === "always" || $data.show && $props.cancelButton === "auto" ? (vue.openBlock(), vue.createElementBlock("text", {
        key: 0,
        onClick: _cache[6] || (_cache[6] = (...args) => $options.cancel && $options.cancel(...args)),
        class: "uni-searchbar__cancel"
      }, vue.toDisplayString($options.cancelTextI18n), 1)) : vue.createCommentVNode("v-if", true)
    ]);
  }
  var __easycom_0 = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$3], ["__scopeId", "data-v-1c56904c"], ["__file", "C:/myself/social/social/src/uni_modules/uni-search-bar/components/uni-search-bar/uni-search-bar.vue"]]);
  const __default__ = {
    name: "school"
  };
  const _sfc_main$4 = /* @__PURE__ */ Object.assign(__default__, {
    setup(__props) {
      let schools = vue.ref([]);
      let pageNum = vue.ref(1);
      let queryString = vue.ref("");
      let schoolName = vue.ref("");
      let isShowMore = vue.ref(false);
      const searchSchool = (query, page) => {
        const params = {
          name: query,
          page: String(page)
        };
        getSchool(params).then((data) => {
          formatAppLog("log", "at pages/user/info/School.vue:54", "data===", data);
          schools.value = [...schools.value, ...data.data.data];
          formatAppLog("log", "at pages/user/info/School.vue:56", "schools.value=====", schools.value);
          isShowMore.value = true;
          if (data.data.data.length < 10) {
            isShowMore.value = false;
          }
          if (page === 1 && schools.value.length === 0) {
            schools.value = [{ name: "\u5176\u4ED6\u5B66\u6821" }];
          }
          formatAppLog("log", "at pages/user/info/School.vue:64", "schools=", schools);
        });
      };
      const search = (e2) => {
        formatAppLog("log", "at pages/user/info/School.vue:69", "e===", e2);
        const { value } = e2;
        queryString.value = value;
        schools.value = [];
        searchSchool(value, 1);
      };
      const onLoadMore = () => {
        pageNum.value++;
        formatAppLog("log", "at pages/user/info/School.vue:77", "pageNum.value===", pageNum.value);
        searchSchool(queryString.value, pageNum.value);
      };
      const onChecked = (item) => {
        schoolName.value = item.name;
        schools.value = [];
        uni.$emit("schoolUpdate", { schoolName: schoolName.value });
        uni.navigateBack();
      };
      return (_ctx, _cache) => {
        const _component_uni_search_bar = resolveEasycom(vue.resolveDynamicComponent("uni-search-bar"), __easycom_0);
        const _component_uni_list_item = resolveEasycom(vue.resolveDynamicComponent("uni-list-item"), __easycom_1$1);
        const _component_uni_list = resolveEasycom(vue.resolveDynamicComponent("uni-list"), __easycom_2);
        return vue.openBlock(), vue.createElementBlock("div", { class: "school" }, [
          vue.createVNode(_component_uni_search_bar, {
            placeholder: "\u8BF7\u8F93\u5165\u5B66\u6821\u540D\u79F0",
            onConfirm: search,
            modelValue: vue.unref(schoolName),
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => vue.isRef(schoolName) ? schoolName.value = $event : schoolName = $event)
          }, null, 8, ["modelValue"]),
          vue.unref(schools).length ? (vue.openBlock(), vue.createBlock(_component_uni_list, { key: 0 }, {
            default: vue.withCtx(() => [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(schools), (item) => {
                return vue.openBlock(), vue.createBlock(_component_uni_list_item, {
                  key: item.code,
                  title: item.name,
                  clickable: true,
                  onClick: ($event) => onChecked(item),
                  style: { "text-align": "center" }
                }, null, 8, ["title", "onClick"]);
              }), 128)),
              vue.unref(isShowMore) ? (vue.openBlock(), vue.createBlock(_component_uni_list_item, {
                key: 0,
                clickable: true,
                title: "\u52A0\u8F7D\u66F4\u591A...",
                style: { "text-align": "center" },
                onClick: onLoadMore
              })) : vue.createCommentVNode("v-if", true)
            ]),
            _: 1
          })) : vue.createCommentVNode("v-if", true)
        ]);
      };
    }
  });
  var PagesUserInfoSchool = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["__file", "C:/myself/social/social/src/pages/user/info/School.vue"]]);
  const _sfc_main$3 = {
    components: {
      Comment,
      VideoPlayer
    },
    onLoad: function(options) {
      formatAppLog("log", "at pages/user/info/PublicDetail.vue:73", "options===", options);
    },
    onReady: function() {
    },
    setup(props) {
      formatAppLog("log", "at pages/user/info/PublicDetail.vue:77", "props=", props);
      const store2 = useStore();
      const userInfo = vue.computed(() => store2.state.user.userInfo).value;
      const options = vue.reactive({
        poster: "",
        src: ""
      });
      let info = vue.ref([
        {
          content: "https://social-1308251497.cos.ap-guangzhou.myqcloud.com/images/4.jfif"
        }
      ]);
      vue.ref(0);
      vue.ref("default");
      let hobbyInfo = vue.ref({});
      const initGetHobbyDetail = (obj) => {
        const { id, hobby } = obj;
        const params = { id, hobby };
        getHobbyDetail(params).then((data) => {
          formatAppLog("log", "at pages/user/info/PublicDetail.vue:104", "data===", data);
          if (data.data.code === 200) {
            hobbyInfo.value = data.data.data;
            publishDate.value = formatDate(data.data.data.create_time);
            formatAppLog("log", "at pages/user/info/PublicDetail.vue:108", "hobbyInfo.value===", hobbyInfo.value);
            formatAppLog("log", "at pages/user/info/PublicDetail.vue:109", "data.data.data.url===", data.data.data.url);
            options.poster = data.data.data.url;
            options.src = data.data.data.video_url;
          }
        });
      };
      const goBack = () => {
        uni.switchTab({
          url: "/pages/user/index"
        });
      };
      let publishDate = vue.ref(null);
      let operations = vue.ref(["\u7F16\u8F91", "\u5220\u9664"]);
      let activeOperationIndex = vue.ref(0);
      const onUpdate = (info2) => {
        formatAppLog("log", "at pages/user/info/PublicDetail.vue:130", "info==", info2);
        uni.navigateTo({
          url: `/pages/user/info/EditDetail?id=${info2.id}&hobby=${info2.hobby}`
        });
      };
      const onDelete = (info2) => {
        formatAppLog("log", "at pages/user/info/PublicDetail.vue:136", "info==", info2);
        uni.showModal({
          title: "\u5220\u9664",
          content: "\u786E\u5B9A\u5220\u9664\uFF1F",
          success: function(res2) {
            if (res2.confirm) {
              const params = {
                hobby: props.hobby,
                id: props.id
              };
              deletePublish(params).then((data) => {
                if (data.data.code === 200) {
                  uni.showToast({
                    title: "\u5220\u9664\u6210\u529F",
                    duration: 2e3
                  });
                  uni.switchTab({
                    url: "/pages/user/index",
                    success() {
                      let page = getCurrentPages().pop();
                      formatAppLog("log", "at pages/user/info/PublicDetail.vue:156", "page==============", page);
                      if (!page)
                        return;
                      page.onLoad();
                    }
                  });
                }
              });
            } else if (res2.cancel)
              ;
          }
        });
      };
      const onEdit = (e2) => {
        uni.showActionSheet({
          itemList: operations,
          success: function(res2) {
            formatAppLog("log", "at pages/user/info/PublicDetail.vue:172", "\u9009\u4E2D\u4E86\u7B2C" + (res2.tapIndex + 1) + "\u4E2A\u6309\u94AE");
            activeOperationIndex.value = res2.tapIndex;
            if (activeOperationIndex.value === 1) {
              onDelete(props);
            } else {
              onUpdate(props);
            }
          },
          fail: function(res2) {
            formatAppLog("log", "at pages/user/info/PublicDetail.vue:181", res2.errMsg);
          }
        });
      };
      vue.onMounted(() => {
        formatAppLog("log", "at pages/user/info/PublicDetail.vue:194", "userInfo===", userInfo);
        initGetHobbyDetail({ id: props.id, hobby: props.hobby });
      });
      return {
        hobbyInfo,
        info,
        publishDate,
        options,
        goBack,
        onEdit,
        operations,
        activeOperationIndex
      };
    }
  };
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_VideoPlayer = vue.resolveComponent("VideoPlayer");
    const _component_Comment = vue.resolveComponent("Comment");
    return vue.openBlock(), vue.createElementBlock("div", { class: "hobby-detail" }, [
      vue.createElementVNode("view", { class: "author-wraper" }, [
        vue.createElementVNode("view", { class: "author" }, [
          vue.createElementVNode("view", {
            onClick: _cache[0] || (_cache[0] = (...args) => $setup.goBack && $setup.goBack(...args))
          }, "\u8FD4\u56DE"),
          vue.createElementVNode("view", { class: "author-info" }, [
            vue.createElementVNode("image", {
              class: "avatar",
              mode: "aspectFit",
              src: $setup.hobbyInfo.avatar || ""
            }, null, 8, ["src"]),
            vue.createElementVNode("text", null, vue.toDisplayString($setup.hobbyInfo.username || ""), 1)
          ]),
          vue.createElementVNode("view", {
            onClick: _cache[1] || (_cache[1] = (...args) => $setup.onEdit && $setup.onEdit(...args))
          }, [
            vue.createElementVNode("text", null, "...")
          ])
        ])
      ]),
      $setup.hobbyInfo.fileType === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "swiper-box"
      }, [
        vue.createElementVNode("swiper", {
          class: "swiper-box",
          "indicator-dots": $setup.hobbyInfo.photos.length > 1
        }, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($setup.hobbyInfo.photos, (item, index) => {
            return vue.openBlock(), vue.createElementBlock("swiper-item", { key: index }, [
              vue.createElementVNode("view", { class: "swiper-item" }, [
                vue.createElementVNode("image", {
                  src: item,
                  class: "image",
                  mode: "aspectFit"
                }, null, 8, ["src"])
              ])
            ]);
          }), 128))
        ], 8, ["indicator-dots"])
      ])) : vue.createCommentVNode("v-if", true),
      $setup.hobbyInfo.fileType === 1 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "swiper-box"
      }, [
        vue.createElementVNode("view", { class: "swiper-item" }, [
          (vue.openBlock(), vue.createBlock(_component_VideoPlayer, {
            options: { src: $setup.hobbyInfo.video_url, poster: $setup.hobbyInfo.url },
            key: $setup.hobbyInfo.id
          }, null, 8, ["options"]))
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode("view", { class: "content-wraper" }, [
        vue.createElementVNode("view", { class: "content" }, [
          vue.createElementVNode("view", { class: "title" }, vue.toDisplayString($setup.hobbyInfo.title), 1),
          vue.createElementVNode("view", { class: "main" }, vue.toDisplayString($setup.hobbyInfo.content), 1),
          vue.createElementVNode("view", { class: "publish-date" }, [
            vue.createElementVNode("text", null, "\u53D1\u5E03\u4E8E: "),
            vue.createElementVNode("text", null, vue.toDisplayString($setup.publishDate), 1)
          ])
        ])
      ]),
      vue.createElementVNode("view", { class: "comment-wraper" }, [
        $setup.hobbyInfo.id ? (vue.openBlock(), vue.createBlock(_component_Comment, {
          hobbyInfo: $setup.hobbyInfo,
          key: $setup.hobbyInfo.id
        }, null, 8, ["hobbyInfo"])) : vue.createCommentVNode("v-if", true)
      ])
    ]);
  }
  var PagesUserInfoPublicDetail = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$2], ["__scopeId", "data-v-cc42b28a"], ["__file", "C:/myself/social/social/src/pages/user/info/PublicDetail.vue"]]);
  const _sfc_main$2 = {
    components: {
      Comment,
      VideoPlayer
    },
    onLoad: function(options) {
      formatAppLog("log", "at pages/user/info/EditDetail.vue:109", "options===", options);
    },
    onReady: function() {
    },
    setup(props) {
      formatAppLog("log", "at pages/user/info/EditDetail.vue:113", "props=", props);
      const store2 = useStore();
      vue.computed(() => store2.state.user.userInfo).value;
      const options = vue.reactive({
        poster: "",
        src: ""
      });
      let info = vue.ref([
        {
          content: "https://social-1308251497.cos.ap-guangzhou.myqcloud.com/images/4.jfif"
        }
      ]);
      vue.ref(0);
      vue.ref("default");
      let hobbyInfo = vue.ref({});
      const initGetHobbyDetail = (obj) => {
        const { id, hobby } = obj;
        const params = { id, hobby };
        getHobbyDetail(params).then((data) => {
          if (data.data.code === 200) {
            hobbyInfo.value = data.data.data;
            publishDate.value = formatDate(data.data.data.create_time);
            if (!data.data.data.video_url) {
              photos.value = hobbyInfo.value.photos.map((element, index) => ({
                path: element
              }));
            }
            options.poster = data.data.data.url;
            options.src = data.data.data.video_url;
          }
        });
      };
      const goBack = () => {
        uni.switchTab({
          url: "/pages/user/index"
        });
      };
      let publishDate = vue.ref(null);
      let operations = vue.ref(["\u7F16\u8F91", "\u5220\u9664"]);
      let activeOperationIndex = vue.ref(0);
      const onUpdate = (index) => {
        uni.chooseImage({
          count: 1,
          sizeType: ["original", "compressed"],
          sourceType: ["album"],
          success: function(res2) {
            const { tempFiles } = res2;
            photos.value[index] = tempFiles[0];
          }
        });
      };
      const onDelete = (index) => {
        if (photos.value.length <= 1) {
          uni.showModal({
            content: "\u81F3\u5C11\u9700\u8981\u53D1\u5E03\u4E00\u5F20\u56FE\u7247",
            confirmText: "\u77E5\u9053\u4E86",
            showCancel: false,
            success: function(res2) {
              if (res2.confirm) {
                formatAppLog("log", "at pages/user/info/EditDetail.vue:187", "\u7528\u6237\u70B9\u51FB\u786E\u5B9A");
              } else if (res2.cancel) {
                formatAppLog("log", "at pages/user/info/EditDetail.vue:189", "\u7528\u6237\u70B9\u51FB\u53D6\u6D88");
              }
            }
          });
          return;
        }
        photos.value.splice(index, 1);
        formatAppLog("log", "at pages/user/info/EditDetail.vue:196", "photos.value===========", photos.value);
      };
      const onEdit = (item, index) => {
        formatAppLog("log", "at pages/user/info/EditDetail.vue:199", "item, index===", item, index);
        uni.showActionSheet({
          itemList: operations,
          success: function(res2) {
            formatAppLog("log", "at pages/user/info/EditDetail.vue:203", "\u9009\u4E2D\u4E86\u7B2C" + (res2.tapIndex + 1) + "\u4E2A\u6309\u94AE");
            activeOperationIndex.value = res2.tapIndex;
            if (activeOperationIndex.value === 1) {
              onDelete(index);
            } else {
              onUpdate(index);
            }
          },
          fail: function(res2) {
            formatAppLog("log", "at pages/user/info/EditDetail.vue:212", res2.errMsg);
          }
        });
      };
      const photos = vue.ref([]);
      const addImage = () => {
        uni.chooseImage({
          count: 6,
          sizeType: ["original", "compressed"],
          sourceType: ["album"],
          success: function(res2) {
            formatAppLog("log", "at pages/user/info/EditDetail.vue:233", "res===", res2);
            const { tempFiles } = res2;
            photos.value = photos.value.concat(tempFiles);
            formatAppLog("log", "at pages/user/info/EditDetail.vue:236", "photos.value====", photos.value);
          }
        });
      };
      const form = vue.ref(null);
      const changeTitle = (e2) => {
        const { detail: value } = e2;
        hobbyInfo.value.title.value = value;
      };
      const changeContent = (e2) => {
        const { detail: value } = e2;
        hobbyInfo.value.content.value = value;
      };
      const submit = () => {
        form.value.validate().then(async (res2) => {
          formatAppLog("log", "at pages/user/info/EditDetail.vue:264", "\u8868\u5355\u6570\u636E\u4FE1\u606F\uFF1A", res2);
          const { title, content } = res2;
          formatAppLog("log", "at pages/user/info/EditDetail.vue:266", "photos=====", photos.value);
          if (photos.value.length <= 0) {
            const params2 = {
              title,
              id: parseInt(props.id),
              hobby: parseInt(props.hobby),
              content
            };
            updateVideoPublish(params2).then((data) => {
              if (data.data.code === 200) {
                uni.showToast({
                  title: data.data.msg,
                  duration: 2e3
                });
                uni.switchTab({
                  url: "/pages/user/index",
                  success() {
                    let page = getCurrentPages().pop();
                    formatAppLog("log", "at pages/user/info/EditDetail.vue:284", "page==============", page);
                    if (!page)
                      return;
                    page.onLoad();
                  }
                });
              }
            });
            return;
          }
          const tempPhotos = photos.value.map((item, index) => ({
            key: item,
            index
          }));
          const remoteUrls = tempPhotos.filter((item) => item.key.path.includes("social-1308251497"));
          const blobUrls = tempPhotos.filter((item) => item.key.path.includes("blob:"));
          const fileAll = [];
          for (let item of blobUrls) {
            const chunk = await fileParse(item.key, "base64");
            fileAll.push({
              index: item.index,
              filename: item.key.name,
              chunk
            });
          }
          const urls = hobbyInfo.value.photos[0].match(/myqcloud.com\/(\S*)/)[1];
          const uploadHash = urls.match(/(\S*)\//)[1];
          const remotePhotos = remoteUrls.map((item) => ({ index: item.index, path: item.key.path }));
          const params = {
            uploadHash,
            uploadFiles: fileAll.length > 0 ? fileAll : [],
            remotePhotos: remotePhotos.length > 0 ? remotePhotos : [],
            title,
            id: parseInt(props.id),
            hobby: parseInt(props.hobby),
            content
          };
          updatePublish(lib.stringify(params)).then((data) => {
            if (data.data.code === 200) {
              uni.showToast({
                title: data.data.msg,
                duration: 2e3
              });
              uni.switchTab({
                url: "/pages/user/index",
                success() {
                  let page = getCurrentPages().pop();
                  formatAppLog("log", "at pages/user/info/EditDetail.vue:339", "page==============", page);
                  if (!page)
                    return;
                  page.onLoad();
                }
              });
            }
            formatAppLog("log", "at pages/user/info/EditDetail.vue:345", "data=", data);
          });
        }).catch((err) => {
          formatAppLog("log", "at pages/user/info/EditDetail.vue:349", "\u8868\u5355\u9519\u8BEF\u4FE1\u606F\uFF1A", err);
        });
      };
      vue.onMounted(() => {
        initGetHobbyDetail({ id: props.id, hobby: props.hobby });
      });
      return {
        hobbyInfo,
        photos,
        info,
        publishDate,
        options,
        goBack,
        onEdit,
        operations,
        activeOperationIndex,
        addImage,
        form,
        changeTitle,
        changeContent,
        submit
      };
    }
  };
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_VideoPlayer = vue.resolveComponent("VideoPlayer");
    const _component_uni_forms_item = resolveEasycom(vue.resolveDynamicComponent("uni-forms-item"), __easycom_0$2);
    const _component_Comment = vue.resolveComponent("Comment");
    const _component_uni_forms = resolveEasycom(vue.resolveDynamicComponent("uni-forms"), __easycom_1);
    return vue.openBlock(), vue.createElementBlock("div", { class: "hobby-detail" }, [
      vue.createVNode(_component_uni_forms, {
        ref: "form",
        modelValue: $setup.hobbyInfo
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", { class: "author-wraper" }, [
            vue.createElementVNode("view", { class: "author" }, [
              vue.createElementVNode("view", {
                onClick: _cache[0] || (_cache[0] = (...args) => $setup.goBack && $setup.goBack(...args))
              }, "\u8FD4\u56DE"),
              vue.createElementVNode("view", { class: "author-info" }, [
                vue.createElementVNode("image", {
                  class: "avatar",
                  mode: "aspectFit",
                  src: $setup.hobbyInfo.avatar || ""
                }, null, 8, ["src"]),
                vue.createElementVNode("text", null, vue.toDisplayString($setup.hobbyInfo.username || ""), 1)
              ])
            ])
          ]),
          $setup.hobbyInfo.fileType === 0 ? (vue.openBlock(), vue.createElementBlock("scroll-view", {
            key: 0,
            "scroll-x": "true",
            class: "photos"
          }, [
            vue.createElementVNode("view", { class: "photos" }, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($setup.photos, (item, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "photo-wraper",
                  key: index
                }, [
                  vue.createElementVNode("image", {
                    mode: "aspectFill",
                    src: item.path,
                    class: "photo",
                    onClick: ($event) => $setup.onEdit(item, index)
                  }, null, 8, ["src", "onClick"])
                ]);
              }), 128)),
              vue.createElementVNode("view", {
                class: "photo-add-wraper",
                onClick: _cache[1] || (_cache[1] = (...args) => $setup.addImage && $setup.addImage(...args))
              }, [
                vue.createElementVNode("text", { class: "photo-add" }, "+")
              ])
            ])
          ])) : vue.createCommentVNode("v-if", true),
          $setup.hobbyInfo.fileType === 1 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "swiper-box"
          }, [
            vue.createElementVNode("view", { class: "swiper-item" }, [
              (vue.openBlock(), vue.createBlock(_component_VideoPlayer, {
                options: { src: $setup.hobbyInfo.video_url, poster: $setup.hobbyInfo.url },
                key: $setup.hobbyInfo.id
              }, null, 8, ["options"]))
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "content-wraper" }, [
            vue.createElementVNode("view", { class: "content" }, [
              vue.createElementVNode("view", { class: "title" }, [
                vue.createVNode(_component_uni_forms_item, { name: "title" }, {
                  default: vue.withCtx(() => [
                    vue.withDirectives(vue.createElementVNode("input", {
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.hobbyInfo.title = $event),
                      type: "text",
                      placeholder: "\u8BF7\u8F93\u5165\u6587\u672C",
                      onConfirm: _cache[3] || (_cache[3] = (...args) => $setup.changeTitle && $setup.changeTitle(...args))
                    }, null, 544), [
                      [vue.vModelText, $setup.hobbyInfo.title]
                    ])
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("view", { class: "main" }, [
                vue.createVNode(_component_uni_forms_item, { name: "content" }, {
                  default: vue.withCtx(() => [
                    vue.withDirectives(vue.createElementVNode("input", {
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $setup.hobbyInfo.content = $event),
                      type: "text",
                      placeholder: "\u8BF7\u8F93\u5165\u6587\u672C",
                      onConfirm: _cache[5] || (_cache[5] = (...args) => $setup.changeContent && $setup.changeContent(...args))
                    }, null, 544), [
                      [vue.vModelText, $setup.hobbyInfo.content]
                    ])
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("view", { class: "publish-date" }, [
                vue.createElementVNode("text", null, "\u53D1\u5E03\u4E8E: "),
                vue.createElementVNode("text", null, vue.toDisplayString($setup.publishDate), 1)
              ])
            ])
          ]),
          vue.createElementVNode("view", { class: "comment-wraper" }, [
            $setup.hobbyInfo.id ? (vue.openBlock(), vue.createBlock(_component_Comment, {
              hobbyInfo: $setup.hobbyInfo,
              key: $setup.hobbyInfo.id
            }, null, 8, ["hobbyInfo"])) : vue.createCommentVNode("v-if", true)
          ])
        ]),
        _: 1
      }, 8, ["modelValue"]),
      vue.createElementVNode("view", { class: "submit-wraper" }, [
        vue.createElementVNode("button", {
          onClick: _cache[6] || (_cache[6] = (...args) => $setup.submit && $setup.submit(...args)),
          class: "submit"
        }, "\u53D1 \u5E03")
      ])
    ]);
  }
  var PagesUserInfoEditDetail = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$1], ["__scopeId", "data-v-4278bb5c"], ["__file", "C:/myself/social/social/src/pages/user/info/EditDetail.vue"]]);
  const _sfc_main$1 = {
    components: {
      Comment,
      VideoPlayer
    },
    onLoad: function(options) {
      formatAppLog("log", "at pages/user/info/LikeDetail.vue:64", "options===", options);
      this.propsOptions = options;
    },
    onReady: function() {
    },
    setup(props) {
      formatAppLog("log", "at pages/user/info/LikeDetail.vue:71", "props=", props);
      const store2 = useStore();
      const userInfo = vue.computed(() => store2.state.user.userInfo).value;
      const options = vue.reactive({
        poster: "",
        src: ""
      });
      let propsOptions = vue.ref(null);
      let info = vue.ref([
        {
          content: "https://social-1308251497.cos.ap-guangzhou.myqcloud.com/images/4.jfif"
        }
      ]);
      vue.ref(0);
      vue.ref("default");
      let hobbyInfo = vue.ref({});
      const initGetHobbyDetail = (obj) => {
        const { id, hobby } = obj;
        const params = { id, hobby };
        getHobbyDetail(params).then((data) => {
          formatAppLog("log", "at pages/user/info/LikeDetail.vue:100", "data===", data);
          if (data.data.code === 200) {
            hobbyInfo.value = data.data.data;
            publishDate.value = formatDate(data.data.data.create_time);
            formatAppLog("log", "at pages/user/info/LikeDetail.vue:104", "hobbyInfo.value===", hobbyInfo.value);
            formatAppLog("log", "at pages/user/info/LikeDetail.vue:105", "data.data.data.url===", data.data.data.url);
            options.poster = data.data.data.url;
            options.src = data.data.data.video_url;
            initFlow();
          }
        });
      };
      let isFlollow = vue.ref(false);
      let followText = vue.ref("\u5173\u6CE8");
      const following = () => {
        if (isFlollow.value) {
          uni.showModal({
            content: "\u786E\u8BA4\u4E0D\u518D\u5173\u6CE8\uFF1F",
            success: function(res2) {
              if (res2.confirm) {
                let params2 = { followId: hobbyInfo.value.user_id };
                deleteFollow(params2).then((data) => {
                  if (data.data.code === 200) {
                    followText.value = "\u5173\u6CE8";
                    isFlollow.value = false;
                  }
                });
              } else if (res2.cancel) {
                formatAppLog("log", "at pages/user/info/LikeDetail.vue:130", "\u7528\u6237\u70B9\u51FB\u53D6\u6D88");
              }
            }
          });
          return;
        }
        formatAppLog("log", "at pages/user/info/LikeDetail.vue:136", "userInfo===", userInfo);
        let params = { followId: hobbyInfo.value.user_id };
        setFollow(params).then((data) => {
          formatAppLog("log", "at pages/user/info/LikeDetail.vue:139", "data===", data);
          if (data.data.code === 200) {
            followText.value = "\u5DF2\u5173\u6CE8";
            isFlollow.value = true;
          } else if (data.data.code === 400) {
            uni.showToast({
              title: data.data.msg,
              icon: "none",
              duration: 2e3
            });
          }
        });
      };
      let publishDate = vue.ref(null);
      const initFlow = () => {
        let params = { followId: hobbyInfo.value.user_id };
        formatAppLog("log", "at pages/user/info/LikeDetail.vue:158", "params===", params);
        getFollow(params).then((data) => {
          formatAppLog("log", "at pages/user/info/LikeDetail.vue:160", "data1===", data);
          if (data.data.code === 200) {
            isFlollow.value = data.data.isFollow;
            data.data.isFollow ? followText.value = "\u5DF2\u5173\u6CE8" : followText.value = "\u5173\u6CE8";
          }
        });
      };
      vue.onMounted(() => {
        formatAppLog("log", "at pages/user/info/LikeDetail.vue:171", "userInfo===", userInfo);
        initGetHobbyDetail({ id: propsOptions.value.id, hobby: propsOptions.value.hobby });
      });
      return {
        followText,
        isFlollow,
        following,
        hobbyInfo,
        info,
        publishDate,
        options,
        propsOptions
      };
    }
  };
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_VideoPlayer = vue.resolveComponent("VideoPlayer");
    const _component_Comment = vue.resolveComponent("Comment");
    return vue.openBlock(), vue.createElementBlock("div", { class: "hobby-detail" }, [
      vue.createElementVNode("view", { class: "author-wraper" }, [
        vue.createElementVNode("view", { class: "author" }, [
          vue.createElementVNode("view", null, "\u8FD4\u56DE"),
          vue.createElementVNode("view", { class: "author-info" }, [
            vue.createElementVNode("image", {
              class: "avatar",
              mode: "aspectFit",
              src: $setup.hobbyInfo.avatar || ""
            }, null, 8, ["src"]),
            vue.createElementVNode("text", null, vue.toDisplayString($setup.hobbyInfo.username || ""), 1)
          ]),
          vue.createElementVNode("view", {
            class: vue.normalizeClass({ follow: !$setup.isFlollow, active: $setup.isFlollow }),
            onClick: _cache[0] || (_cache[0] = (...args) => $setup.following && $setup.following(...args))
          }, [
            vue.createElementVNode("text", null, vue.toDisplayString($setup.followText), 1)
          ], 2)
        ])
      ]),
      vue.createElementVNode("view", { class: "swiper-box" }, [
        vue.createElementVNode("view", { class: "swiper-item" }, [
          $setup.hobbyInfo.fileType === 0 ? (vue.openBlock(), vue.createElementBlock("image", {
            key: 0,
            src: $setup.hobbyInfo.url,
            class: "image"
          }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true),
          $setup.hobbyInfo.fileType === 1 ? (vue.openBlock(), vue.createBlock(_component_VideoPlayer, {
            options: { src: $setup.hobbyInfo.video_url, poster: $setup.hobbyInfo.url },
            key: $setup.hobbyInfo.id
          }, null, 8, ["options"])) : vue.createCommentVNode("v-if", true)
        ])
      ]),
      vue.createElementVNode("view", { class: "content-wraper" }, [
        vue.createElementVNode("view", { class: "content" }, [
          vue.createElementVNode("view", { class: "title" }, vue.toDisplayString($setup.hobbyInfo.title), 1),
          vue.createElementVNode("view", { class: "main" }, vue.toDisplayString($setup.hobbyInfo.content), 1),
          vue.createElementVNode("view", { class: "publish-date" }, [
            vue.createElementVNode("text", null, "\u53D1\u5E03\u4E8E: "),
            vue.createElementVNode("text", null, vue.toDisplayString($setup.publishDate), 1)
          ])
        ])
      ]),
      vue.createElementVNode("view", { class: "comment-wraper" }, [
        $setup.hobbyInfo.id ? (vue.openBlock(), vue.createBlock(_component_Comment, {
          hobbyInfo: $setup.hobbyInfo,
          key: $setup.hobbyInfo.id
        }, null, 8, ["hobbyInfo"])) : vue.createCommentVNode("v-if", true)
      ])
    ]);
  }
  var PagesUserInfoLikeDetail = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__scopeId", "data-v-6e1530a9"], ["__file", "C:/myself/social/social/src/pages/user/info/LikeDetail.vue"]]);
  __definePage("pages/index/index", PagesIndexIndex);
  __definePage("pages/user/index", PagesUserIndex);
  __definePage("pages/find/index", PagesFindIndex);
  __definePage("pages/message/index", PagesMessageIndex);
  __definePage("pages/login/index", PagesLoginIndex);
  __definePage("pages/index/HobbyDetailMountain", PagesIndexHobbyDetailMountain);
  __definePage("pages/message/Chat", PagesMessageChat);
  __definePage("pages/user/info/Follow", PagesUserInfoFollow);
  __definePage("pages/user/gender/index", PagesUserGenderIndex);
  __definePage("pages/index/VideoDetail", PagesIndexVideoDetail);
  __definePage("pages/user/info/index", PagesUserInfoIndex);
  __definePage("pages/user/info/User", PagesUserInfoUser);
  __definePage("pages/user/info/Editor", PagesUserInfoEditor);
  __definePage("pages/user/info/School", PagesUserInfoSchool);
  __definePage("pages/user/info/PublicDetail", PagesUserInfoPublicDetail);
  __definePage("pages/user/info/EditDetail", PagesUserInfoEditDetail);
  __definePage("pages/user/info/LikeDetail", PagesUserInfoLikeDetail);
  const validateObjAttr = (obj) => {
    formatAppLog("log", "at utils/validate.js:10", "obj=====", obj);
    const arr = Object.keys(obj).map((key) => obj[key]);
    formatAppLog("log", "at utils/validate.js:12", "arr===", arr);
    return arr.every((element) => element || element === 0);
  };
  const validataGender = (obj) => {
    formatAppLog("log", "at utils/validate.js:17", "obj===", obj);
    formatAppLog("log", "at utils/validate.js:18", "obj['gender']=", obj["gender"]);
    if (obj["gender"]) {
      formatAppLog("log", "at utils/validate.js:20", "true");
      return true;
    } else {
      formatAppLog("log", "at utils/validate.js:23", "false");
      return false;
    }
  };
  const user = {
    namespaced: true,
    state: {
      userInfo: getStoreUserInfo()
    },
    getters: {
      getUserInfo: (state) => {
        return state.userInfo || getStoreUserInfo();
      }
    },
    mutations: {
      setUserInfo(state, userInfo) {
        if (!validataGender(userInfo)) {
          formatAppLog("log", "at store/module/user.js:30", "\u4E0D\u5E94\u8BE5=", userInfo);
          uni.redirectTo({
            url: "/pages/user/gender/index"
          });
        } else if (!validateObjAttr(userInfo)) {
          uni.showModal({
            title: "\u63D0\u793A",
            content: "\u8BF7\u5B8C\u5584\u5934\u50CF\u3001\u6635\u79F0\u7B49\u4E2A\u4EBA\u4FE1\u606F\u8D44\u6599",
            success: function(res2) {
              if (res2.confirm) {
                uni.reLaunch({
                  url: "/pages/user/index"
                });
              }
            }
          });
        }
        state.userInfo = userInfo;
        setStoreUserInfo(userInfo);
      }
    },
    actions: {
      async GetUserInfo({ commit }) {
        const { data: {
          code,
          data
        } } = await getUserInfo();
        formatAppLog("log", "at store/module/user.js:87", "data=", data);
        if (code === 200) {
          login();
          commit("setUserInfo", data);
        }
      },
      async IMLogin({ commit }) {
        login();
      }
    }
  };
  const modal = {
    namespaced: true,
    state: {
      show: false,
      title: "\u6807\u9898",
      content: "\u5185\u5BB9",
      showCancel: true,
      cancelText: "\u53D6\u6D88",
      cancelColor: "#000000",
      confirmText: "\u786E\u5B9A",
      confirmColor: "#576b95",
      success: null
    },
    mutations: {
      hideModal(state) {
        if (state.hideTabBar) {
          wx.showTabBar();
        }
        state.show = false;
      },
      showModal(state, data) {
        state = Object.assign(state, data);
        formatAppLog("log", "at store/module/modal.js:34", "modal state=", state);
        state.show = true;
      },
      success(state, res2) {
        let cb = state.success;
        let resObj = {
          cancel: false,
          confirm: false
        };
        res2 == "confirm" ? resObj.confirm = true : resObj.cancel = true;
        cb && cb(resObj);
      }
    },
    actions: {}
  };
  const store = createStore({
    modules: {
      user,
      modal
    }
  });
  const _sfc_main = {
    onLaunch: function() {
      formatAppLog("log", "at App.vue:13", "App Launch");
      if (!getToken()) {
        uni.reLaunch({
          url: "pages/login/index"
        });
      } else {
        this.$store.dispatch("user/IMLogin");
      }
    },
    onShow: function() {
      formatAppLog("log", "at App.vue:26", "App Show");
    },
    onHide: function() {
      formatAppLog("log", "at App.vue:29", "App Hide");
    }
  };
  var App = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "C:/myself/social/social/src/App.vue"]]);
  function createApp() {
    const app = vue.createVueApp(App);
    app.use(store);
    app.config.globalProperties.$filters = {
      filterRegion(value, array) {
        const proviceObj = array.find((element) => element.code === value);
        if (!proviceObj) {
          return "\u5E02\u8F96\u533A";
        }
        if (!proviceObj.name) {
          return proviceObj;
        }
        return proviceObj.name;
      },
      filterGender(value) {
        const genderStatusMap = {
          "1": "\u7537",
          "2": "\u5973"
        };
        return genderStatusMap[value] || "";
      },
      commentTime(value) {
        return formatDate(value || "");
      },
      formatMsgDate(value) {
        return formatMsgDate(value || "");
      }
    };
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(uni.VueShared, Vue);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
