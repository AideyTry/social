{"version":3,"file":"uni-forms.js","sources":["../../../../../../../src/uni_modules/uni-forms/components/uni-forms/uni-forms.vue","../../../../../../../uniComponent:/QzovbXlzZWxmL3NvY2lhbC9zb2NpYWwvc3JjL3VuaV9tb2R1bGVzL3VuaS1mb3Jtcy9jb21wb25lbnRzL3VuaS1mb3Jtcy91bmktZm9ybXMudnVl"],"sourcesContent":["<template>\r\n\t<view class=\"uni-forms\" :class=\"{ 'uni-forms--top': !border }\">\r\n\t\t<form @submit.stop=\"submitForm\" @reset=\"resetForm\">\r\n\t\t\t<slot></slot>\r\n\t\t</form>\r\n\t</view>\r\n</template>\r\n\r\n<script>\r\n\t// #ifndef VUE3\r\n\timport Vue from 'vue';\r\n\tVue.prototype.binddata = function(name, value, formName) {\r\n\t\tif (formName) {\r\n\t\t\tthis.$refs[formName].setValue(name, value);\r\n\t\t} else {\r\n\t\t\tlet formVm;\r\n\t\t\tfor (let i in this.$refs) {\r\n\t\t\t\tconst vm = this.$refs[i];\r\n\t\t\t\tif (vm && vm.$options && vm.$options.name === 'uniForms') {\r\n\t\t\t\t\tformVm = vm;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!formVm) return console.error('当前 uni-froms 组件缺少 ref 属性');\r\n\t\t\tformVm.setValue(name, value);\r\n\t\t}\r\n\t};\r\n\t// #endif\r\n\r\n\r\n\r\n\timport Validator from './validate.js';\r\n\t/**\r\n\t * Forms 表单\r\n\t * @description 由输入框、选择器、单选框、多选框等控件组成，用以收集、校验、提交数据\r\n\t * @tutorial https://ext.dcloud.net.cn/plugin?id=2773\r\n\t * @property {Object} rules\t表单校验规则\r\n\t * @property {String} validateTrigger = [bind|submit]\t校验触发器方式 默认 submit\r\n\t * @value bind\t\t发生变化时触发\r\n\t * @value submit\t提交时触发\r\n\t * @property {String} labelPosition = [top|left]\tlabel 位置 默认 left\r\n\t * @value top\t\t顶部显示 label\r\n\t * @value left\t左侧显示 label\r\n\t * @property {String} labelWidth\tlabel 宽度，默认 65px\r\n\t * @property {String} labelAlign = [left|center|right]\tlabel 居中方式  默认 left\r\n\t * @value left\t\tlabel 左侧显示\r\n\t * @value center\tlabel 居中\r\n\t * @value right\t\tlabel 右侧对齐\r\n\t * @property {String} errShowType = [undertext|toast|modal]\t校验错误信息提示方式\r\n\t * @value undertext\t错误信息在底部显示\r\n\t * @value toast\t\t\t错误信息toast显示\r\n\t * @value modal\t\t\t错误信息modal显示\r\n\t * @event {Function} submit\t提交时触发\r\n\t */\r\n\r\n\texport default {\r\n\t\tname: 'uniForms',\r\n\t\tcomponents: {},\r\n\t\temits:['input','reset','validate','submit'],\r\n\t\tprops: {\r\n\t\t\t// 即将弃用\r\n\t\t\tvalue: {\r\n\t\t\t\ttype: Object,\r\n\t\t\t\tdefault () {\r\n\t\t\t\t\treturn {};\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 替换 value 属性\r\n\t\t\tmodelValue: {\r\n\t\t\t\ttype: Object,\r\n\t\t\t\tdefault () {\r\n\t\t\t\t\treturn {};\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 表单校验规则\r\n\t\t\trules: {\r\n\t\t\t\ttype: Object,\r\n\t\t\t\tdefault () {\r\n\t\t\t\t\treturn {};\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 校验触发器方式，默认 关闭\r\n\t\t\tvalidateTrigger: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: ''\r\n\t\t\t},\r\n\t\t\t// label 位置，可选值 top/left\r\n\t\t\tlabelPosition: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: 'left'\r\n\t\t\t},\r\n\t\t\t// label 宽度，单位 px\r\n\t\t\tlabelWidth: {\r\n\t\t\t\ttype: [String, Number],\r\n\t\t\t\tdefault: ''\r\n\t\t\t},\r\n\t\t\t// label 居中方式，可选值 left/center/right\r\n\t\t\tlabelAlign: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: 'left'\r\n\t\t\t},\r\n\t\t\terrShowType: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: 'undertext'\r\n\t\t\t},\r\n\t\t\tborder: {\r\n\t\t\t\ttype: Boolean,\r\n\t\t\t\tdefault: false\r\n\t\t\t}\r\n\t\t},\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tformData: {}\r\n\t\t\t};\r\n\t\t},\r\n\t\tcomputed: {\r\n\t\t\tdataValue() {\r\n\t\t\t\tif (JSON.stringify(this.modelValue) === '{}') {\r\n\t\t\t\t\treturn this.value\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.modelValue\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\twatch: {\r\n\t\t\trules(newVal) {\r\n\t\t\t\t// 如果规则发生变化，要初始化组件\r\n\t\t\t\tthis.init(newVal);\r\n\t\t\t},\r\n\t\t\tlabelPosition() {\r\n\t\t\t\tthis.childrens.forEach(vm => {\r\n\t\t\t\t\tvm.init()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t},\r\n\t\tcreated() {\r\n\t\t\t// #ifdef VUE3\r\n\t\t\tlet getbinddata = getApp().$vm.$.appContext.config.globalProperties.binddata\r\n\t\t\tif (!getbinddata) {\r\n\t\t\t\tgetApp().$vm.$.appContext.config.globalProperties.binddata = function(name, value, formName) {\r\n\t\t\t\t\tif (formName) {\r\n\t\t\t\t\t\tthis.$refs[formName].setValue(name, value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet formVm;\r\n\t\t\t\t\t\tfor (let i in this.$refs) {\r\n\t\t\t\t\t\t\tconst vm = this.$refs[i];\r\n\t\t\t\t\t\t\tif (vm && vm.$options && vm.$options.name === 'uniForms') {\r\n\t\t\t\t\t\t\t\tformVm = vm;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!formVm) return console.error('当前 uni-froms 组件缺少 ref 属性');\r\n\t\t\t\t\t\tformVm.setValue(name, value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// #endif\r\n\r\n\t\t\t// 存放watch 监听数组\r\n\t\t\tthis.unwatchs = [];\r\n\t\t\t// 存放子组件数组\r\n\t\t\tthis.childrens = [];\r\n\t\t\t// 存放 easyInput 组件\r\n\t\t\tthis.inputChildrens = [];\r\n\t\t\t// 存放 dataCheckbox 组件\r\n\t\t\tthis.checkboxChildrens = [];\r\n\t\t\t// 存放规则\r\n\t\t\tthis.formRules = [];\r\n\t\t\tthis.init(this.rules);\r\n\t\t},\r\n\t\t// mounted() {\r\n\t\t// \tthis.init(this.rules)\r\n\t\t// },\r\n\t\tmethods: {\r\n\t\t\tinit(formRules) {\r\n\t\t\t\t// 判断是否有规则\r\n\t\t\t\tif (Object.keys(formRules).length === 0) {\r\n\t\t\t\t\tthis.formData = this.dataValue\r\n\t\t\t\t\treturn\r\n\t\t\t\t};\r\n\t\t\t\tthis.formRules = formRules;\r\n\t\t\t\tthis.validator = new Validator(formRules);\r\n\t\t\t\tthis.registerWatch();\r\n\t\t\t},\r\n\t\t\t// 监听 watch\r\n\t\t\tregisterWatch() {\r\n\t\t\t\t// 取消监听,避免多次调用 init 重复执行 $watch\r\n\t\t\t\tthis.unwatchs.forEach(v => v());\r\n\t\t\t\tthis.childrens.forEach((v) => {\r\n\t\t\t\t\tv.init()\r\n\t\t\t\t})\r\n\t\t\t\t// watch 每个属性 ，需要知道具体那个属性发变化\r\n\t\t\t\tObject.keys(this.dataValue).forEach(key => {\r\n\t\t\t\t\tlet watch = this.$watch(\r\n\t\t\t\t\t\t'dataValue.' + key,\r\n\t\t\t\t\t\tvalue => {\r\n\t\t\t\t\t\t\tif (!value) return\r\n\t\t\t\t\t\t\t// 如果是对象 ，则平铺内容\r\n\t\t\t\t\t\t\tif (value.toString() === '[object Object]') {\r\n\t\t\t\t\t\t\t\tfor (let i in value) {\r\n\t\t\t\t\t\t\t\t\tlet name = `${key}[${i}]`;\r\n\t\t\t\t\t\t\t\t\tthis.formData[name] = this._getValue(name, value[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.formData[key] = this._getValue(key, value);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdeep: true,\r\n\t\t\t\t\t\t\timmediate: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t\tthis.unwatchs.push(watch);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * 公开给用户使用\r\n\t\t\t * 设置校验规则\r\n\t\t\t * @param {Object} formRules\r\n\t\t\t */\r\n\t\t\tsetRules(formRules) {\r\n\t\t\t\tthis.init(formRules);\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * 公开给用户使用\r\n\t\t\t * 设置自定义表单组件 value 值\r\n\t\t\t *  @param {String} name 字段名称\r\n\t\t\t *  @param {String} value 字段值\r\n\t\t\t */\r\n\t\t\tsetValue(name, value, callback) {\r\n\t\t\t\tlet example = this.childrens.find(child => child.name === name);\r\n\t\t\t\tif (!example) return null;\r\n\t\t\t\tvalue = this._getValue(example.name, value);\r\n\t\t\t\tthis.formData[name] = value;\r\n\t\t\t\texample.val = value;\r\n\t\t\t\treturn example.triggerCheck(value, callback);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 表单重置\r\n\t\t\t * @param {Object} event\r\n\t\t\t */\r\n\t\t\tresetForm(event) {\r\n\t\t\t\tthis.childrens.forEach(item => {\r\n\t\t\t\t\titem.errMsg = '';\r\n\t\t\t\t\tconst inputComp = this.inputChildrens.find(child => child.rename === item.name);\r\n\t\t\t\t\tif (inputComp) {\r\n\t\t\t\t\t\tinputComp.errMsg = '';\r\n\t\t\t\t\t\t// fix by mehaotian 不触发其他组件的 setValue\r\n\t\t\t\t\t\tinputComp.is_reset = true\r\n\t\t\t\t\t\tinputComp.$emit('input', inputComp.multiple ? [] : '');\r\n\t\t\t\t\t\tinputComp.$emit('update:modelValue', inputComp.multiple ? [] : '');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.childrens.forEach(item => {\r\n\t\t\t\t\tif (item.name) {\r\n\t\t\t\t\t\tthis.formData[item.name] = this._getValue(item.name, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.$emit('reset', event);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 触发表单校验，通过 @validate 获取\r\n\t\t\t * @param {Object} validate\r\n\t\t\t */\r\n\t\t\tvalidateCheck(validate) {\r\n\t\t\t\tif (validate === null) validate = null;\r\n\t\t\t\tthis.$emit('validate', validate);\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * 校验所有或者部分表单\r\n\t\t\t */\r\n\t\t\tasync validateAll(invalidFields, type, keepitem, callback) {\r\n\t\t\t\tlet childrens = []\r\n\t\t\t\tfor (let i in invalidFields) {\r\n\t\t\t\t\tconst item = this.childrens.find(v => v.name === i)\r\n\t\t\t\t\tif (item) {\r\n\t\t\t\t\t\tchildrens.push(item)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!callback && typeof keepitem === 'function') {\r\n\t\t\t\t\tcallback = keepitem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet promise;\r\n\t\t\t\tif (!callback && typeof callback !== 'function' && Promise) {\r\n\t\t\t\t\tpromise = new Promise((resolve, reject) => {\r\n\t\t\t\t\t\tcallback = function(valid, invalidFields) {\r\n\t\t\t\t\t\t\t!valid ? resolve(invalidFields) : reject(valid);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet results = [];\r\n\t\t\t\tlet newFormData = {};\r\n\t\t\t\tif (this.validator) {\r\n\t\t\t\t\tfor (let key in childrens) {\r\n\t\t\t\t\t\tconst child = childrens[key];\r\n\t\t\t\t\t\tlet name = child.isArray ? child.arrayField : child.name;\r\n\t\t\t\t\t\tif (child.isArray) {\r\n\t\t\t\t\t\t\tif (child.name.indexOf('[') !== -1 && child.name.indexOf(']') !== -1) {\r\n\t\t\t\t\t\t\t\tconst fieldData = child.name.split('[');\r\n\t\t\t\t\t\t\t\tconst fieldName = fieldData[0];\r\n\t\t\t\t\t\t\t\tconst fieldValue = fieldData[1].replace(']', '');\r\n\t\t\t\t\t\t\t\tif (!newFormData[fieldName]) {\r\n\t\t\t\t\t\t\t\t\tnewFormData[fieldName] = {};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tnewFormData[fieldName][fieldValue] = this._getValue(name, invalidFields[name]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnewFormData[name] = this._getValue(name, invalidFields[name]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst result = await child.triggerCheck(invalidFields[name], true);\r\n\t\t\t\t\t\tif (result) {\r\n\t\t\t\t\t\t\tresults.push(result);\r\n\t\t\t\t\t\t\tif (this.errShowType === 'toast' || this.errShowType === 'modal') break;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnewFormData = invalidFields\r\n\t\t\t\t}\r\n\t\t\t\tif (Array.isArray(results)) {\r\n\t\t\t\t\tif (results.length === 0) results = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (Array.isArray(keepitem)) {\r\n\t\t\t\t\tkeepitem.forEach(v => {\r\n\t\t\t\t\t\tnewFormData[v] = this.dataValue[v];\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (type === 'submit') {\r\n\t\t\t\t\tthis.$emit('submit', {\r\n\t\t\t\t\t\tdetail: {\r\n\t\t\t\t\t\t\tvalue: newFormData,\r\n\t\t\t\t\t\t\terrors: results\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.$emit('validate', results);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback && typeof callback === 'function' && callback(results, newFormData);\r\n\r\n\t\t\t\tif (promise && callback) {\r\n\t\t\t\t\treturn promise;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tsubmitForm() {},\r\n\t\t\t/**\r\n\t\t\t * 外部调用方法\r\n\t\t\t * 手动提交校验表单\r\n\t\t\t * 对整个表单进行校验的方法，参数为一个回调函数。\r\n\t\t\t */\r\n\t\t\tsubmit(keepitem, callback, type) {\r\n\t\t\t\tfor (let i in this.dataValue) {\r\n\t\t\t\t\tconst itemData = this.childrens.find(v => v.name === i);\r\n\t\t\t\t\tif (itemData) {\r\n\t\t\t\t\t\tif (this.formData[i] === undefined) {\r\n\t\t\t\t\t\t\tthis.formData[i] = this._getValue(i, this.dataValue[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!type) {\r\n\t\t\t\t\tconsole.warn('submit 方法即将废弃，请使用validate方法代替！');\r\n\t\t\t\t}\r\n\t\t\t\treturn this.validateAll(this.formData, 'submit', keepitem, callback);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 外部调用方法\r\n\t\t\t * 校验表单\r\n\t\t\t * 对整个表单进行校验的方法，参数为一个回调函数。\r\n\t\t\t */\r\n\t\t\tvalidate(keepitem, callback) {\r\n\t\t\t\treturn this.submit(keepitem, callback, true);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 部分表单校验\r\n\t\t\t * @param {Object} props\r\n\t\t\t * @param {Object} cb\r\n\t\t\t */\r\n\t\t\tvalidateField(props, callback) {\r\n\t\t\t\tprops = [].concat(props);\r\n\t\t\t\tlet invalidFields = {};\r\n\t\t\t\tthis.childrens.forEach(item => {\r\n\t\t\t\t\tif (props.indexOf(item.name) !== -1) {\r\n\t\t\t\t\t\tinvalidFields = Object.assign({}, invalidFields, {\r\n\t\t\t\t\t\t\t[item.name]: this.formData[item.name]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn this.validateAll(invalidFields, 'submit', [], callback);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 对整个表单进行重置，将所有字段值重置为初始值并移除校验结果\r\n\t\t\t */\r\n\t\t\tresetFields() {\r\n\t\t\t\tthis.resetForm();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 移除表单项的校验结果。传入待移除的表单项的 prop 属性或者 prop 组成的数组，如不传则移除整个表单的校验结果\r\n\t\t\t */\r\n\t\t\tclearValidate(props) {\r\n\t\t\t\tprops = [].concat(props);\r\n\t\t\t\tthis.childrens.forEach(item => {\r\n\t\t\t\t\tconst inputComp = this.inputChildrens.find(child => child.rename === item.name);\r\n\t\t\t\t\tif (props.length === 0) {\r\n\t\t\t\t\t\titem.errMsg = '';\r\n\t\t\t\t\t\tif (inputComp) {\r\n\t\t\t\t\t\t\tinputComp.errMsg = '';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (props.indexOf(item.name) !== -1) {\r\n\t\t\t\t\t\t\titem.errMsg = '';\r\n\t\t\t\t\t\t\tif (inputComp) {\r\n\t\t\t\t\t\t\t\tinputComp.errMsg = '';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * 把 value 转换成指定的类型\r\n\t\t\t * @param {Object} key\r\n\t\t\t * @param {Object} value\r\n\t\t\t */\r\n\t\t\t_getValue(key, value) {\r\n\t\t\t\tconst rules = (this.formRules[key] && this.formRules[key].rules) || [];\r\n\t\t\t\tconst isRuleNum = rules.find(val => val.format && this.type_filter(val.format));\r\n\t\t\t\tconst isRuleBool = rules.find(val => (val.format && val.format === 'boolean') || val.format === 'bool');\r\n\t\t\t\t// 输入值为 number\r\n\t\t\t\tif (isRuleNum) {\r\n\t\t\t\t\tvalue = isNaN(value) ? value : value === '' || value === null ? null : Number(value);\r\n\t\t\t\t}\r\n\t\t\t\t// 简单判断真假值\r\n\t\t\t\tif (isRuleBool) {\r\n\t\t\t\t\tvalue = !value ? false : true;\r\n\t\t\t\t}\r\n\t\t\t\treturn value;\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * 过滤数字类型\r\n\t\t\t * @param {Object} format\r\n\t\t\t */\r\n\t\t\ttype_filter(format) {\r\n\t\t\t\treturn format === 'int' || format === 'double' || format === 'number' || format === 'timestamp';\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style lang=\"scss\" >\r\n\t.uni-forms {\r\n\t\t// overflow: hidden;\r\n\t\t// padding: 10px 15px;\r\n\t}\r\n\r\n\t.uni-forms--top {\r\n\t\t// padding: 10px 15px;\r\n\t\t// padding-top: 22px;\r\n\t}\r\n</style>\r\n","import Component from 'C:/myself/social/social/src/uni_modules/uni-forms/components/uni-forms/uni-forms.vue'\nwx.createComponent(Component)"],"names":["Validator"],"mappings":";;;AAuDC;EACC,MAAM;AAAA,EACN,YAAY;EACZ,OAAM,CAAC,SAAQ,SAAQ,YAAW,QAAQ;AAAA,EAC1C,OAAO;AAAA,IAEN,OAAO;AAAA,MACN,MAAM;AAAA,MACN,UAAW;AACV,eAAO;;;IAIT,YAAY;AAAA,MACX,MAAM;AAAA,MACN,UAAW;AACV,eAAO;;;IAIT,OAAO;AAAA,MACN,MAAM;AAAA,MACN,UAAW;AACV,eAAO;;;IAIT,iBAAiB;AAAA,MAChB,MAAM;AAAA,MACN,SAAS;AAAA;IAGV,eAAe;AAAA,MACd,MAAM;AAAA,MACN,SAAS;AAAA;IAGV,YAAY;AAAA,MACX,MAAM,CAAC,QAAQ,MAAM;AAAA,MACrB,SAAS;AAAA;IAGV,YAAY;AAAA,MACX,MAAM;AAAA,MACN,SAAS;AAAA;IAEV,aAAa;AAAA,MACZ,MAAM;AAAA,MACN,SAAS;AAAA;IAEV,QAAQ;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA;;EAGX,OAAO;AACN,WAAO;AAAA,MACN,UAAU;;;EAGZ,UAAU;AAAA,IACT,YAAY;AACX,UAAI,KAAK,UAAU,KAAK,UAAU,MAAM,MAAM;AAC7C,eAAO,KAAK;AAAA,aACN;AACN,eAAO,KAAK;AAAA;;;EAIf,OAAO;AAAA,IACN,MAAM,QAAQ;AAEb,WAAK,KAAK,MAAM;AAAA;IAEjB,gBAAgB;AACf,WAAK,UAAU,QAAQ,QAAM;AAC5B,WAAG;OACH;AAAA;;EAGH,UAAU;AAET,QAAI,cAAc,SAAS,IAAI,EAAE,WAAW,OAAO,iBAAiB;AACpE,QAAI,CAAC,aAAa;AACjB,eAAS,IAAI,EAAE,WAAW,OAAO,iBAAiB,WAAW,SAAS,MAAM,OAAO,UAAU;AAC5F,YAAI,UAAU;AACb,eAAK,MAAM,UAAU,SAAS,MAAM,KAAK;AAAA,eACnC;AACN,cAAI;AACJ,mBAAS,KAAK,KAAK,OAAO;AACzB,kBAAM,KAAK,KAAK,MAAM;AACtB,gBAAI,MAAM,GAAG,YAAY,GAAG,SAAS,SAAS,YAAY;AACzD,uBAAS;AACT;AAAA;;AAGF,cAAI,CAAC;AAAQ,mBAAO,QAAQ,MAAM,kEAA0B;AAC5D,iBAAO,SAAS,MAAM,KAAK;AAAA;;;AAO9B,SAAK,WAAW;AAEhB,SAAK,YAAY;AAEjB,SAAK,iBAAiB;AAEtB,SAAK,oBAAoB;AAEzB,SAAK,YAAY;AACjB,SAAK,KAAK,KAAK,KAAK;AAAA;EAKrB,SAAS;AAAA,IACR,KAAK,WAAW;AAEf,UAAI,OAAO,KAAK,SAAS,EAAE,WAAW,GAAG;AACxC,aAAK,WAAW,KAAK;AACrB;AAAA;AAED,WAAK,YAAY;AACjB,WAAK,YAAY,IAAIA,kEAAU,SAAS;AACxC,WAAK;;IAGN,gBAAgB;AAEf,WAAK,SAAS,QAAQ,OAAK,GAAG;AAC9B,WAAK,UAAU,QAAQ,CAAC,MAAM;AAC7B,UAAE;OACF;AAED,aAAO,KAAK,KAAK,SAAS,EAAE,QAAQ,SAAO;AAC1C,YAAI,QAAQ,KAAK,OAChB,eAAe,KACf,WAAS;AACR,cAAI,CAAC;AAAO;AAEZ,cAAI,MAAM,eAAe,mBAAmB;AAC3C,qBAAS,KAAK,OAAO;AACpB,kBAAI,OAAO,GAAG,OAAO;AACrB,mBAAK,SAAS,QAAQ,KAAK,UAAU,MAAM,MAAM,EAAE;AAAA;iBAE9C;AACN,iBAAK,SAAS,OAAO,KAAK,UAAU,KAAK,KAAK;AAAA;WAGhD;AAAA,UACC,MAAM;AAAA,UACN,WAAW;AAAA;AAGb,aAAK,SAAS,KAAK,KAAK;AAAA,OACxB;AAAA;IAOF,SAAS,WAAW;AACnB,WAAK,KAAK,SAAS;AAAA;IAQpB,SAAS,MAAM,OAAO,UAAU;AAC/B,UAAI,UAAU,KAAK,UAAU,KAAK,WAAS,MAAM,SAAS,IAAI;AAC9D,UAAI,CAAC;AAAS,eAAO;AACrB,cAAQ,KAAK,UAAU,QAAQ,MAAM,KAAK;AAC1C,WAAK,SAAS,QAAQ;AACtB,cAAQ,MAAM;AACd,aAAO,QAAQ,aAAa,OAAO,QAAQ;AAAA;IAO5C,UAAU,OAAO;AAChB,WAAK,UAAU,QAAQ,UAAQ;AAC9B,aAAK,SAAS;AACd,cAAM,YAAY,KAAK,eAAe,KAAK,WAAS,MAAM,WAAW,KAAK,IAAI;AAC9E,YAAI,WAAW;AACd,oBAAU,SAAS;AAEnB,oBAAU,WAAW;AACrB,oBAAU,MAAM,SAAS,UAAU,WAAW,KAAK,EAAE;AACrD,oBAAU,MAAM,qBAAqB,UAAU,WAAW,KAAK,EAAE;AAAA;OAElE;AAED,WAAK,UAAU,QAAQ,UAAQ;AAC9B,YAAI,KAAK,MAAM;AACd,eAAK,SAAS,KAAK,QAAQ,KAAK,UAAU,KAAK,MAAM,EAAE;AAAA;OAExD;AAED,WAAK,MAAM,SAAS,KAAK;AAAA;IAO1B,cAAc,UAAU;AACvB,UAAI,aAAa;AAAM,mBAAW;AAClC,WAAK,MAAM,YAAY,QAAQ;AAAA;IAKhC,MAAM,YAAY,eAAe,MAAM,UAAU,UAAU;AAC1D,UAAI,YAAY;AAChB,eAAS,KAAK,eAAe;AAC5B,cAAM,OAAO,KAAK,UAAU,KAAK,OAAK,EAAE,SAAS,CAAC;AAClD,YAAI,MAAM;AACT,oBAAU,KAAK,IAAI;AAAA;;AAIrB,UAAI,CAAC,YAAY,OAAO,aAAa,YAAY;AAChD,mBAAW;AAAA;AAGZ,UAAI;AACJ,UAAI,CAAC,YAAY,OAAO,aAAa,cAAc,SAAS;AAC3D,kBAAU,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC1C,qBAAW,SAAS,OAAO,gBAAe;AACzC,aAAC,QAAQ,QAAQ,cAAa,IAAI,OAAO,KAAK;AAAA;SAE/C;AAAA;AAGF,UAAI,UAAU;AACd,UAAI,cAAc;AAClB,UAAI,KAAK,WAAW;AACnB,iBAAS,OAAO,WAAW;AAC1B,gBAAM,QAAQ,UAAU;AACxB,cAAI,OAAO,MAAM,UAAU,MAAM,aAAa,MAAM;AACpD,cAAI,MAAM,SAAS;AAClB,gBAAI,MAAM,KAAK,QAAQ,GAAG,MAAM,MAAM,MAAM,KAAK,QAAQ,GAAG,MAAM,IAAI;AACrE,oBAAM,YAAY,MAAM,KAAK,MAAM,GAAG;AACtC,oBAAM,YAAY,UAAU;AAC5B,oBAAM,aAAa,UAAU,GAAG,QAAQ,KAAK,EAAE;AAC/C,kBAAI,CAAC,YAAY,YAAY;AAC5B,4BAAY,aAAa;;AAE1B,0BAAY,WAAW,cAAc,KAAK,UAAU,MAAM,cAAc,KAAK;AAAA;iBAExE;AACN,wBAAY,QAAQ,KAAK,UAAU,MAAM,cAAc,KAAK;AAAA;AAE7D,gBAAM,SAAS,MAAM,MAAM,aAAa,cAAc,OAAO,IAAI;AACjE,cAAI,QAAQ;AACX,oBAAQ,KAAK,MAAM;AACnB,gBAAI,KAAK,gBAAgB,WAAW,KAAK,gBAAgB;AAAS;AAAA;;aAG9D;AACN,sBAAc;AAAA;AAEf,UAAI,MAAM,QAAQ,OAAO,GAAG;AAC3B,YAAI,QAAQ,WAAW;AAAG,oBAAU;AAAA;AAGrC,UAAI,MAAM,QAAQ,QAAQ,GAAG;AAC5B,iBAAS,QAAQ,OAAK;AACrB,sBAAY,KAAK,KAAK,UAAU;AAAA,SAChC;AAAA;AAGF,UAAI,SAAS,UAAU;AACtB,aAAK,MAAM,UAAU;AAAA,UACpB,QAAQ;AAAA,YACP,OAAO;AAAA,YACP,QAAQ;AAAA;SAET;AAAA,aACK;AACN,aAAK,MAAM,YAAY,OAAO;AAAA;AAG/B,kBAAY,OAAO,aAAa,cAAc,SAAS,SAAS,WAAW;AAE3E,UAAI,WAAW,UAAU;AACxB,eAAO;AAAA,aACD;AACN,eAAO;AAAA;;IAGT,aAAa;AAAA;IAMb,OAAO,UAAU,UAAU,MAAM;AAChC,eAAS,KAAK,KAAK,WAAW;AAC7B,cAAM,WAAW,KAAK,UAAU,KAAK,OAAK,EAAE,SAAS,CAAC;AACtD,YAAI,UAAU;AACb,cAAI,KAAK,SAAS,OAAO,QAAW;AACnC,iBAAK,SAAS,KAAK,KAAK,UAAU,GAAG,KAAK,UAAU,EAAE;AAAA;;;AAIzD,UAAI,CAAC,MAAM;AACV,gBAAQ,KAAK,2GAAgC;AAAA;AAE9C,aAAO,KAAK,YAAY,KAAK,UAAU,UAAU,UAAU,QAAQ;AAAA;IAQpE,SAAS,UAAU,UAAU;AAC5B,aAAO,KAAK,OAAO,UAAU,UAAU,IAAI;AAAA;IAQ5C,cAAc,OAAO,UAAU;AAC9B,cAAQ,GAAG,OAAO,KAAK;AACvB,UAAI,gBAAgB;AACpB,WAAK,UAAU,QAAQ,UAAQ;AAC9B,YAAI,MAAM,QAAQ,KAAK,IAAI,MAAM,IAAI;AACpC,0BAAgB,OAAO,OAAO,IAAI,eAAe;AAAA,YAChD,CAAC,KAAK,OAAO,KAAK,SAAS,KAAK;AAAA,WAChC;AAAA;OAEF;AACD,aAAO,KAAK,YAAY,eAAe,UAAU,IAAI,QAAQ;AAAA;IAM9D,cAAc;AACb,WAAK;;IAMN,cAAc,OAAO;AACpB,cAAQ,GAAG,OAAO,KAAK;AACvB,WAAK,UAAU,QAAQ,UAAQ;AAC9B,cAAM,YAAY,KAAK,eAAe,KAAK,WAAS,MAAM,WAAW,KAAK,IAAI;AAC9E,YAAI,MAAM,WAAW,GAAG;AACvB,eAAK,SAAS;AACd,cAAI,WAAW;AACd,sBAAU,SAAS;AAAA;eAEd;AACN,cAAI,MAAM,QAAQ,KAAK,IAAI,MAAM,IAAI;AACpC,iBAAK,SAAS;AACd,gBAAI,WAAW;AACd,wBAAU,SAAS;AAAA;;;OAItB;AAAA;IAOF,UAAU,KAAK,OAAO;AACrB,YAAM,QAAS,KAAK,UAAU,QAAQ,KAAK,UAAU,KAAK,SAAU;AACpE,YAAM,YAAY,MAAM,KAAK,SAAO,IAAI,UAAU,KAAK,YAAY,IAAI,MAAM,CAAC;AAC9E,YAAM,aAAa,MAAM,KAAK,SAAQ,IAAI,UAAU,IAAI,WAAW,aAAc,IAAI,WAAW,MAAM;AAEtG,UAAI,WAAW;AACd,gBAAQ,MAAM,KAAK,IAAI,QAAQ,UAAU,MAAM,UAAU,OAAO,OAAO,OAAO,KAAK;AAAA;AAGpF,UAAI,YAAY;AACf,gBAAQ,CAAC,QAAQ,QAAQ;AAAA;AAE1B,aAAO;AAAA;IAMR,YAAY,QAAQ;AACnB,aAAO,WAAW,SAAS,WAAW,YAAY,WAAW,YAAY,WAAW;AAAA;;;;;;;;;;;ACtcxF,GAAG,gBAAgB,SAAS;"}