{"version":3,"file":"Chat.js","sources":["../../../../../src/pages/message/Chat.vue","../../../../../uniPage:/cGFnZXMvbWVzc2FnZS9DaGF0LnZ1ZQ"],"sourcesContent":["<template>\r\n  <view class=\"chat-wraper\">\r\n    <ChatContent :key=\"currentDate\" :msgList=\"messageInfo\"></ChatContent>\r\n    <view class=\"send-msg\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"请输入消息\"\r\n        v-model=\"inputString\"\r\n        class=\"send\"\r\n        @confirm=\"onConfirm\"\r\n      />\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script>\r\nimport { onMounted, computed, ref, watch, onUpdated, onBeforeUpdate } from \"vue\";\r\nimport openIM from \"@/utils/openIM.js\";\r\nimport { getIMToken } from \"../../utils/auth.js\";\r\nimport { useStore } from \"vuex\";\r\nimport ChatContent from \"./ChatContent.vue\";\r\nimport { connectIM } from '@/utils/im.js'\r\nexport default {\r\n  components: {\r\n    ChatContent,\r\n  },\r\n  onShow: function (showprops) {\r\n    this.currentDate = new Date() + Math.random()\r\n    setTimeout(() => {\r\n      this.getConver()\r\n    }, 1000)\r\n  },\r\n  setup(props) {\r\n    let inputString = ref(\"\");\r\n    const messageInfo = ref([]);\r\n\r\n    const store = useStore();\r\n\r\n    console.log('store.state.user===========================================================================', store.getters['user/getUserInfo'])\r\n    const userInfo = computed(() => store.getters['user/getUserInfo']).value;\r\n\r\n    const monitorOnRecv = () => {\r\n      openIM.on(\"OnRecvNewMessage\", (data) => {\r\n        const RecvMessage = JSON.parse(data.data);\r\n        if (RecvMessage.contentType === 101) {\r\n          messageInfo.value.unshift(RecvMessage);\r\n        }\r\n      });\r\n    };\r\n\r\n    const getConver = () => {\r\n      // connectIM(userInfo.phone, getIMToken())\r\n      const options = {\r\n        groupID: \"\", // 群聊ID，拉取群聊时传入，否则为“”\r\n        startClientMsgID: \"\", // 上一次拉取的最后一条消息ID或空字符串,为空字符则从最新一条开始\r\n        count: 10000, // 每次拉取条数\r\n        userID: props.userID, // 用户ID，拉取单聊时传入，否则为“”\r\n      };\r\n      openIM\r\n        .getHistoryMessageList(options)\r\n        .then(({ data }) => {\r\n          console.log(\"历史数据=\", JSON.parse(data));\r\n          messageInfo.value = [...JSON.parse(data).reverse()];\r\n        })\r\n        .catch((err) => {\r\n          console.log('err 000000000000000000000000000000000000000000=', err)\r\n        });\r\n    };\r\n    const onConfirm = (event) => {\r\n      const { value } = event.detail;\r\n      inputString.value = value;\r\n      const offlinePushInfo = {\r\n        title: \"you have a new message\", // 推送标题\r\n        desc: \"\", // 推送描述\r\n        ex: \"\", // 扩展字段\r\n        iOSPushSound: \"\", // ios推送声音\r\n        iOSBadgeCount: false, // ios推送角标\r\n      };\r\n      openIM\r\n        .createTextMessage(value)\r\n        .then((res) => {\r\n          const options = {\r\n            recvID: props.userID,\r\n            groupID: \"\",\r\n            offlinePushInfo: offlinePushInfo,\r\n            message: res.data,\r\n          };\r\n          openIM\r\n            .sendMessage(options)\r\n            .then(({ data, errCode }) => {\r\n              const SendMessage = JSON.parse(data);\r\n              messageInfo.value.unshift(SendMessage);\r\n              inputString.value = \"\";\r\n            })\r\n            .catch((err) => {\r\n              console.log(\"err=\", err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"text err=\", err);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @description: 已读监听\r\n     * @param {*}\r\n     * @Author: \r\n     * @return {*}\r\n     */    \r\n    const asRead = () => {\r\n      openIM.on(\"OnRecvC2CReadReceipt\", (data) => {\r\n        JSON.parse(data.data).map(cr => {\r\n          cr.msgIDList.map(crt => {\r\n            messageInfo.value.find(ms => {\r\n              if(ms.clientMsgID === crt){\r\n                ms.isRead = true\r\n              }\r\n            })\r\n          })\r\n        })\r\n      });\r\n    };\r\n\r\n    watch(\r\n      () => messageInfo,\r\n      (count, prevCount) => {\r\n        const selfMessages = count.value.filter(\r\n          (item) => item.sendID === props.userID\r\n        );\r\n        const msgIDList = selfMessages.map((element) => element.clientMsgID);\r\n        const options = {\r\n          userID: props.userID,\r\n          msgIDList,\r\n        };\r\n        openIM\r\n          .markC2CMessageAsRead(options)\r\n          .then(({ data }) => {\r\n            console.log(\"传入已读=\", data);\r\n            openIM.markC2CMessageAsRead({\r\n              userID: props.userID,\r\n              msgIDList: [],\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            console.log(\"err===\", err);\r\n          });\r\n      },\r\n      {\r\n        deep: true,\r\n      }\r\n    );\r\n    onMounted(() => {\r\n      uni.setNavigationBarTitle({\r\n        title: props.title,\r\n      });\r\n      getConver();\r\n      monitorOnRecv();\r\n      asRead()\r\n    });\r\n    let currentDate = ref('')\r\n    return {\r\n      inputString,\r\n      messageInfo,\r\n      onConfirm,\r\n      currentDate,\r\n      getConver\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.chat-wraper {\r\n  .send-msg {\r\n    position: fixed;\r\n    bottom: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 20rpx 0;\r\n    width: 100%;\r\n    background-color: #eaeaea;\r\n    .send {\r\n      background-color: #fff;\r\n      height: 80rpx;\r\n      width: 460rpx;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import MiniProgramPage from 'C:/myself/social/social/src/pages/message/Chat.vue'\nwx.createPage(MiniProgramPage)"],"names":["ref","useStore","computed","openIM","watch","onMounted","uni"],"mappings":"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"}