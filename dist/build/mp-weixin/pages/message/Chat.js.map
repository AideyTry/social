{"version":3,"file":"Chat.js","sources":["../../../../../src/pages/message/Chat.vue","../../../../../uniPage:/cGFnZXMvbWVzc2FnZS9DaGF0LnZ1ZQ"],"sourcesContent":["<template>\r\n  <view class=\"chat-wraper\">\r\n    <ChatContent :key=\"currentDate\" :msgList=\"messageInfo\"></ChatContent>\r\n    <view class=\"send-msg\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"请输入消息\"\r\n        v-model=\"inputString\"\r\n        class=\"send\"\r\n        @confirm=\"onConfirm\"\r\n      />\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script>\r\nimport { onMounted, computed, ref, watch, onUpdated, onBeforeUpdate } from \"vue\";\r\nimport openIM from \"@/utils/openIM.js\";\r\nimport { getIMToken } from \"../../utils/auth.js\";\r\nimport { useStore } from \"vuex\";\r\nimport ChatContent from \"./ChatContent.vue\";\r\nimport { connectIM } from '@/utils/im.js'\r\nexport default {\r\n  components: {\r\n    ChatContent,\r\n  },\r\n  onShow: function (showprops) {\r\n    this.currentDate = new Date() + Math.random()\r\n    setTimeout(() => {\r\n      this.getConver()\r\n    }, 1000)\r\n  },\r\n  setup(props) {\r\n    let inputString = ref(\"\");\r\n    const messageInfo = ref([]);\r\n\r\n    const store = useStore();\r\n\r\n    console.log('store.state.user===========================================================================', store.getters['user/getUserInfo'])\r\n    const userInfo = computed(() => store.getters['user/getUserInfo']).value;\r\n\r\n    const monitorOnRecv = () => {\r\n      openIM.on(\"OnRecvNewMessage\", (data) => {\r\n        const RecvMessage = JSON.parse(data.data);\r\n        if (RecvMessage.contentType === 101) {\r\n          messageInfo.value.unshift(RecvMessage);\r\n        }\r\n      });\r\n    };\r\n\r\n    const getConver = () => {\r\n      // connectIM(userInfo.phone, getIMToken())\r\n      const options = {\r\n        groupID: \"\", // 群聊ID，拉取群聊时传入，否则为“”\r\n        startClientMsgID: \"\", // 上一次拉取的最后一条消息ID或空字符串,为空字符则从最新一条开始\r\n        count: 10000, // 每次拉取条数\r\n        userID: props.userID, // 用户ID，拉取单聊时传入，否则为“”\r\n      };\r\n      openIM\r\n        .getHistoryMessageList(options)\r\n        .then(({ data }) => {\r\n          console.log(\"历史数据=\", JSON.parse(data));\r\n          messageInfo.value = [...JSON.parse(data).reverse()];\r\n        })\r\n        .catch((err) => {\r\n          console.log('err 000000000000000000000000000000000000000000=', err)\r\n        });\r\n    };\r\n    const onConfirm = (event) => {\r\n      const { value } = event.detail;\r\n      inputString.value = value;\r\n      const offlinePushInfo = {\r\n        title: \"you have a new message\", // 推送标题\r\n        desc: \"\", // 推送描述\r\n        ex: \"\", // 扩展字段\r\n        iOSPushSound: \"\", // ios推送声音\r\n        iOSBadgeCount: false, // ios推送角标\r\n      };\r\n      openIM\r\n        .createTextMessage(value)\r\n        .then((res) => {\r\n          const options = {\r\n            recvID: props.userID,\r\n            groupID: \"\",\r\n            offlinePushInfo: offlinePushInfo,\r\n            message: res.data,\r\n          };\r\n          openIM\r\n            .sendMessage(options)\r\n            .then(({ data, errCode }) => {\r\n              const SendMessage = JSON.parse(data);\r\n              messageInfo.value.unshift(SendMessage);\r\n              inputString.value = \"\";\r\n            })\r\n            .catch((err) => {\r\n              console.log(\"err=\", err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"text err=\", err);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @description: 已读监听\r\n     * @param {*}\r\n     * @Author: \r\n     * @return {*}\r\n     */    \r\n    const asRead = () => {\r\n      openIM.on(\"OnRecvC2CReadReceipt\", (data) => {\r\n        JSON.parse(data.data).map(cr => {\r\n          cr.msgIDList.map(crt => {\r\n            messageInfo.value.find(ms => {\r\n              if(ms.clientMsgID === crt){\r\n                ms.isRead = true\r\n              }\r\n            })\r\n          })\r\n        })\r\n      });\r\n    };\r\n\r\n    watch(\r\n      () => messageInfo,\r\n      (count, prevCount) => {\r\n        const selfMessages = count.value.filter(\r\n          (item) => item.sendID === props.userID\r\n        );\r\n        const msgIDList = selfMessages.map((element) => element.clientMsgID);\r\n        const options = {\r\n          userID: props.userID,\r\n          msgIDList,\r\n        };\r\n        openIM\r\n          .markC2CMessageAsRead(options)\r\n          .then(({ data }) => {\r\n            console.log(\"传入已读=\", data);\r\n            openIM.markC2CMessageAsRead({\r\n              userID: props.userID,\r\n              msgIDList: [],\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            console.log(\"err===\", err);\r\n          });\r\n      },\r\n      {\r\n        deep: true,\r\n      }\r\n    );\r\n    onMounted(() => {\r\n      uni.setNavigationBarTitle({\r\n        title: props.title,\r\n      });\r\n      getConver();\r\n      monitorOnRecv();\r\n      asRead()\r\n    });\r\n    let currentDate = ref('')\r\n    return {\r\n      inputString,\r\n      messageInfo,\r\n      onConfirm,\r\n      currentDate,\r\n      getConver\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.chat-wraper {\r\n  .send-msg {\r\n    position: fixed;\r\n    bottom: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 20rpx 0;\r\n    width: 100%;\r\n    background-color: #eaeaea;\r\n    .send {\r\n      background-color: #fff;\r\n      height: 80rpx;\r\n      width: 460rpx;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import MiniProgramPage from 'C:/myself/social/social/src/pages/message/Chat.vue'\nwx.createPage(MiniProgramPage)"],"names":["components","ChatContent","onShow","showprops","currentDate","Date","Math","random","getConver","setup","props","inputString","ref","messageInfo","store","useStore","log","getters","value","options","groupID","startClientMsgID","count","userID","getHistoryMessageList","then","data","JSON","parse","reverse","catch","err","prevCount","msgIDList","filter","item","sendID","map","element","clientMsgID","markC2CMessageAsRead","deep","setNavigationBarTitle","title","on","RecvMessage","contentType","unshift","find","ms","crt","isRead","onConfirm","event","detail","offlinePushInfo","desc","ex","iOSPushSound","iOSBadgeCount","createTextMessage","res","recvID","message","sendMessage","errCode","SendMessage","wx","createPage","MiniProgramPage"],"mappings":"wFAoBA,SAGEA,WAAY,CACVC,YAJgB,IAAW,oBAM7BC,OAAQ,SAAUC,QACXC,YAAc,IAAIC,KAASC,KAAKC,qBAC1B,UACJC,cACJ,MAELC,MAAMC,OACAC,EAAcC,MAAI,UAChBC,EAAcD,MAAI,IAElBE,EAAQC,qBAENC,IAAI,8FAA+FF,EAAMG,QAAQ,mCAC/F,IAAMH,EAAMG,QAAQ,sBAAqBC,YAW7DV,EAAY,WAEVW,EAAU,CACdC,QAAS,GACTC,iBAAkB,GAClBC,MAAO,IACPC,OAAQb,EAAMa,iBAGbC,sBAAsBL,GACtBM,MAAK,EAAGC,KAAAA,cACCV,IAAI,QAASW,KAAKC,MAAMF,MACpBR,MAAQ,IAAIS,KAAKC,MAAMF,GAAMG,cAE1CC,OAAOC,YACEf,IAAI,kDAAmDe,gBA2DnE,IAAMlB,IACN,CAACS,EAAOU,WAIAC,EAHeX,EAAMJ,MAAMgB,QAC9BC,GAASA,EAAKC,SAAW1B,EAAMa,SAEHc,KAAKC,GAAYA,EAAQC,cAClDpB,EAAU,CACdI,OAAQb,EAAMa,OACdU,UAAAA,YAGCO,qBAAqBrB,GACrBM,MAAK,EAAGC,KAAAA,cACCV,IAAI,QAASU,YACdc,qBAAqB,CAC1BjB,OAAQb,EAAMa,OACdU,UAAW,QAGdH,OAAOC,YACEf,IAAI,SAAUe,QAG5B,CACEU,MAAM,iBAGA,aACJC,sBAAsB,CACxBC,MAAOjC,EAAMiC,qBA/GRC,GAAG,oBAAqBlB,UACvBmB,EAAclB,KAAKC,MAAMF,EAAKA,MACJ,MAA5BmB,EAAYC,eACF5B,MAAM6B,QAAQF,eAiEvBD,GAAG,wBAAyBlB,SAC5BE,MAAMF,EAAKA,MAAMW,WACjBJ,UAAUI,WACCnB,MAAM8B,UACbC,EAAGV,cAAgBW,MACjBC,QAAS,sBA4CpB/C,EAAcQ,MAAI,UACf,CACLD,YAAAA,EACAE,YAAAA,EACAuC,UA/FiBC,UACXnC,MAAEA,GAAUmC,EAAMC,SACZpC,MAAQA,QACdqC,EAAkB,CACtBZ,MAAO,yBACPa,KAAM,GACNC,GAAI,GACJC,aAAc,GACdC,eAAe,YAGdC,kBAAkB1C,GAClBO,MAAMoC,UACC1C,EAAU,CACd2C,OAAQpD,EAAMa,OACdH,QAAS,GACTmC,gBAAAA,EACAQ,QAASF,EAAInC,eAGZsC,YAAY7C,GACZM,MAAK,EAAGC,KAAAA,EAAMuC,QAAAA,YACPC,EAAcvC,KAAKC,MAAMF,KACnBR,MAAM6B,QAAQmB,KACdhD,MAAQ,MAErBY,OAAOC,YACEf,IAAI,OAAQe,SAGzBD,OAAOC,YACEf,IAAI,YAAae,OAiE7B3B,YAAAA,EACAI,UAAAA,mTCpKN2D,GAAGC,WAAWC"}