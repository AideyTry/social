{"version":3,"file":"pages-message-Chat.cf539664.js","sources":["../../../../src/pages/message/Chat.vue"],"sourcesContent":["<template>\r\n  <view class=\"chat-wraper\">\r\n    <ChatContent :key=\"messageInfo\" :msgList=\"messageInfo\"></ChatContent>\r\n    <view class=\"send-msg\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"请输入消息\"\r\n        v-model=\"inputString\"\r\n        class=\"send\"\r\n        @confirm=\"onConfirm\"\r\n      />\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script>\r\nimport { onMounted, computed, ref } from \"vue\";\r\nimport openIM from \"@/utils/openIM.js\";\r\nimport { getIMToken } from \"../../utils/auth.js\";\r\nimport { useStore } from \"vuex\";\r\nimport ChatContent from \"./ChatContent.vue\";\r\nexport default {\r\n  components: {\r\n    ChatContent,\r\n  },\r\n  setup(props) {\r\n    let inputString = ref(\"\");\r\n    const messageInfo = ref([]);\r\n    const monitorOnRecv = () => {\r\n      openIM.on(\"OnRecvNewMessage\", (data) => {\r\n        const RecvMessage = JSON.parse(data.data);\r\n        if (RecvMessage.contentType === 101) {\r\n          messageInfo.value.unshift(RecvMessage);\r\n        }\r\n      });\r\n    };\r\n\r\n    const getConver = () => {\r\n      const options = {\r\n        groupID: \"\", // 群聊ID，拉取群聊时传入，否则为“”\r\n        startClientMsgID: \"\", // 上一次拉取的最后一条消息ID或空字符串,为空字符则从最新一条开始\r\n        count: 10000, // 每次拉取条数\r\n        userID: props.userID, // 用户ID，拉取单聊时传入，否则为“”\r\n      };\r\n      openIM\r\n        .getHistoryMessageList(options)\r\n        .then(({ data }) => {\r\n          console.log(\"历史数据=\", JSON.parse(data));\r\n          messageInfo.value = [...JSON.parse(data).reverse()];\r\n        })\r\n        .catch((err) => {});\r\n    };\r\n    const onConfirm = (event) => {\r\n      console.log(\"event=\", event);\r\n      const { value } = event.detail;\r\n      inputString.value = value;\r\n      const offlinePushInfo = {\r\n        title: \"you have a new message\", // 推送标题\r\n        desc: \"\", // 推送描述\r\n        ex: \"\", // 扩展字段\r\n        iOSPushSound: \"\", // ios推送声音\r\n        iOSBadgeCount: false, // ios推送角标\r\n      };\r\n      console.log(\"props.userID=\", props.userID);\r\n      openIM\r\n        .createTextMessage(value)\r\n        .then((res) => {\r\n            console.log('res========', res)\r\n          console.log(\"message=\", JSON.parse(res.data));\r\n          const options = {\r\n            recvID: props.userID,\r\n            groupID: \"\",\r\n            offlinePushInfo: offlinePushInfo,\r\n            message: res.data,\r\n          };\r\n          openIM\r\n            .sendMessage(options)\r\n            .then(({ data, errCode }) => {\r\n              console.log('data, errCode ============================', data, errCode )\r\n              const SendMessage = JSON.parse(data);\r\n              messageInfo.value.unshift(SendMessage);\r\n              inputString.value = \"\";\r\n            })\r\n            .catch((err) => {\r\n              console.log(\"err=\", err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"text err=\", err);\r\n        });\r\n    };\r\n    onMounted(() => {\r\n      uni.setNavigationBarTitle({\r\n        title: props.title,\r\n      });\r\n      getConver();\r\n      monitorOnRecv();\r\n    });\r\n    return {\r\n      inputString,\r\n      messageInfo,\r\n      onConfirm,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.chat-wraper {\r\n  .send-msg {\r\n    position: fixed;\r\n    bottom: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 20rpx 0;\r\n    width: 100%;\r\n    background-color: #eaeaea;\r\n    .send {\r\n      background-color: #fff;\r\n      height: 80rpx;\r\n      width: 460rpx;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"names":["components","ChatContent","setup","props","inputString","ref","messageInfo","title","options","groupID","startClientMsgID","count","userID","getHistoryMessageList","then","data","log","JSON","parse","value","reverse","catch","err","on","RecvMessage","contentType","unshift","onConfirm","event","detail","offlinePushInfo","desc","ex","iOSPushSound","iOSBadgeCount","createTextMessage","res","recvID","message","sendMessage","errCode","SendMessage","key","type","class"],"mappings":"mOAsBEA,WAAY,CACVC,YAAAA,GAEFC,MAAMC,OACAC,EAAcC,EAAI,UAChBC,EAAcD,EAAI,cAgEd,OACkB,CACxBE,MAAOJ,EAAMI,QAxDC,YACVC,EAAU,CACdC,QAAS,GACTC,iBAAkB,GAClBC,MAAO,IACPC,OAAQT,EAAMS,UAGbC,sBAAsBL,GACtBM,MAAK,EAAGC,KAAAA,cACCC,IAAI,QAASC,KAAKC,MAAMH,MACpBI,MAAQ,IAAIF,KAAKC,MAAMH,GAAMK,cAE1CC,OAAOC,cArBHC,GAAG,oBAAqBR,UACvBS,EAAcP,KAAKC,MAAMH,EAAKA,MACJ,MAA5BS,EAAYC,eACFN,MAAMO,QAAQF,SAkEzB,CACLpB,YAAAA,EACAE,YAAAA,EACAqB,UAjDiBC,YACTZ,IAAI,SAAUY,SAChBT,MAAEA,GAAUS,EAAMC,SACZV,MAAQA,QACdW,EAAkB,CACtBvB,MAAO,yBACPwB,KAAM,GACNC,GAAI,GACJC,aAAc,GACdC,eAAe,WAETlB,IAAI,gBAAiBb,EAAMS,UAEhCuB,kBAAkBhB,GAClBL,MAAMsB,YACKpB,IAAI,cAAeoB,WACrBpB,IAAI,WAAYC,KAAKC,MAAMkB,EAAIrB,aACjCP,EAAU,CACd6B,OAAQlC,EAAMS,OACdH,QAAS,GACTqB,gBAAAA,EACAQ,QAASF,EAAIrB,QAGZwB,YAAY/B,GACZM,MAAK,EAAGC,KAAAA,EAAMyB,QAAAA,cACLxB,IAAI,6CAA8CD,EAAMyB,SAC1DC,EAAcxB,KAAKC,MAAMH,KACnBI,MAAMO,QAAQe,KACdtB,MAAQ,MAErBE,OAAOC,YACEN,IAAI,OAAQM,SAGzBD,OAAOC,YACEN,IAAI,YAAaM,4IAtFEoB,2GAI7BC,yDAEA,sDACCC"}