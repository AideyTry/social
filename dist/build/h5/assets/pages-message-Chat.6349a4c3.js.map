{"version":3,"file":"pages-message-Chat.6349a4c3.js","sources":["../../../../src/pages/message/Chat.vue"],"sourcesContent":["<template>\r\n  <view class=\"chat-wraper\">\r\n    <ChatContent :key=\"messageInfo\" :msgList=\"messageInfo\"></ChatContent>\r\n    <view class=\"send-msg\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"请输入消息\"\r\n        v-model=\"inputString\"\r\n        class=\"send\"\r\n        @confirm=\"onConfirm\"\r\n      />\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script>\r\nimport { onMounted, computed, ref, watch } from \"vue\";\r\nimport openIM from \"@/utils/openIM.js\";\r\nimport { getIMToken } from \"../../utils/auth.js\";\r\nimport { useStore } from \"vuex\";\r\nimport ChatContent from \"./ChatContent.vue\";\r\nexport default {\r\n  components: {\r\n    ChatContent,\r\n  },\r\n  setup(props) {\r\n    let inputString = ref(\"\");\r\n    const messageInfo = ref([]);\r\n\r\n    const store = useStore();\r\n    const userInfo = computed(() => store.state.user.userInfo).value;\r\n\r\n    const monitorOnRecv = () => {\r\n      openIM.on(\"OnRecvNewMessage\", (data) => {\r\n        const RecvMessage = JSON.parse(data.data);\r\n        if (RecvMessage.contentType === 101) {\r\n          messageInfo.value.unshift(RecvMessage);\r\n        }\r\n      });\r\n    };\r\n\r\n    const getConver = () => {\r\n      const options = {\r\n        groupID: \"\", // 群聊ID，拉取群聊时传入，否则为“”\r\n        startClientMsgID: \"\", // 上一次拉取的最后一条消息ID或空字符串,为空字符则从最新一条开始\r\n        count: 10000, // 每次拉取条数\r\n        userID: props.userID, // 用户ID，拉取单聊时传入，否则为“”\r\n      };\r\n      openIM\r\n        .getHistoryMessageList(options)\r\n        .then(({ data }) => {\r\n          console.log(\"历史数据=\", JSON.parse(data));\r\n          messageInfo.value = [...JSON.parse(data).reverse()];\r\n        })\r\n        .catch((err) => {});\r\n    };\r\n    const onConfirm = (event) => {\r\n      console.log(\"event=\", event);\r\n      const { value } = event.detail;\r\n      inputString.value = value;\r\n      const offlinePushInfo = {\r\n        title: \"you have a new message\", // 推送标题\r\n        desc: \"\", // 推送描述\r\n        ex: \"\", // 扩展字段\r\n        iOSPushSound: \"\", // ios推送声音\r\n        iOSBadgeCount: false, // ios推送角标\r\n      };\r\n      console.log(\"props.userID=\", props.userID);\r\n      openIM\r\n        .createTextMessage(value)\r\n        .then((res) => {\r\n          console.log(\"res========\", res);\r\n          console.log(\"message=\", JSON.parse(res.data));\r\n          const options = {\r\n            recvID: props.userID,\r\n            groupID: \"\",\r\n            offlinePushInfo: offlinePushInfo,\r\n            message: res.data,\r\n          };\r\n          openIM\r\n            .sendMessage(options)\r\n            .then(({ data, errCode }) => {\r\n              console.log(\r\n                \"data, errCode ============================\",\r\n                data,\r\n                errCode\r\n              );\r\n              const SendMessage = JSON.parse(data);\r\n              messageInfo.value.unshift(SendMessage);\r\n              inputString.value = \"\";\r\n            })\r\n            .catch((err) => {\r\n              console.log(\"err=\", err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"text err=\", err);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @description: 已读监听\r\n     * @param {*}\r\n     * @Author: \r\n     * @return {*}\r\n     */    \r\n    const asRead = () => {\r\n      openIM.on(\"OnRecvC2CReadReceipt\", (data) => {\r\n        JSON.parse(data.data).map(cr => {\r\n          cr.msgIDList.map(crt => {\r\n            messageInfo.value.find(ms => {\r\n              if(ms.clientMsgID === crt){\r\n                ms.isRead = true\r\n              }\r\n            })\r\n          })\r\n        })\r\n      });\r\n    };\r\n\r\n    watch(\r\n      () => messageInfo,\r\n      (count, prevCount) => {\r\n        console.log(\"count, prevCount====\", count, prevCount);\r\n        const selfMessages = count.value.filter(\r\n          (item) => item.sendID === props.userID\r\n        );\r\n        console.log(\"selfMessages===\", selfMessages);\r\n        console.log(\r\n          \"props.userID=========================================\",\r\n          props.userID\r\n        );\r\n        console.log(\"userInfo.phone===\", userInfo.phone);\r\n        const msgIDList = selfMessages.map((element) => element.clientMsgID);\r\n        console.log(\"msgIDList===\", msgIDList);\r\n        const options = {\r\n          userID: props.userID,\r\n          msgIDList,\r\n        };\r\n        openIM\r\n          .markC2CMessageAsRead(options)\r\n          .then(({ data }) => {\r\n            console.log(\"传入已读=\", data);\r\n            openIM.markC2CMessageAsRead({\r\n              userID: props.userID,\r\n              msgIDList: [],\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            console.log(\"err===\", err);\r\n          });\r\n      },\r\n      {\r\n        deep: true,\r\n      }\r\n    );\r\n    onMounted(() => {\r\n      uni.setNavigationBarTitle({\r\n        title: props.title,\r\n      });\r\n      getConver();\r\n      monitorOnRecv();\r\n      asRead();\r\n    });\r\n    return {\r\n      inputString,\r\n      messageInfo,\r\n      onConfirm,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.chat-wraper {\r\n  .send-msg {\r\n    position: fixed;\r\n    bottom: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 20rpx 0;\r\n    width: 100%;\r\n    background-color: #eaeaea;\r\n    .send {\r\n      background-color: #fff;\r\n      height: 80rpx;\r\n      width: 460rpx;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"names":["components","ChatContent","setup","props","inputString","ref","messageInfo","store","useStore","userInfo","computed","state","user","value","count","prevCount","log","selfMessages","filter","item","sendID","userID","phone","msgIDList","map","element","clientMsgID","options","markC2CMessageAsRead","then","data","catch","err","deep","title","groupID","startClientMsgID","getHistoryMessageList","JSON","parse","reverse","on","RecvMessage","contentType","unshift","find","ms","crt","isRead","onConfirm","event","detail","offlinePushInfo","desc","ex","iOSPushSound","iOSBadgeCount","createTextMessage","res","recvID","message","sendMessage","errCode","SendMessage","key","type","class"],"mappings":"uRAsBEA,WAAY,CACVC,YAAAA,GAEFC,MAAMC,OACAC,EAAcC,EAAI,UAChBC,EAAcD,EAAI,IAElBE,EAAQC,IACRC,EAAWC,GAAS,IAAMH,EAAMI,MAAMC,KAAKH,WAAUI,gBA2FzD,IAAMP,IACN,CAACQ,EAAOC,aACEC,IAAI,uBAAwBF,EAAOC,SACrCE,EAAeH,EAAMD,MAAMK,QAC9BC,GAASA,EAAKC,SAAWjB,EAAMkB,iBAE1BL,IAAI,kBAAmBC,WACvBD,IACN,wDACAb,EAAMkB,gBAEAL,IAAI,oBAAqBP,EAASa,aACpCC,EAAYN,EAAaO,KAAKC,GAAYA,EAAQC,sBAChDV,IAAI,eAAgBO,SACtBI,EAAU,CACdN,OAAQlB,EAAMkB,OACdE,UAAAA,KAGCK,qBAAqBD,GACrBE,MAAK,EAAGC,KAAAA,cACCd,IAAI,QAASc,KACdF,qBAAqB,CAC1BP,OAAQlB,EAAMkB,OACdE,UAAW,QAGdQ,OAAOC,YACEhB,IAAI,SAAUgB,QAG5B,CACEC,MAAM,OAGA,OACkB,CACxBC,MAAO/B,EAAM+B,QArHC,YACVP,EAAU,CACdQ,QAAS,GACTC,iBAAkB,GAClBtB,MAAO,IACPO,OAAQlB,EAAMkB,UAGbgB,sBAAsBV,GACtBE,MAAK,EAAGC,KAAAA,cACCd,IAAI,QAASsB,KAAKC,MAAMT,MACpBjB,MAAQ,IAAIyB,KAAKC,MAAMT,GAAMU,cAE1CT,OAAOC,cArBHS,GAAG,oBAAqBX,UACvBY,EAAcJ,KAAKC,MAAMT,EAAKA,MACJ,MAA5BY,EAAYC,eACF9B,MAAM+B,QAAQF,QAuEvBD,GAAG,wBAAyBX,SAC5BS,MAAMT,EAAKA,MAAMN,WACjBD,UAAUC,WACCX,MAAMgC,UACbC,EAAGpB,cAAgBqB,MACjBC,QAAS,kBAoDjB,CACL5C,YAAAA,EACAE,YAAAA,EACA2C,UA/GiBC,YACTlC,IAAI,SAAUkC,SAChBrC,MAAEA,GAAUqC,EAAMC,SACZtC,MAAQA,QACduC,EAAkB,CACtBlB,MAAO,yBACPmB,KAAM,GACNC,GAAI,GACJC,aAAc,GACdC,eAAe,WAETxC,IAAI,gBAAiBb,EAAMkB,UAEhCoC,kBAAkB5C,GAClBgB,MAAM6B,YACG1C,IAAI,cAAe0C,WACnB1C,IAAI,WAAYsB,KAAKC,MAAMmB,EAAI5B,aACjCH,EAAU,CACdgC,OAAQxD,EAAMkB,OACdc,QAAS,GACTiB,gBAAAA,EACAQ,QAASF,EAAI5B,QAGZ+B,YAAYlC,GACZE,MAAK,EAAGC,KAAAA,EAAMgC,QAAAA,cACL9C,IACN,6CACAc,EACAgC,SAEIC,EAAczB,KAAKC,MAAMT,KACnBjB,MAAM+B,QAAQmB,KACdlD,MAAQ,MAErBkB,OAAOC,YACEhB,IAAI,OAAQgB,SAGzBD,OAAOC,YACEhB,IAAI,YAAagB,4IA9FEgC,2GAI7BC,yDAEA,sDACCC"}